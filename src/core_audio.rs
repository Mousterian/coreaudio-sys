/* automatically generated by rust-bindgen */

pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_longlong;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulonglong;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_longlong;
pub type __uint64_t = ::libc::c_ulonglong;
pub type __darwin_intptr_t = ::libc::c_long;
pub type __darwin_natural_t = ::libc::c_uint;
pub type __darwin_ct_rune_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u64; 16usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __mbstate8(&mut self) -> *mut [::libc::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut ::libc::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Union_Unnamed1;
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::libc::c_long;
pub type __darwin_size_t = ::libc::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::libc::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::libc::c_int;
pub type __darwin_clock_t = ::libc::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::libc::c_long;
pub type __darwin_time_t = ::libc::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::libc::c_uint;
pub type __darwin_fsfilcnt_t = ::libc::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::libc::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::libc::c_char; 37usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<extern "C" fn(arg1:
                                                           *mut ::libc::c_void)
                                             -> ()>,
    pub __arg: *mut ::libc::c_void,
    pub __next: *mut Struct___darwin_pthread_handler_rec,
}
impl ::std::clone::Clone for Struct___darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_pthread_handler_rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_attr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_cond_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 40usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_condattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutex_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutexattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_once_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_once_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlock_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 192usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlockattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 16usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_t {
    pub __sig: ::libc::c_long,
    pub __cleanup_stack: *mut Struct___darwin_pthread_handler_rec,
    pub __opaque: [::libc::c_char; 8176usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_pthread_attr_t = Struct__opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = Struct__opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = Struct__opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::libc::c_ulong;
pub type __darwin_pthread_mutex_t = Struct__opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = Struct__opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = Struct__opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = Struct__opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = Struct__opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut Struct__opaque_pthread_t;
pub type intptr_t = __darwin_intptr_t;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulonglong;
pub type register_t = int64_t;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = int64_t;
pub type user_long_t = int64_t;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = int64_t;
pub type user_off_t = int64_t;
pub type syscall_arg_t = u_int64_t;
pub type u_char = ::libc::c_uchar;
pub type u_short = ::libc::c_ushort;
pub type u_int = ::libc::c_uint;
pub type u_long = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::libc::c_char;
pub type daddr_t = int32_t;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = int32_t;
pub type swblk_t = int32_t;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type size_t = __darwin_size_t;
pub type ssize_t = __darwin_ssize_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
impl ::std::clone::Clone for Struct_fd_set {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_fd_set;
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type UInt8 = ::libc::c_uchar;
pub type SInt8 = ::libc::c_char;
pub type UInt16 = ::libc::c_ushort;
pub type SInt16 = ::libc::c_short;
pub type UInt32 = ::libc::c_uint;
pub type SInt32 = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_wide {
    pub lo: UInt32,
    pub hi: SInt32,
}
impl ::std::clone::Clone for Struct_wide {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_wide {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type wide = Struct_wide;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_UnsignedWide {
    pub lo: UInt32,
    pub hi: UInt32,
}
impl ::std::clone::Clone for Struct_UnsignedWide {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_UnsignedWide {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type UnsignedWide = Struct_UnsignedWide;
pub type SInt64 = ::libc::c_longlong;
pub type UInt64 = ::libc::c_ulonglong;
pub type Fixed = SInt32;
pub type FixedPtr = *mut Fixed;
pub type Fract = SInt32;
pub type FractPtr = *mut Fract;
pub type UnsignedFixed = UInt32;
pub type UnsignedFixedPtr = *mut UnsignedFixed;
pub type ShortFixed = ::libc::c_short;
pub type ShortFixedPtr = *mut ShortFixed;
pub type Float32 = ::libc::c_float;
pub type Float64 = ::libc::c_double;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Float80 {
    pub exp: SInt16,
    pub man: [UInt16; 4usize],
}
impl ::std::clone::Clone for Struct_Float80 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Float80 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Float80 = Struct_Float80;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Float96 {
    pub exp: [SInt16; 2usize],
    pub man: [UInt16; 4usize],
}
impl ::std::clone::Clone for Struct_Float96 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Float96 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Float96 = Struct_Float96;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Float32Point {
    pub x: Float32,
    pub y: Float32,
}
impl ::std::clone::Clone for Struct_Float32Point {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Float32Point {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Float32Point = Struct_Float32Point;
pub type Ptr = *mut ::libc::c_char;
pub type Handle = *mut Ptr;
pub type Size = ::libc::c_long;
pub type OSErr = SInt16;
pub type OSStatus = SInt32;
pub type LogicalAddress = *mut ::libc::c_void;
pub type ConstLogicalAddress = *const ::libc::c_void;
pub type PhysicalAddress = *mut ::libc::c_void;
pub type BytePtr = *mut UInt8;
pub type ByteCount = ::libc::c_ulong;
pub type ByteOffset = ::libc::c_ulong;
pub type Duration = SInt32;
pub type AbsoluteTime = UnsignedWide;
pub type OptionBits = UInt32;
pub type ItemCount = ::libc::c_ulong;
pub type PBVersion = UInt32;
pub type ScriptCode = SInt16;
pub type LangCode = SInt16;
pub type RegionCode = SInt16;
pub type FourCharCode = UInt32;
pub type OSType = FourCharCode;
pub type ResType = FourCharCode;
pub type OSTypePtr = *mut OSType;
pub type ResTypePtr = *mut ResType;
pub type Boolean = ::libc::c_uchar;
pub type ProcPtr = ::std::option::Option<extern "C" fn() -> ::libc::c_long>;
pub type Register68kProcPtr = ::std::option::Option<extern "C" fn() -> ()>;
pub type UniversalProcPtr = ProcPtr;
pub type ProcHandle = *mut ProcPtr;
pub type UniversalProcHandle = *mut UniversalProcPtr;
pub type PRefCon = *mut ::libc::c_void;
pub type URefCon = *mut ::libc::c_void;
pub type SRefCon = *mut ::libc::c_void;
pub type Enum_Unnamed2 = ::libc::c_uint;
pub const noErr: ::libc::c_uint = 0;
pub type Enum_Unnamed3 = ::libc::c_uint;
pub const kNilOptions: ::libc::c_uint = 0;
pub type Enum_Unnamed4 = ::libc::c_uint;
pub const kVariableLengthArray: ::libc::c_uint = 1;
pub type Enum_Unnamed5 = ::libc::c_uint;
pub const kUnknownType: ::libc::c_uint = 1061109567;
pub type UnicodeScalarValue = UInt32;
pub type UTF32Char = UInt32;
pub type UniChar = UInt16;
pub type UTF16Char = UInt16;
pub type UTF8Char = UInt8;
pub type UniCharPtr = *mut UniChar;
pub type UniCharCount = ::libc::c_ulong;
pub type UniCharCountPtr = *mut UniCharCount;
pub type Str255 = [::libc::c_uchar; 256usize];
pub type Str63 = [::libc::c_uchar; 64usize];
pub type Str32 = [::libc::c_uchar; 33usize];
pub type Str31 = [::libc::c_uchar; 32usize];
pub type Str27 = [::libc::c_uchar; 28usize];
pub type Str15 = [::libc::c_uchar; 16usize];
pub type Str32Field = [::libc::c_uchar; 34usize];
pub type StrFileName = Str63;
pub type StringPtr = *mut ::libc::c_uchar;
pub type StringHandle = *mut StringPtr;
pub type ConstStringPtr = *const ::libc::c_uchar;
pub type ConstStr255Param = *const ::libc::c_uchar;
pub type ConstStr63Param = *const ::libc::c_uchar;
pub type ConstStr32Param = *const ::libc::c_uchar;
pub type ConstStr31Param = *const ::libc::c_uchar;
pub type ConstStr27Param = *const ::libc::c_uchar;
pub type ConstStr15Param = *const ::libc::c_uchar;
pub type ConstStrFileNameParam = ConstStr63Param;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ProcessSerialNumber {
    pub highLongOfPSN: UInt32,
    pub lowLongOfPSN: UInt32,
}
impl ::std::clone::Clone for Struct_ProcessSerialNumber {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ProcessSerialNumber {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ProcessSerialNumber = Struct_ProcessSerialNumber;
pub type ProcessSerialNumberPtr = *mut ProcessSerialNumber;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Point {
    pub v: ::libc::c_short,
    pub h: ::libc::c_short,
}
impl ::std::clone::Clone for Struct_Point {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Point {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Point = Struct_Point;
pub type PointPtr = *mut Point;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Rect {
    pub top: ::libc::c_short,
    pub left: ::libc::c_short,
    pub bottom: ::libc::c_short,
    pub right: ::libc::c_short,
}
impl ::std::clone::Clone for Struct_Rect {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Rect {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Rect = Struct_Rect;
pub type RectPtr = *mut Rect;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_FixedPoint {
    pub x: Fixed,
    pub y: Fixed,
}
impl ::std::clone::Clone for Struct_FixedPoint {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_FixedPoint {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FixedPoint = Struct_FixedPoint;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_FixedRect {
    pub left: Fixed,
    pub top: Fixed,
    pub right: Fixed,
    pub bottom: Fixed,
}
impl ::std::clone::Clone for Struct_FixedRect {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_FixedRect {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FixedRect = Struct_FixedRect;
pub type CharParameter = ::libc::c_short;
pub type Enum_Unnamed6 = ::libc::c_uint;
pub const normal: ::libc::c_uint = 0;
pub const bold: ::libc::c_uint = 1;
pub const italic: ::libc::c_uint = 2;
pub const underline: ::libc::c_uint = 4;
pub const outline: ::libc::c_uint = 8;
pub const shadow: ::libc::c_uint = 16;
pub const condense: ::libc::c_uint = 32;
pub const extend: ::libc::c_uint = 64;
pub type Style = ::libc::c_uchar;
pub type StyleParameter = ::libc::c_short;
pub type StyleField = Style;
pub type TimeValue = SInt32;
pub type TimeScale = SInt32;
pub type CompTimeValue = wide;
pub type TimeValue64 = SInt64;
pub enum Struct_TimeBaseRecord { }
pub type TimeBase = *mut Struct_TimeBaseRecord;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_TimeRecord {
    pub value: CompTimeValue,
    pub scale: TimeScale,
    pub base: TimeBase,
}
impl ::std::clone::Clone for Struct_TimeRecord {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_TimeRecord {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TimeRecord = Struct_TimeRecord;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_NumVersion {
    pub nonRelRev: UInt8,
    pub stage: UInt8,
    pub minorAndBugRev: UInt8,
    pub majorRev: UInt8,
}
impl ::std::clone::Clone for Struct_NumVersion {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_NumVersion {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type NumVersion = Struct_NumVersion;
pub type Enum_Unnamed7 = ::libc::c_uint;
pub const developStage: ::libc::c_uint = 32;
pub const alphaStage: ::libc::c_uint = 64;
pub const betaStage: ::libc::c_uint = 96;
pub const finalStage: ::libc::c_uint = 128;
#[repr(C)]
#[derive(Copy)]
pub struct Union_NumVersionVariant {
    pub _bindgen_data_: [u16; 2usize],
}
impl Union_NumVersionVariant {
    pub unsafe fn parts(&mut self) -> *mut NumVersion {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn whole(&mut self) -> *mut UInt32 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_NumVersionVariant {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_NumVersionVariant {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type NumVersionVariant = Union_NumVersionVariant;
pub type NumVersionVariantPtr = *mut NumVersionVariant;
pub type NumVersionVariantHandle = *mut NumVersionVariantPtr;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VersRec {
    pub numericVersion: NumVersion,
    pub countryCode: ::libc::c_short,
    pub shortVersion: Str255,
    pub reserved: Str255,
}
impl ::std::clone::Clone for Struct_VersRec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VersRec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VersRec = Struct_VersRec;
pub type VersRecPtr = *mut VersRec;
pub type VersRecHndl = *mut VersRecPtr;
pub type Byte = UInt8;
pub type SignedByte = SInt8;
pub type WidePtr = *mut wide;
pub type UnsignedWidePtr = *mut UnsignedWide;
pub type extended80 = Float80;
pub type extended96 = Float96;
pub type VHSelect = SInt8;
pub type CFTypeID = ::libc::c_ulong;
pub type CFOptionFlags = ::libc::c_ulong;
pub type CFHashCode = ::libc::c_ulong;
pub type CFIndex = ::libc::c_long;
pub type CFTypeRef = *const ::libc::c_void;
pub enum Struct___CFString { }
pub type CFStringRef = *const Struct___CFString;
pub type CFMutableStringRef = *mut Struct___CFString;
pub type CFPropertyListRef = CFTypeRef;
pub type CFComparisonResult = CFIndex;
pub type Enum_Unnamed8 = ::libc::c_int;
pub const kCFCompareLessThan: ::libc::c_int = -1;
pub const kCFCompareEqualTo: ::libc::c_int = 0;
pub const kCFCompareGreaterThan: ::libc::c_int = 1;
pub type CFComparatorFunction =
    ::std::option::Option<extern "C" fn(val1: *const ::libc::c_void,
                                        val2: *const ::libc::c_void,
                                        context: *mut ::libc::c_void)
                              -> CFComparisonResult>;
pub type Enum_Unnamed9 = ::libc::c_int;
pub const kCFNotFound: ::libc::c_int = -1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub location: CFIndex,
    pub length: CFIndex,
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFRange = Struct_Unnamed10;
pub enum Struct___CFNull { }
pub type CFNullRef = *const Struct___CFNull;
pub enum Struct___CFAllocator { }
pub type CFAllocatorRef = *const Struct___CFAllocator;
pub type CFAllocatorRetainCallBack =
    ::std::option::Option<extern "C" fn(info: *const ::libc::c_void)
                              -> *const ::libc::c_void>;
pub type CFAllocatorReleaseCallBack =
    ::std::option::Option<extern "C" fn(info: *const ::libc::c_void) -> ()>;
pub type CFAllocatorCopyDescriptionCallBack =
    ::std::option::Option<extern "C" fn(info: *const ::libc::c_void)
                              -> CFStringRef>;
pub type CFAllocatorAllocateCallBack =
    ::std::option::Option<extern "C" fn(allocSize: CFIndex,
                                        hint: CFOptionFlags,
                                        info: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
pub type CFAllocatorReallocateCallBack =
    ::std::option::Option<extern "C" fn(ptr: *mut ::libc::c_void,
                                        newsize: CFIndex, hint: CFOptionFlags,
                                        info: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
pub type CFAllocatorDeallocateCallBack =
    ::std::option::Option<extern "C" fn(ptr: *mut ::libc::c_void,
                                        info: *mut ::libc::c_void) -> ()>;
pub type CFAllocatorPreferredSizeCallBack =
    ::std::option::Option<extern "C" fn(size: CFIndex, hint: CFOptionFlags,
                                        info: *mut ::libc::c_void)
                              -> CFIndex>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed11 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: CFAllocatorRetainCallBack,
    pub release: CFAllocatorReleaseCallBack,
    pub copyDescription: CFAllocatorCopyDescriptionCallBack,
    pub allocate: CFAllocatorAllocateCallBack,
    pub reallocate: CFAllocatorReallocateCallBack,
    pub deallocate: CFAllocatorDeallocateCallBack,
    pub preferredSize: CFAllocatorPreferredSizeCallBack,
}
impl ::std::clone::Clone for Struct_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFAllocatorContext = Struct_Unnamed11;
pub type Enum_Unnamed12 = ::libc::c_int;
pub const kAudio_UnimplementedError: ::libc::c_int = -4;
pub const kAudio_FileNotFoundError: ::libc::c_int = -43;
pub const kAudio_FilePermissionError: ::libc::c_int = -54;
pub const kAudio_TooManyFilesOpenError: ::libc::c_int = -42;
pub const kAudio_BadFilePathError: ::libc::c_int = 561017960;
pub const kAudio_ParamError: ::libc::c_int = -50;
pub const kAudio_MemFullError: ::libc::c_int = -108;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioValueRange {
    pub mMinimum: Float64,
    pub mMaximum: Float64,
}
impl ::std::clone::Clone for Struct_AudioValueRange {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioValueRange {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioValueRange = Struct_AudioValueRange;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioValueTranslation {
    pub mInputData: *mut ::libc::c_void,
    pub mInputDataSize: UInt32,
    pub mOutputData: *mut ::libc::c_void,
    pub mOutputDataSize: UInt32,
}
impl ::std::clone::Clone for Struct_AudioValueTranslation {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioValueTranslation {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioValueTranslation = Struct_AudioValueTranslation;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioBuffer {
    pub mNumberChannels: UInt32,
    pub mDataByteSize: UInt32,
    pub mData: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_AudioBuffer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioBuffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioBuffer = Struct_AudioBuffer;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioBufferList {
    pub mNumberBuffers: UInt32,
    pub mBuffers: [AudioBuffer; 1usize],
}
impl ::std::clone::Clone for Struct_AudioBufferList {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioBufferList {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioBufferList = Struct_AudioBufferList;
pub type AudioSampleType = Float32;
pub type AudioUnitSampleType = Float32;
pub type AudioFormatID = UInt32;
pub type AudioFormatFlags = UInt32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioStreamBasicDescription {
    pub mSampleRate: Float64,
    pub mFormatID: AudioFormatID,
    pub mFormatFlags: AudioFormatFlags,
    pub mBytesPerPacket: UInt32,
    pub mFramesPerPacket: UInt32,
    pub mBytesPerFrame: UInt32,
    pub mChannelsPerFrame: UInt32,
    pub mBitsPerChannel: UInt32,
    pub mReserved: UInt32,
}
impl ::std::clone::Clone for Struct_AudioStreamBasicDescription {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioStreamBasicDescription {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioStreamBasicDescription = Struct_AudioStreamBasicDescription;
pub type Enum_Unnamed13 = ::libc::c_uint;
pub const kAudioStreamAnyRate: ::libc::c_uint = 0;
pub type Enum_Unnamed14 = ::libc::c_uint;
pub const kAudioFormatLinearPCM: ::libc::c_uint = 1819304813;
pub const kAudioFormatAC3: ::libc::c_uint = 1633889587;
pub const kAudioFormat60958AC3: ::libc::c_uint = 1667326771;
pub const kAudioFormatAppleIMA4: ::libc::c_uint = 1768775988;
pub const kAudioFormatMPEG4AAC: ::libc::c_uint = 1633772320;
pub const kAudioFormatMPEG4CELP: ::libc::c_uint = 1667591280;
pub const kAudioFormatMPEG4HVXC: ::libc::c_uint = 1752594531;
pub const kAudioFormatMPEG4TwinVQ: ::libc::c_uint = 1953986161;
pub const kAudioFormatMACE3: ::libc::c_uint = 1296122675;
pub const kAudioFormatMACE6: ::libc::c_uint = 1296122678;
pub const kAudioFormatULaw: ::libc::c_uint = 1970037111;
pub const kAudioFormatALaw: ::libc::c_uint = 1634492791;
pub const kAudioFormatQDesign: ::libc::c_uint = 1363430723;
pub const kAudioFormatQDesign2: ::libc::c_uint = 1363430706;
pub const kAudioFormatQUALCOMM: ::libc::c_uint = 1365470320;
pub const kAudioFormatMPEGLayer1: ::libc::c_uint = 778924081;
pub const kAudioFormatMPEGLayer2: ::libc::c_uint = 778924082;
pub const kAudioFormatMPEGLayer3: ::libc::c_uint = 778924083;
pub const kAudioFormatTimeCode: ::libc::c_uint = 1953066341;
pub const kAudioFormatMIDIStream: ::libc::c_uint = 1835623529;
pub const kAudioFormatParameterValueStream: ::libc::c_uint = 1634760307;
pub const kAudioFormatAppleLossless: ::libc::c_uint = 1634492771;
pub const kAudioFormatMPEG4AAC_HE: ::libc::c_uint = 1633772392;
pub const kAudioFormatMPEG4AAC_LD: ::libc::c_uint = 1633772396;
pub const kAudioFormatMPEG4AAC_ELD: ::libc::c_uint = 1633772389;
pub const kAudioFormatMPEG4AAC_ELD_SBR: ::libc::c_uint = 1633772390;
pub const kAudioFormatMPEG4AAC_ELD_V2: ::libc::c_uint = 1633772391;
pub const kAudioFormatMPEG4AAC_HE_V2: ::libc::c_uint = 1633772400;
pub const kAudioFormatMPEG4AAC_Spatial: ::libc::c_uint = 1633772403;
pub const kAudioFormatAMR: ::libc::c_uint = 1935764850;
pub const kAudioFormatAMR_WB: ::libc::c_uint = 1935767394;
pub const kAudioFormatAudible: ::libc::c_uint = 1096107074;
pub const kAudioFormatiLBC: ::libc::c_uint = 1768710755;
pub const kAudioFormatDVIIntelIMA: ::libc::c_uint = 1836253201;
pub const kAudioFormatMicrosoftGSM: ::libc::c_uint = 1836253233;
pub const kAudioFormatAES3: ::libc::c_uint = 1634038579;
pub type Enum_Unnamed15 = ::libc::c_int;
pub const kAudioFormatFlagIsFloat: ::libc::c_int = 1;
pub const kAudioFormatFlagIsBigEndian: ::libc::c_int = 2;
pub const kAudioFormatFlagIsSignedInteger: ::libc::c_int = 4;
pub const kAudioFormatFlagIsPacked: ::libc::c_int = 8;
pub const kAudioFormatFlagIsAlignedHigh: ::libc::c_int = 16;
pub const kAudioFormatFlagIsNonInterleaved: ::libc::c_int = 32;
pub const kAudioFormatFlagIsNonMixable: ::libc::c_int = 64;
pub const kAudioFormatFlagsAreAllClear: ::libc::c_int = -2147483648;
pub const kLinearPCMFormatFlagIsFloat: ::libc::c_int = 1;
pub const kLinearPCMFormatFlagIsBigEndian: ::libc::c_int = 2;
pub const kLinearPCMFormatFlagIsSignedInteger: ::libc::c_int = 4;
pub const kLinearPCMFormatFlagIsPacked: ::libc::c_int = 8;
pub const kLinearPCMFormatFlagIsAlignedHigh: ::libc::c_int = 16;
pub const kLinearPCMFormatFlagIsNonInterleaved: ::libc::c_int = 32;
pub const kLinearPCMFormatFlagIsNonMixable: ::libc::c_int = 64;
pub const kLinearPCMFormatFlagsSampleFractionShift: ::libc::c_int = 7;
pub const kLinearPCMFormatFlagsSampleFractionMask: ::libc::c_int = 8064;
pub const kLinearPCMFormatFlagsAreAllClear: ::libc::c_int = -2147483648;
pub const kAppleLosslessFormatFlag_16BitSourceData: ::libc::c_int = 1;
pub const kAppleLosslessFormatFlag_20BitSourceData: ::libc::c_int = 2;
pub const kAppleLosslessFormatFlag_24BitSourceData: ::libc::c_int = 3;
pub const kAppleLosslessFormatFlag_32BitSourceData: ::libc::c_int = 4;
pub type Enum_Unnamed16 = ::libc::c_uint;
pub const kAudioFormatFlagsNativeEndian: ::libc::c_uint = 0;
pub const kAudioFormatFlagsCanonical: ::libc::c_uint = 9;
pub const kAudioFormatFlagsAudioUnitCanonical: ::libc::c_uint = 41;
pub const kAudioFormatFlagsNativeFloatPacked: ::libc::c_uint = 9;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioStreamPacketDescription {
    pub mStartOffset: SInt64,
    pub mVariableFramesInPacket: UInt32,
    pub mDataByteSize: UInt32,
}
impl ::std::clone::Clone for Struct_AudioStreamPacketDescription {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioStreamPacketDescription {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioStreamPacketDescription = Struct_AudioStreamPacketDescription;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_SMPTETime {
    pub mSubframes: SInt16,
    pub mSubframeDivisor: SInt16,
    pub mCounter: UInt32,
    pub mType: UInt32,
    pub mFlags: UInt32,
    pub mHours: SInt16,
    pub mMinutes: SInt16,
    pub mSeconds: SInt16,
    pub mFrames: SInt16,
}
impl ::std::clone::Clone for Struct_SMPTETime {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_SMPTETime {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SMPTETime = Struct_SMPTETime;
pub type Enum_Unnamed17 = ::libc::c_uint;
pub const kSMPTETimeType24: ::libc::c_uint = 0;
pub const kSMPTETimeType25: ::libc::c_uint = 1;
pub const kSMPTETimeType30Drop: ::libc::c_uint = 2;
pub const kSMPTETimeType30: ::libc::c_uint = 3;
pub const kSMPTETimeType2997: ::libc::c_uint = 4;
pub const kSMPTETimeType2997Drop: ::libc::c_uint = 5;
pub const kSMPTETimeType60: ::libc::c_uint = 6;
pub const kSMPTETimeType5994: ::libc::c_uint = 7;
pub const kSMPTETimeType60Drop: ::libc::c_uint = 8;
pub const kSMPTETimeType5994Drop: ::libc::c_uint = 9;
pub const kSMPTETimeType50: ::libc::c_uint = 10;
pub const kSMPTETimeType2398: ::libc::c_uint = 11;
pub type Enum_Unnamed18 = ::libc::c_uint;
pub const kSMPTETimeValid: ::libc::c_uint = 1;
pub const kSMPTETimeRunning: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioTimeStamp {
    pub mSampleTime: Float64,
    pub mHostTime: UInt64,
    pub mRateScalar: Float64,
    pub mWordClockTime: UInt64,
    pub mSMPTETime: SMPTETime,
    pub mFlags: UInt32,
    pub mReserved: UInt32,
}
impl ::std::clone::Clone for Struct_AudioTimeStamp {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioTimeStamp {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioTimeStamp = Struct_AudioTimeStamp;
pub type Enum_Unnamed19 = ::libc::c_uint;
pub const kAudioTimeStampSampleTimeValid: ::libc::c_uint = 1;
pub const kAudioTimeStampHostTimeValid: ::libc::c_uint = 2;
pub const kAudioTimeStampRateScalarValid: ::libc::c_uint = 4;
pub const kAudioTimeStampWordClockTimeValid: ::libc::c_uint = 8;
pub const kAudioTimeStampSMPTETimeValid: ::libc::c_uint = 16;
pub type Enum_Unnamed20 = ::libc::c_uint;
pub const kAudioTimeStampSampleHostTimeValid: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioClassDescription {
    pub mType: OSType,
    pub mSubType: OSType,
    pub mManufacturer: OSType,
}
impl ::std::clone::Clone for Struct_AudioClassDescription {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioClassDescription {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioClassDescription = Struct_AudioClassDescription;
pub type AudioChannelLabel = UInt32;
pub type AudioChannelLayoutTag = UInt32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioChannelDescription {
    pub mChannelLabel: AudioChannelLabel,
    pub mChannelFlags: UInt32,
    pub mCoordinates: [Float32; 3usize],
}
impl ::std::clone::Clone for Struct_AudioChannelDescription {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioChannelDescription {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioChannelDescription = Struct_AudioChannelDescription;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioChannelLayout {
    pub mChannelLayoutTag: AudioChannelLayoutTag,
    pub mChannelBitmap: UInt32,
    pub mNumberChannelDescriptions: UInt32,
    pub mChannelDescriptions: [AudioChannelDescription; 1usize],
}
impl ::std::clone::Clone for Struct_AudioChannelLayout {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioChannelLayout {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioChannelLayout = Struct_AudioChannelLayout;
pub type Enum_Unnamed21 = ::libc::c_uint;
pub const kAudioChannelLabel_Unknown: ::libc::c_uint = ::std::u32::MAX;
pub const kAudioChannelLabel_Unused: ::libc::c_uint = 0;
pub const kAudioChannelLabel_UseCoordinates: ::libc::c_uint = 100;
pub const kAudioChannelLabel_Left: ::libc::c_uint = 1;
pub const kAudioChannelLabel_Right: ::libc::c_uint = 2;
pub const kAudioChannelLabel_Center: ::libc::c_uint = 3;
pub const kAudioChannelLabel_LFEScreen: ::libc::c_uint = 4;
pub const kAudioChannelLabel_LeftSurround: ::libc::c_uint = 5;
pub const kAudioChannelLabel_RightSurround: ::libc::c_uint = 6;
pub const kAudioChannelLabel_LeftCenter: ::libc::c_uint = 7;
pub const kAudioChannelLabel_RightCenter: ::libc::c_uint = 8;
pub const kAudioChannelLabel_CenterSurround: ::libc::c_uint = 9;
pub const kAudioChannelLabel_LeftSurroundDirect: ::libc::c_uint = 10;
pub const kAudioChannelLabel_RightSurroundDirect: ::libc::c_uint = 11;
pub const kAudioChannelLabel_TopCenterSurround: ::libc::c_uint = 12;
pub const kAudioChannelLabel_VerticalHeightLeft: ::libc::c_uint = 13;
pub const kAudioChannelLabel_VerticalHeightCenter: ::libc::c_uint = 14;
pub const kAudioChannelLabel_VerticalHeightRight: ::libc::c_uint = 15;
pub const kAudioChannelLabel_TopBackLeft: ::libc::c_uint = 16;
pub const kAudioChannelLabel_TopBackCenter: ::libc::c_uint = 17;
pub const kAudioChannelLabel_TopBackRight: ::libc::c_uint = 18;
pub const kAudioChannelLabel_RearSurroundLeft: ::libc::c_uint = 33;
pub const kAudioChannelLabel_RearSurroundRight: ::libc::c_uint = 34;
pub const kAudioChannelLabel_LeftWide: ::libc::c_uint = 35;
pub const kAudioChannelLabel_RightWide: ::libc::c_uint = 36;
pub const kAudioChannelLabel_LFE2: ::libc::c_uint = 37;
pub const kAudioChannelLabel_LeftTotal: ::libc::c_uint = 38;
pub const kAudioChannelLabel_RightTotal: ::libc::c_uint = 39;
pub const kAudioChannelLabel_HearingImpaired: ::libc::c_uint = 40;
pub const kAudioChannelLabel_Narration: ::libc::c_uint = 41;
pub const kAudioChannelLabel_Mono: ::libc::c_uint = 42;
pub const kAudioChannelLabel_DialogCentricMix: ::libc::c_uint = 43;
pub const kAudioChannelLabel_CenterSurroundDirect: ::libc::c_uint = 44;
pub const kAudioChannelLabel_Haptic: ::libc::c_uint = 45;
pub const kAudioChannelLabel_Ambisonic_W: ::libc::c_uint = 200;
pub const kAudioChannelLabel_Ambisonic_X: ::libc::c_uint = 201;
pub const kAudioChannelLabel_Ambisonic_Y: ::libc::c_uint = 202;
pub const kAudioChannelLabel_Ambisonic_Z: ::libc::c_uint = 203;
pub const kAudioChannelLabel_MS_Mid: ::libc::c_uint = 204;
pub const kAudioChannelLabel_MS_Side: ::libc::c_uint = 205;
pub const kAudioChannelLabel_XY_X: ::libc::c_uint = 206;
pub const kAudioChannelLabel_XY_Y: ::libc::c_uint = 207;
pub const kAudioChannelLabel_HeadphonesLeft: ::libc::c_uint = 301;
pub const kAudioChannelLabel_HeadphonesRight: ::libc::c_uint = 302;
pub const kAudioChannelLabel_ClickTrack: ::libc::c_uint = 304;
pub const kAudioChannelLabel_ForeignLanguage: ::libc::c_uint = 305;
pub const kAudioChannelLabel_Discrete: ::libc::c_uint = 400;
pub const kAudioChannelLabel_Discrete_0: ::libc::c_uint = 65536;
pub const kAudioChannelLabel_Discrete_1: ::libc::c_uint = 65537;
pub const kAudioChannelLabel_Discrete_2: ::libc::c_uint = 65538;
pub const kAudioChannelLabel_Discrete_3: ::libc::c_uint = 65539;
pub const kAudioChannelLabel_Discrete_4: ::libc::c_uint = 65540;
pub const kAudioChannelLabel_Discrete_5: ::libc::c_uint = 65541;
pub const kAudioChannelLabel_Discrete_6: ::libc::c_uint = 65542;
pub const kAudioChannelLabel_Discrete_7: ::libc::c_uint = 65543;
pub const kAudioChannelLabel_Discrete_8: ::libc::c_uint = 65544;
pub const kAudioChannelLabel_Discrete_9: ::libc::c_uint = 65545;
pub const kAudioChannelLabel_Discrete_10: ::libc::c_uint = 65546;
pub const kAudioChannelLabel_Discrete_11: ::libc::c_uint = 65547;
pub const kAudioChannelLabel_Discrete_12: ::libc::c_uint = 65548;
pub const kAudioChannelLabel_Discrete_13: ::libc::c_uint = 65549;
pub const kAudioChannelLabel_Discrete_14: ::libc::c_uint = 65550;
pub const kAudioChannelLabel_Discrete_15: ::libc::c_uint = 65551;
pub const kAudioChannelLabel_Discrete_65535: ::libc::c_uint = 131071;
pub type Enum_Unnamed22 = ::libc::c_uint;
pub const kAudioChannelBit_Left: ::libc::c_uint = 1;
pub const kAudioChannelBit_Right: ::libc::c_uint = 2;
pub const kAudioChannelBit_Center: ::libc::c_uint = 4;
pub const kAudioChannelBit_LFEScreen: ::libc::c_uint = 8;
pub const kAudioChannelBit_LeftSurround: ::libc::c_uint = 16;
pub const kAudioChannelBit_RightSurround: ::libc::c_uint = 32;
pub const kAudioChannelBit_LeftCenter: ::libc::c_uint = 64;
pub const kAudioChannelBit_RightCenter: ::libc::c_uint = 128;
pub const kAudioChannelBit_CenterSurround: ::libc::c_uint = 256;
pub const kAudioChannelBit_LeftSurroundDirect: ::libc::c_uint = 512;
pub const kAudioChannelBit_RightSurroundDirect: ::libc::c_uint = 1024;
pub const kAudioChannelBit_TopCenterSurround: ::libc::c_uint = 2048;
pub const kAudioChannelBit_VerticalHeightLeft: ::libc::c_uint = 4096;
pub const kAudioChannelBit_VerticalHeightCenter: ::libc::c_uint = 8192;
pub const kAudioChannelBit_VerticalHeightRight: ::libc::c_uint = 16384;
pub const kAudioChannelBit_TopBackLeft: ::libc::c_uint = 32768;
pub const kAudioChannelBit_TopBackCenter: ::libc::c_uint = 65536;
pub const kAudioChannelBit_TopBackRight: ::libc::c_uint = 131072;
pub type Enum_Unnamed23 = ::libc::c_uint;
pub const kAudioChannelFlags_AllOff: ::libc::c_uint = 0;
pub const kAudioChannelFlags_RectangularCoordinates: ::libc::c_uint = 1;
pub const kAudioChannelFlags_SphericalCoordinates: ::libc::c_uint = 2;
pub const kAudioChannelFlags_Meters: ::libc::c_uint = 4;
pub type Enum_Unnamed24 = ::libc::c_uint;
pub const kAudioChannelCoordinates_LeftRight: ::libc::c_uint = 0;
pub const kAudioChannelCoordinates_BackFront: ::libc::c_uint = 1;
pub const kAudioChannelCoordinates_DownUp: ::libc::c_uint = 2;
pub const kAudioChannelCoordinates_Azimuth: ::libc::c_uint = 0;
pub const kAudioChannelCoordinates_Elevation: ::libc::c_uint = 1;
pub const kAudioChannelCoordinates_Distance: ::libc::c_uint = 2;
pub type Enum_Unnamed25 = ::libc::c_uint;
pub const kAudioChannelLayoutTag_UseChannelDescriptions: ::libc::c_uint = 0;
pub const kAudioChannelLayoutTag_UseChannelBitmap: ::libc::c_uint = 65536;
pub const kAudioChannelLayoutTag_Mono: ::libc::c_uint = 6553601;
pub const kAudioChannelLayoutTag_Stereo: ::libc::c_uint = 6619138;
pub const kAudioChannelLayoutTag_StereoHeadphones: ::libc::c_uint = 6684674;
pub const kAudioChannelLayoutTag_MatrixStereo: ::libc::c_uint = 6750210;
pub const kAudioChannelLayoutTag_MidSide: ::libc::c_uint = 6815746;
pub const kAudioChannelLayoutTag_XY: ::libc::c_uint = 6881282;
pub const kAudioChannelLayoutTag_Binaural: ::libc::c_uint = 6946818;
pub const kAudioChannelLayoutTag_Ambisonic_B_Format: ::libc::c_uint = 7012356;
pub const kAudioChannelLayoutTag_Quadraphonic: ::libc::c_uint = 7077892;
pub const kAudioChannelLayoutTag_Pentagonal: ::libc::c_uint = 7143429;
pub const kAudioChannelLayoutTag_Hexagonal: ::libc::c_uint = 7208966;
pub const kAudioChannelLayoutTag_Octagonal: ::libc::c_uint = 7274504;
pub const kAudioChannelLayoutTag_Cube: ::libc::c_uint = 7340040;
pub const kAudioChannelLayoutTag_MPEG_1_0: ::libc::c_uint = 6553601;
pub const kAudioChannelLayoutTag_MPEG_2_0: ::libc::c_uint = 6619138;
pub const kAudioChannelLayoutTag_MPEG_3_0_A: ::libc::c_uint = 7405571;
pub const kAudioChannelLayoutTag_MPEG_3_0_B: ::libc::c_uint = 7471107;
pub const kAudioChannelLayoutTag_MPEG_4_0_A: ::libc::c_uint = 7536644;
pub const kAudioChannelLayoutTag_MPEG_4_0_B: ::libc::c_uint = 7602180;
pub const kAudioChannelLayoutTag_MPEG_5_0_A: ::libc::c_uint = 7667717;
pub const kAudioChannelLayoutTag_MPEG_5_0_B: ::libc::c_uint = 7733253;
pub const kAudioChannelLayoutTag_MPEG_5_0_C: ::libc::c_uint = 7798789;
pub const kAudioChannelLayoutTag_MPEG_5_0_D: ::libc::c_uint = 7864325;
pub const kAudioChannelLayoutTag_MPEG_5_1_A: ::libc::c_uint = 7929862;
pub const kAudioChannelLayoutTag_MPEG_5_1_B: ::libc::c_uint = 7995398;
pub const kAudioChannelLayoutTag_MPEG_5_1_C: ::libc::c_uint = 8060934;
pub const kAudioChannelLayoutTag_MPEG_5_1_D: ::libc::c_uint = 8126470;
pub const kAudioChannelLayoutTag_MPEG_6_1_A: ::libc::c_uint = 8192007;
pub const kAudioChannelLayoutTag_MPEG_7_1_A: ::libc::c_uint = 8257544;
pub const kAudioChannelLayoutTag_MPEG_7_1_B: ::libc::c_uint = 8323080;
pub const kAudioChannelLayoutTag_MPEG_7_1_C: ::libc::c_uint = 8388616;
pub const kAudioChannelLayoutTag_Emagic_Default_7_1: ::libc::c_uint = 8454152;
pub const kAudioChannelLayoutTag_SMPTE_DTV: ::libc::c_uint = 8519688;
pub const kAudioChannelLayoutTag_ITU_1_0: ::libc::c_uint = 6553601;
pub const kAudioChannelLayoutTag_ITU_2_0: ::libc::c_uint = 6619138;
pub const kAudioChannelLayoutTag_ITU_2_1: ::libc::c_uint = 8585219;
pub const kAudioChannelLayoutTag_ITU_2_2: ::libc::c_uint = 8650756;
pub const kAudioChannelLayoutTag_ITU_3_0: ::libc::c_uint = 7405571;
pub const kAudioChannelLayoutTag_ITU_3_1: ::libc::c_uint = 7536644;
pub const kAudioChannelLayoutTag_ITU_3_2: ::libc::c_uint = 7667717;
pub const kAudioChannelLayoutTag_ITU_3_2_1: ::libc::c_uint = 7929862;
pub const kAudioChannelLayoutTag_ITU_3_4_1: ::libc::c_uint = 8388616;
pub const kAudioChannelLayoutTag_DVD_0: ::libc::c_uint = 6553601;
pub const kAudioChannelLayoutTag_DVD_1: ::libc::c_uint = 6619138;
pub const kAudioChannelLayoutTag_DVD_2: ::libc::c_uint = 8585219;
pub const kAudioChannelLayoutTag_DVD_3: ::libc::c_uint = 8650756;
pub const kAudioChannelLayoutTag_DVD_4: ::libc::c_uint = 8716291;
pub const kAudioChannelLayoutTag_DVD_5: ::libc::c_uint = 8781828;
pub const kAudioChannelLayoutTag_DVD_6: ::libc::c_uint = 8847365;
pub const kAudioChannelLayoutTag_DVD_7: ::libc::c_uint = 7405571;
pub const kAudioChannelLayoutTag_DVD_8: ::libc::c_uint = 7536644;
pub const kAudioChannelLayoutTag_DVD_9: ::libc::c_uint = 7667717;
pub const kAudioChannelLayoutTag_DVD_10: ::libc::c_uint = 8912900;
pub const kAudioChannelLayoutTag_DVD_11: ::libc::c_uint = 8978437;
pub const kAudioChannelLayoutTag_DVD_12: ::libc::c_uint = 7929862;
pub const kAudioChannelLayoutTag_DVD_13: ::libc::c_uint = 7536644;
pub const kAudioChannelLayoutTag_DVD_14: ::libc::c_uint = 7667717;
pub const kAudioChannelLayoutTag_DVD_15: ::libc::c_uint = 8912900;
pub const kAudioChannelLayoutTag_DVD_16: ::libc::c_uint = 8978437;
pub const kAudioChannelLayoutTag_DVD_17: ::libc::c_uint = 7929862;
pub const kAudioChannelLayoutTag_DVD_18: ::libc::c_uint = 9043973;
pub const kAudioChannelLayoutTag_DVD_19: ::libc::c_uint = 7733253;
pub const kAudioChannelLayoutTag_DVD_20: ::libc::c_uint = 7995398;
pub const kAudioChannelLayoutTag_AudioUnit_4: ::libc::c_uint = 7077892;
pub const kAudioChannelLayoutTag_AudioUnit_5: ::libc::c_uint = 7143429;
pub const kAudioChannelLayoutTag_AudioUnit_6: ::libc::c_uint = 7208966;
pub const kAudioChannelLayoutTag_AudioUnit_8: ::libc::c_uint = 7274504;
pub const kAudioChannelLayoutTag_AudioUnit_5_0: ::libc::c_uint = 7733253;
pub const kAudioChannelLayoutTag_AudioUnit_6_0: ::libc::c_uint = 9109510;
pub const kAudioChannelLayoutTag_AudioUnit_7_0: ::libc::c_uint = 9175047;
pub const kAudioChannelLayoutTag_AudioUnit_7_0_Front: ::libc::c_uint =
    9699335;
pub const kAudioChannelLayoutTag_AudioUnit_5_1: ::libc::c_uint = 7929862;
pub const kAudioChannelLayoutTag_AudioUnit_6_1: ::libc::c_uint = 8192007;
pub const kAudioChannelLayoutTag_AudioUnit_7_1: ::libc::c_uint = 8388616;
pub const kAudioChannelLayoutTag_AudioUnit_7_1_Front: ::libc::c_uint =
    8257544;
pub const kAudioChannelLayoutTag_AAC_3_0: ::libc::c_uint = 7471107;
pub const kAudioChannelLayoutTag_AAC_Quadraphonic: ::libc::c_uint = 7077892;
pub const kAudioChannelLayoutTag_AAC_4_0: ::libc::c_uint = 7602180;
pub const kAudioChannelLayoutTag_AAC_5_0: ::libc::c_uint = 7864325;
pub const kAudioChannelLayoutTag_AAC_5_1: ::libc::c_uint = 8126470;
pub const kAudioChannelLayoutTag_AAC_6_0: ::libc::c_uint = 9240582;
pub const kAudioChannelLayoutTag_AAC_6_1: ::libc::c_uint = 9306119;
pub const kAudioChannelLayoutTag_AAC_7_0: ::libc::c_uint = 9371655;
pub const kAudioChannelLayoutTag_AAC_7_1: ::libc::c_uint = 8323080;
pub const kAudioChannelLayoutTag_AAC_7_1_B: ::libc::c_uint = 11993096;
pub const kAudioChannelLayoutTag_AAC_7_1_C: ::libc::c_uint = 12058632;
pub const kAudioChannelLayoutTag_AAC_Octagonal: ::libc::c_uint = 9437192;
pub const kAudioChannelLayoutTag_TMH_10_2_std: ::libc::c_uint = 9502736;
pub const kAudioChannelLayoutTag_TMH_10_2_full: ::libc::c_uint = 9568277;
pub const kAudioChannelLayoutTag_AC3_1_0_1: ::libc::c_uint = 9764866;
pub const kAudioChannelLayoutTag_AC3_3_0: ::libc::c_uint = 9830403;
pub const kAudioChannelLayoutTag_AC3_3_1: ::libc::c_uint = 9895940;
pub const kAudioChannelLayoutTag_AC3_3_0_1: ::libc::c_uint = 9961476;
pub const kAudioChannelLayoutTag_AC3_2_1_1: ::libc::c_uint = 10027012;
pub const kAudioChannelLayoutTag_AC3_3_1_1: ::libc::c_uint = 10092549;
pub const kAudioChannelLayoutTag_EAC_6_0_A: ::libc::c_uint = 10158086;
pub const kAudioChannelLayoutTag_EAC_7_0_A: ::libc::c_uint = 10223623;
pub const kAudioChannelLayoutTag_EAC3_6_1_A: ::libc::c_uint = 10289159;
pub const kAudioChannelLayoutTag_EAC3_6_1_B: ::libc::c_uint = 10354695;
pub const kAudioChannelLayoutTag_EAC3_6_1_C: ::libc::c_uint = 10420231;
pub const kAudioChannelLayoutTag_EAC3_7_1_A: ::libc::c_uint = 10485768;
pub const kAudioChannelLayoutTag_EAC3_7_1_B: ::libc::c_uint = 10551304;
pub const kAudioChannelLayoutTag_EAC3_7_1_C: ::libc::c_uint = 10616840;
pub const kAudioChannelLayoutTag_EAC3_7_1_D: ::libc::c_uint = 10682376;
pub const kAudioChannelLayoutTag_EAC3_7_1_E: ::libc::c_uint = 10747912;
pub const kAudioChannelLayoutTag_EAC3_7_1_F: ::libc::c_uint = 10813448;
pub const kAudioChannelLayoutTag_EAC3_7_1_G: ::libc::c_uint = 10878984;
pub const kAudioChannelLayoutTag_EAC3_7_1_H: ::libc::c_uint = 10944520;
pub const kAudioChannelLayoutTag_DTS_3_1: ::libc::c_uint = 11010052;
pub const kAudioChannelLayoutTag_DTS_4_1: ::libc::c_uint = 11075589;
pub const kAudioChannelLayoutTag_DTS_6_0_A: ::libc::c_uint = 11141126;
pub const kAudioChannelLayoutTag_DTS_6_0_B: ::libc::c_uint = 11206662;
pub const kAudioChannelLayoutTag_DTS_6_0_C: ::libc::c_uint = 11272198;
pub const kAudioChannelLayoutTag_DTS_6_1_A: ::libc::c_uint = 11337735;
pub const kAudioChannelLayoutTag_DTS_6_1_B: ::libc::c_uint = 11403271;
pub const kAudioChannelLayoutTag_DTS_6_1_C: ::libc::c_uint = 11468807;
pub const kAudioChannelLayoutTag_DTS_7_0: ::libc::c_uint = 11534343;
pub const kAudioChannelLayoutTag_DTS_7_1: ::libc::c_uint = 11599880;
pub const kAudioChannelLayoutTag_DTS_8_0_A: ::libc::c_uint = 11665416;
pub const kAudioChannelLayoutTag_DTS_8_0_B: ::libc::c_uint = 11730952;
pub const kAudioChannelLayoutTag_DTS_8_1_A: ::libc::c_uint = 11796489;
pub const kAudioChannelLayoutTag_DTS_8_1_B: ::libc::c_uint = 11862025;
pub const kAudioChannelLayoutTag_DTS_6_1_D: ::libc::c_uint = 11927559;
pub const kAudioChannelLayoutTag_DiscreteInOrder: ::libc::c_uint = 9633792;
pub const kAudioChannelLayoutTag_Unknown: ::libc::c_uint = ::std::u32::MAX - 65536;
pub type Enum_Unnamed26 = ::libc::c_uint;
pub const kMPEG4Object_AAC_Main: ::libc::c_uint = 1;
pub const kMPEG4Object_AAC_LC: ::libc::c_uint = 2;
pub const kMPEG4Object_AAC_SSR: ::libc::c_uint = 3;
pub const kMPEG4Object_AAC_LTP: ::libc::c_uint = 4;
pub const kMPEG4Object_AAC_SBR: ::libc::c_uint = 5;
pub const kMPEG4Object_AAC_Scalable: ::libc::c_uint = 6;
pub const kMPEG4Object_TwinVQ: ::libc::c_uint = 7;
pub const kMPEG4Object_CELP: ::libc::c_uint = 8;
pub const kMPEG4Object_HVXC: ::libc::c_uint = 9;
pub type va_list = __darwin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __darwin_nl_item = ::libc::c_int;
pub type __darwin_wctrans_t = ::libc::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed27 {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed27 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed27 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _RuneEntry = Struct_Unnamed27;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed28 {
    pub __nranges: ::libc::c_int,
    pub __ranges: *mut _RuneEntry,
}
impl ::std::clone::Clone for Struct_Unnamed28 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed28 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _RuneRange = Struct_Unnamed28;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed29 {
    pub __name: [::libc::c_char; 14usize],
    pub __mask: __uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed29 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed29 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _RuneCharClass = Struct_Unnamed29;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed30 {
    pub __magic: [::libc::c_char; 8usize],
    pub __encoding: [::libc::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<extern "C" fn(arg1:
                                                            *const ::libc::c_char,
                                                        arg2: __darwin_size_t,
                                                        arg3:
                                                            *mut *const ::libc::c_char)
                                              -> __darwin_rune_t>,
    pub __sputrune: ::std::option::Option<extern "C" fn(arg1: __darwin_rune_t,
                                                        arg2:
                                                            *mut ::libc::c_char,
                                                        arg3: __darwin_size_t,
                                                        arg4:
                                                            *mut *mut ::libc::c_char)
                                              -> ::libc::c_int>,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::libc::c_void,
    pub __variable_len: ::libc::c_int,
    pub __ncharclasses: ::libc::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
impl ::std::clone::Clone for Struct_Unnamed30 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed30 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _RuneLocale = Struct_Unnamed30;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_lconv {
    pub decimal_point: *mut ::libc::c_char,
    pub thousands_sep: *mut ::libc::c_char,
    pub grouping: *mut ::libc::c_char,
    pub int_curr_symbol: *mut ::libc::c_char,
    pub currency_symbol: *mut ::libc::c_char,
    pub mon_decimal_point: *mut ::libc::c_char,
    pub mon_thousands_sep: *mut ::libc::c_char,
    pub mon_grouping: *mut ::libc::c_char,
    pub positive_sign: *mut ::libc::c_char,
    pub negative_sign: *mut ::libc::c_char,
    pub int_frac_digits: ::libc::c_char,
    pub frac_digits: ::libc::c_char,
    pub p_cs_precedes: ::libc::c_char,
    pub p_sep_by_space: ::libc::c_char,
    pub n_cs_precedes: ::libc::c_char,
    pub n_sep_by_space: ::libc::c_char,
    pub p_sign_posn: ::libc::c_char,
    pub n_sign_posn: ::libc::c_char,
    pub int_p_cs_precedes: ::libc::c_char,
    pub int_n_cs_precedes: ::libc::c_char,
    pub int_p_sep_by_space: ::libc::c_char,
    pub int_n_sep_by_space: ::libc::c_char,
    pub int_p_sign_posn: ::libc::c_char,
    pub int_n_sign_posn: ::libc::c_char,
}
impl ::std::clone::Clone for Struct_lconv {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_lconv {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type float_t = ::libc::c_float;
pub type double_t = ::libc::c_double;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___float2 {
    pub __sinval: ::libc::c_float,
    pub __cosval: ::libc::c_float,
}
impl ::std::clone::Clone for Struct___float2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___float2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___double2 {
    pub __sinval: ::libc::c_double,
    pub __cosval: ::libc::c_double,
}
impl ::std::clone::Clone for Struct___double2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___double2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_exception {
    pub _type: ::libc::c_int,
    pub name: *mut ::libc::c_char,
    pub arg1: ::libc::c_double,
    pub arg2: ::libc::c_double,
    pub retval: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_exception {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_exception {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type jmp_buf = [::libc::c_int; 37usize];
pub type sigjmp_buf = [::libc::c_int; 38usize];
pub type sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_thread_state {
    pub __eax: ::libc::c_uint,
    pub __ebx: ::libc::c_uint,
    pub __ecx: ::libc::c_uint,
    pub __edx: ::libc::c_uint,
    pub __edi: ::libc::c_uint,
    pub __esi: ::libc::c_uint,
    pub __ebp: ::libc::c_uint,
    pub __esp: ::libc::c_uint,
    pub __ss: ::libc::c_uint,
    pub __eflags: ::libc::c_uint,
    pub __eip: ::libc::c_uint,
    pub __cs: ::libc::c_uint,
    pub __ds: ::libc::c_uint,
    pub __es: ::libc::c_uint,
    pub __fs: ::libc::c_uint,
    pub __gs: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct___darwin_i386_thread_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_thread_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_fp_control {
    pub _bindgen_bitfield_1_: ::libc::c_ushort,
}
impl ::std::clone::Clone for Struct___darwin_fp_control {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_fp_control {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_control_t = Struct___darwin_fp_control;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_fp_status {
    pub _bindgen_bitfield_1_: ::libc::c_ushort,
}
impl ::std::clone::Clone for Struct___darwin_fp_status {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_fp_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_status_t = Struct___darwin_fp_status;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mmst_reg {
    pub __mmst_reg: [::libc::c_char; 10usize],
    pub __mmst_rsrv: [::libc::c_char; 6usize],
}
impl ::std::clone::Clone for Struct___darwin_mmst_reg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mmst_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_xmm_reg {
    pub __xmm_reg: [::libc::c_char; 16usize],
}
impl ::std::clone::Clone for Struct___darwin_xmm_reg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_xmm_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_float_state {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 224usize],
    pub __fpu_reserved1: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___darwin_i386_float_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_float_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_avx_state {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 224usize],
    pub __fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char; 64usize],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
}
impl ::std::clone::Clone for Struct___darwin_i386_avx_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_avx_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
impl ::std::clone::Clone for Struct___darwin_i386_exception_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_exception_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_debug_state32 {
    pub __dr0: ::libc::c_uint,
    pub __dr1: ::libc::c_uint,
    pub __dr2: ::libc::c_uint,
    pub __dr3: ::libc::c_uint,
    pub __dr4: ::libc::c_uint,
    pub __dr5: ::libc::c_uint,
    pub __dr6: ::libc::c_uint,
    pub __dr7: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct___darwin_x86_debug_state32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_debug_state32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_thread_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_thread_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_float_state64 {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 96usize],
    pub __fpu_reserved1: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___darwin_x86_float_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_float_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_avx_state64 {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 96usize],
    pub __fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char; 64usize],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
    pub __fpu_ymmh8: Struct___darwin_xmm_reg,
    pub __fpu_ymmh9: Struct___darwin_xmm_reg,
    pub __fpu_ymmh10: Struct___darwin_xmm_reg,
    pub __fpu_ymmh11: Struct___darwin_xmm_reg,
    pub __fpu_ymmh12: Struct___darwin_xmm_reg,
    pub __fpu_ymmh13: Struct___darwin_xmm_reg,
    pub __fpu_ymmh14: Struct___darwin_xmm_reg,
    pub __fpu_ymmh15: Struct___darwin_xmm_reg,
}
impl ::std::clone::Clone for Struct___darwin_x86_avx_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_avx_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_exception_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_exception_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_debug_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_debug_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext32 {
    pub __es: Struct___darwin_i386_exception_state,
    pub __ss: Struct___darwin_i386_thread_state,
    pub __fs: Struct___darwin_i386_float_state,
}
impl ::std::clone::Clone for Struct___darwin_mcontext32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext_avx32 {
    pub __es: Struct___darwin_i386_exception_state,
    pub __ss: Struct___darwin_i386_thread_state,
    pub __fs: Struct___darwin_i386_avx_state,
}
impl ::std::clone::Clone for Struct___darwin_mcontext_avx32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext_avx32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext64 {
    pub __es: Struct___darwin_x86_exception_state64,
    pub __ss: Struct___darwin_x86_thread_state64,
    pub __fs: Struct___darwin_x86_float_state64,
}
impl ::std::clone::Clone for Struct___darwin_mcontext64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext_avx64 {
    pub __es: Struct___darwin_x86_exception_state64,
    pub __ss: Struct___darwin_x86_thread_state64,
    pub __fs: Struct___darwin_x86_avx_state64,
}
impl ::std::clone::Clone for Struct___darwin_mcontext_avx64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext_avx64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mcontext_t = *mut Struct___darwin_mcontext64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_sigaltstack {
    pub ss_sp: *mut ::libc::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___darwin_sigaltstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_sigaltstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type stack_t = Struct___darwin_sigaltstack;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_ucontext {
    pub uc_onstack: ::libc::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: Struct___darwin_sigaltstack,
    pub uc_link: *mut Struct___darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut Struct___darwin_mcontext64,
}
impl ::std::clone::Clone for Struct___darwin_ucontext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_ucontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ucontext_t = Struct___darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
#[repr(C)]
#[derive(Copy)]
pub struct Union_sigval {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_sigval {
    pub unsafe fn sival_int(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::libc::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_sigval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_sigval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigevent {
    pub sigev_notify: ::libc::c_int,
    pub sigev_signo: ::libc::c_int,
    pub sigev_value: Union_sigval,
    pub sigev_notify_function: ::std::option::Option<extern "C" fn(arg1:
                                                                       Union_sigval)
                                                         -> ()>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
impl ::std::clone::Clone for Struct_sigevent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigevent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___siginfo {
    pub si_signo: ::libc::c_int,
    pub si_errno: ::libc::c_int,
    pub si_code: ::libc::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::libc::c_int,
    pub si_addr: *mut ::libc::c_void,
    pub si_value: Union_sigval,
    pub si_band: ::libc::c_long,
    pub __pad: [::libc::c_ulong; 7usize],
}
impl ::std::clone::Clone for Struct___siginfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___siginfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type siginfo_t = Struct___siginfo;
#[repr(C)]
#[derive(Copy)]
pub struct Union___sigaction_u {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union___sigaction_u {
    pub unsafe fn __sa_handler(&mut self)
     -> *mut ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __sa_sigaction(&mut self)
     ->
         *mut ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                                  arg2: *mut Struct___siginfo,
                                                  arg3: *mut ::libc::c_void)
                                        -> ()> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___sigaction_u {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___sigaction_u {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_tramp: ::std::option::Option<extern "C" fn(arg1:
                                                          *mut ::libc::c_void,
                                                      arg2: ::libc::c_int,
                                                      arg3: ::libc::c_int,
                                                      arg4: *mut siginfo_t,
                                                      arg5:
                                                          *mut ::libc::c_void)
                                            -> ()>,
    pub sa_mask: sigset_t,
    pub sa_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sig_t =
    ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigvec {
    pub sv_handler: ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)
                                              -> ()>,
    pub sv_mask: ::libc::c_int,
    pub sv_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigvec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigvec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigstack {
    pub ss_sp: *mut ::libc::c_char,
    pub ss_onstack: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ptrdiff_t = ::libc::c_long;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sbuf {
    pub _base: *mut ::libc::c_uchar,
    pub _size: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___sbuf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sbuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___sFILEX { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sFILE {
    pub _p: *mut ::libc::c_uchar,
    pub _r: ::libc::c_int,
    pub _w: ::libc::c_int,
    pub _flags: ::libc::c_short,
    pub _file: ::libc::c_short,
    pub _bf: Struct___sbuf,
    pub _lbfsize: ::libc::c_int,
    pub _cookie: *mut ::libc::c_void,
    pub _close: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)
                                          -> ::libc::c_int>,
    pub _read: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                   arg2: *mut ::libc::c_char,
                                                   arg3: ::libc::c_int)
                                         -> ::libc::c_int>,
    pub _seek: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                   arg2: fpos_t,
                                                   arg3: ::libc::c_int)
                                         -> fpos_t>,
    pub _write: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                    arg2:
                                                        *const ::libc::c_char,
                                                    arg3: ::libc::c_int)
                                          -> ::libc::c_int>,
    pub _ub: Struct___sbuf,
    pub _extra: *mut Struct___sFILEX,
    pub _ur: ::libc::c_int,
    pub _ubuf: [::libc::c_uchar; 3usize],
    pub _nbuf: [::libc::c_uchar; 1usize],
    pub _lb: Struct___sbuf,
    pub _blksize: ::libc::c_int,
    pub _offset: fpos_t,
}
impl ::std::clone::Clone for Struct___sFILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sFILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FILE = Struct___sFILE;
pub type Enum_Unnamed31 = ::libc::c_uint;
pub const P_ALL: ::libc::c_uint = 0;
pub const P_PID: ::libc::c_uint = 1;
pub const P_PGID: ::libc::c_uint = 2;
pub type idtype_t = Enum_Unnamed31;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage {
    pub ru_utime: Struct_timeval,
    pub ru_stime: Struct_timeval,
    pub ru_maxrss: ::libc::c_long,
    pub ru_ixrss: ::libc::c_long,
    pub ru_idrss: ::libc::c_long,
    pub ru_isrss: ::libc::c_long,
    pub ru_minflt: ::libc::c_long,
    pub ru_majflt: ::libc::c_long,
    pub ru_nswap: ::libc::c_long,
    pub ru_inblock: ::libc::c_long,
    pub ru_oublock: ::libc::c_long,
    pub ru_msgsnd: ::libc::c_long,
    pub ru_msgrcv: ::libc::c_long,
    pub ru_nsignals: ::libc::c_long,
    pub ru_nvcsw: ::libc::c_long,
    pub ru_nivcsw: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_rusage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rusage_info_t = *mut ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v0 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v0 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v0 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v1 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v2 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
    pub ri_diskio_bytesread: uint64_t,
    pub ri_diskio_byteswritten: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v3 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
    pub ri_diskio_bytesread: uint64_t,
    pub ri_diskio_byteswritten: uint64_t,
    pub ri_cpu_time_qos_default: uint64_t,
    pub ri_cpu_time_qos_maintenance: uint64_t,
    pub ri_cpu_time_qos_background: uint64_t,
    pub ri_cpu_time_qos_utility: uint64_t,
    pub ri_cpu_time_qos_legacy: uint64_t,
    pub ri_cpu_time_qos_user_initiated: uint64_t,
    pub ri_cpu_time_qos_user_interactive: uint64_t,
    pub ri_billed_system_time: uint64_t,
    pub ri_serviced_system_time: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rusage_info_current = Struct_rusage_info_v3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
impl ::std::clone::Clone for Struct_rlimit {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rlimit {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_proc_rlimit_control_wakeupmon {
    pub wm_flags: uint32_t,
    pub wm_rate: int32_t,
}
impl ::std::clone::Clone for Struct_proc_rlimit_control_wakeupmon {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_proc_rlimit_control_wakeupmon {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn w_T(&mut self) -> *mut Struct_Unnamed32 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn w_S(&mut self) -> *mut Struct_Unnamed33 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_wait {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed32 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed33 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed33 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed33 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed34 {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed34 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed34 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed34;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed35 {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_Unnamed35 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed35 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed35;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed36 {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
impl ::std::clone::Clone for Struct_Unnamed36 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed36 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed36;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
    pub tm_gmtoff: ::libc::c_long,
    pub tm_zone: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_tm {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed37 {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
impl ::std::clone::Clone for Struct_Unnamed37 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed37 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type imaxdiv_t = Struct_Unnamed37;
pub type CFArrayRetainCallBack =
    ::std::option::Option<extern "C" fn(allocator: CFAllocatorRef,
                                        value: *const ::libc::c_void)
                              -> *const ::libc::c_void>;
pub type CFArrayReleaseCallBack =
    ::std::option::Option<extern "C" fn(allocator: CFAllocatorRef,
                                        value: *const ::libc::c_void) -> ()>;
pub type CFArrayCopyDescriptionCallBack =
    ::std::option::Option<extern "C" fn(value: *const ::libc::c_void)
                              -> CFStringRef>;
pub type CFArrayEqualCallBack =
    ::std::option::Option<extern "C" fn(value1: *const ::libc::c_void,
                                        value2: *const ::libc::c_void)
                              -> Boolean>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed38 {
    pub version: CFIndex,
    pub retain: CFArrayRetainCallBack,
    pub release: CFArrayReleaseCallBack,
    pub copyDescription: CFArrayCopyDescriptionCallBack,
    pub equal: CFArrayEqualCallBack,
}
impl ::std::clone::Clone for Struct_Unnamed38 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed38 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFArrayCallBacks = Struct_Unnamed38;
pub type CFArrayApplierFunction =
    ::std::option::Option<extern "C" fn(value: *const ::libc::c_void,
                                        context: *mut ::libc::c_void) -> ()>;
pub enum Struct___CFArray { }
pub type CFArrayRef = *const Struct___CFArray;
pub type CFMutableArrayRef = *mut Struct___CFArray;
pub type CFBagRetainCallBack =
    ::std::option::Option<extern "C" fn(allocator: CFAllocatorRef,
                                        value: *const ::libc::c_void)
                              -> *const ::libc::c_void>;
pub type CFBagReleaseCallBack =
    ::std::option::Option<extern "C" fn(allocator: CFAllocatorRef,
                                        value: *const ::libc::c_void) -> ()>;
pub type CFBagCopyDescriptionCallBack =
    ::std::option::Option<extern "C" fn(value: *const ::libc::c_void)
                              -> CFStringRef>;
pub type CFBagEqualCallBack =
    ::std::option::Option<extern "C" fn(value1: *const ::libc::c_void,
                                        value2: *const ::libc::c_void)
                              -> Boolean>;
pub type CFBagHashCallBack =
    ::std::option::Option<extern "C" fn(value: *const ::libc::c_void)
                              -> CFHashCode>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed39 {
    pub version: CFIndex,
    pub retain: CFBagRetainCallBack,
    pub release: CFBagReleaseCallBack,
    pub copyDescription: CFBagCopyDescriptionCallBack,
    pub equal: CFBagEqualCallBack,
    pub hash: CFBagHashCallBack,
}
impl ::std::clone::Clone for Struct_Unnamed39 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed39 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFBagCallBacks = Struct_Unnamed39;
pub type CFBagApplierFunction =
    ::std::option::Option<extern "C" fn(value: *const ::libc::c_void,
                                        context: *mut ::libc::c_void) -> ()>;
pub enum Struct___CFBag { }
pub type CFBagRef = *const Struct___CFBag;
pub type CFMutableBagRef = *mut Struct___CFBag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed40 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: ::std::option::Option<extern "C" fn(info:
                                                        *const ::libc::c_void)
                                          -> *const ::libc::c_void>,
    pub release: ::std::option::Option<extern "C" fn(info:
                                                         *const ::libc::c_void)
                                           -> ()>,
    pub copyDescription: ::std::option::Option<extern "C" fn(info:
                                                                 *const ::libc::c_void)
                                                   -> CFStringRef>,
}
impl ::std::clone::Clone for Struct_Unnamed40 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed40 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFBinaryHeapCompareContext = Struct_Unnamed40;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed41 {
    pub version: CFIndex,
    pub retain: ::std::option::Option<extern "C" fn(allocator: CFAllocatorRef,
                                                    ptr:
                                                        *const ::libc::c_void)
                                          -> *const ::libc::c_void>,
    pub release: ::std::option::Option<extern "C" fn(allocator:
                                                         CFAllocatorRef,
                                                     ptr:
                                                         *const ::libc::c_void)
                                           -> ()>,
    pub copyDescription: ::std::option::Option<extern "C" fn(ptr:
                                                                 *const ::libc::c_void)
                                                   -> CFStringRef>,
    pub compare: ::std::option::Option<extern "C" fn(ptr1:
                                                         *const ::libc::c_void,
                                                     ptr2:
                                                         *const ::libc::c_void,
                                                     context:
                                                         *mut ::libc::c_void)
                                           -> CFComparisonResult>,
}
impl ::std::clone::Clone for Struct_Unnamed41 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed41 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFBinaryHeapCallBacks = Struct_Unnamed41;
pub type CFBinaryHeapApplierFunction =
    ::std::option::Option<extern "C" fn(val: *const ::libc::c_void,
                                        context: *mut ::libc::c_void) -> ()>;
pub enum Struct___CFBinaryHeap { }
pub type CFBinaryHeapRef = *mut Struct___CFBinaryHeap;
pub type CFBit = UInt32;
pub enum Struct___CFBitVector { }
pub type CFBitVectorRef = *const Struct___CFBitVector;
pub type CFMutableBitVectorRef = *mut Struct___CFBitVector;
pub type Enum_Unnamed42 = ::libc::c_uint;
pub const OSUnknownByteOrder: ::libc::c_uint = 0;
pub const OSLittleEndian: ::libc::c_uint = 1;
pub const OSBigEndian: ::libc::c_uint = 2;
pub type Enum___CFByteOrder = ::libc::c_uint;
pub const CFByteOrderUnknown: ::libc::c_uint = 0;
pub const CFByteOrderLittleEndian: ::libc::c_uint = 1;
pub const CFByteOrderBigEndian: ::libc::c_uint = 2;
pub type CFByteOrder = CFIndex;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed43 {
    pub v: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed43 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed43 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFSwappedFloat32 = Struct_Unnamed43;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed44 {
    pub v: uint64_t,
}
impl ::std::clone::Clone for Struct_Unnamed44 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed44 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFSwappedFloat64 = Struct_Unnamed44;
pub type CFDictionaryRetainCallBack =
    ::std::option::Option<extern "C" fn(allocator: CFAllocatorRef,
                                        value: *const ::libc::c_void)
                              -> *const ::libc::c_void>;
pub type CFDictionaryReleaseCallBack =
    ::std::option::Option<extern "C" fn(allocator: CFAllocatorRef,
                                        value: *const ::libc::c_void) -> ()>;
pub type CFDictionaryCopyDescriptionCallBack =
    ::std::option::Option<extern "C" fn(value: *const ::libc::c_void)
                              -> CFStringRef>;
pub type CFDictionaryEqualCallBack =
    ::std::option::Option<extern "C" fn(value1: *const ::libc::c_void,
                                        value2: *const ::libc::c_void)
                              -> Boolean>;
pub type CFDictionaryHashCallBack =
    ::std::option::Option<extern "C" fn(value: *const ::libc::c_void)
                              -> CFHashCode>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed45 {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
    pub hash: CFDictionaryHashCallBack,
}
impl ::std::clone::Clone for Struct_Unnamed45 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed45 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFDictionaryKeyCallBacks = Struct_Unnamed45;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed46 {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
}
impl ::std::clone::Clone for Struct_Unnamed46 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed46 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFDictionaryValueCallBacks = Struct_Unnamed46;
pub type CFDictionaryApplierFunction =
    ::std::option::Option<extern "C" fn(key: *const ::libc::c_void,
                                        value: *const ::libc::c_void,
                                        context: *mut ::libc::c_void) -> ()>;
pub enum Struct___CFDictionary { }
pub type CFDictionaryRef = *const Struct___CFDictionary;
pub type CFMutableDictionaryRef = *mut Struct___CFDictionary;
pub enum Struct___CFLocale { }
pub type CFLocaleRef = *const Struct___CFLocale;
pub type CFLocaleLanguageDirection = CFIndex;
pub type Enum_Unnamed47 = ::libc::c_uint;
pub const kCFLocaleLanguageDirectionUnknown: ::libc::c_uint = 0;
pub const kCFLocaleLanguageDirectionLeftToRight: ::libc::c_uint = 1;
pub const kCFLocaleLanguageDirectionRightToLeft: ::libc::c_uint = 2;
pub const kCFLocaleLanguageDirectionTopToBottom: ::libc::c_uint = 3;
pub const kCFLocaleLanguageDirectionBottomToTop: ::libc::c_uint = 4;
pub type CFTimeInterval = ::libc::c_double;
pub type CFAbsoluteTime = CFTimeInterval;
pub enum Struct___CFDate { }
pub type CFDateRef = *const Struct___CFDate;
pub enum Struct___CFTimeZone { }
pub type CFTimeZoneRef = *const Struct___CFTimeZone;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed48 {
    pub year: SInt32,
    pub month: SInt8,
    pub day: SInt8,
    pub hour: SInt8,
    pub minute: SInt8,
    pub second: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed48 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed48 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFGregorianDate = Struct_Unnamed48;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed49 {
    pub years: SInt32,
    pub months: SInt32,
    pub days: SInt32,
    pub hours: SInt32,
    pub minutes: SInt32,
    pub seconds: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed49 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed49 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFGregorianUnits = Struct_Unnamed49;
pub type CFGregorianUnitFlags = CFOptionFlags;
pub type Enum_Unnamed50 = ::libc::c_uint;
pub const kCFGregorianUnitsYears: ::libc::c_uint = 1;
pub const kCFGregorianUnitsMonths: ::libc::c_uint = 2;
pub const kCFGregorianUnitsDays: ::libc::c_uint = 4;
pub const kCFGregorianUnitsHours: ::libc::c_uint = 8;
pub const kCFGregorianUnitsMinutes: ::libc::c_uint = 16;
pub const kCFGregorianUnitsSeconds: ::libc::c_uint = 32;
pub const kCFGregorianAllUnits: ::libc::c_uint = 16777215;
pub enum Struct___CFData { }
pub type CFDataRef = *const Struct___CFData;
pub type CFMutableDataRef = *mut Struct___CFData;
pub type CFDataSearchFlags = CFOptionFlags;
pub type Enum_Unnamed51 = ::libc::c_uint;
pub const kCFDataSearchBackwards: ::libc::c_uint = 1;
pub const kCFDataSearchAnchored: ::libc::c_uint = 2;
pub enum Struct___CFCharacterSet { }
pub type CFCharacterSetRef = *const Struct___CFCharacterSet;
pub type CFMutableCharacterSetRef = *mut Struct___CFCharacterSet;
pub type CFCharacterSetPredefinedSet = CFIndex;
pub type Enum_Unnamed52 = ::libc::c_uint;
pub const kCFCharacterSetControl: ::libc::c_uint = 1;
pub const kCFCharacterSetWhitespace: ::libc::c_uint = 2;
pub const kCFCharacterSetWhitespaceAndNewline: ::libc::c_uint = 3;
pub const kCFCharacterSetDecimalDigit: ::libc::c_uint = 4;
pub const kCFCharacterSetLetter: ::libc::c_uint = 5;
pub const kCFCharacterSetLowercaseLetter: ::libc::c_uint = 6;
pub const kCFCharacterSetUppercaseLetter: ::libc::c_uint = 7;
pub const kCFCharacterSetNonBase: ::libc::c_uint = 8;
pub const kCFCharacterSetDecomposable: ::libc::c_uint = 9;
pub const kCFCharacterSetAlphaNumeric: ::libc::c_uint = 10;
pub const kCFCharacterSetPunctuation: ::libc::c_uint = 11;
pub const kCFCharacterSetCapitalizedLetter: ::libc::c_uint = 13;
pub const kCFCharacterSetSymbol: ::libc::c_uint = 14;
pub const kCFCharacterSetNewline: ::libc::c_uint = 15;
pub const kCFCharacterSetIllegal: ::libc::c_uint = 12;
pub type CFStringEncoding = UInt32;
pub type CFStringBuiltInEncodings = CFStringEncoding;
pub type Enum_Unnamed53 = ::libc::c_uint;
pub const kCFStringEncodingMacRoman: ::libc::c_uint = 0;
pub const kCFStringEncodingWindowsLatin1: ::libc::c_uint = 1280;
pub const kCFStringEncodingISOLatin1: ::libc::c_uint = 513;
pub const kCFStringEncodingNextStepLatin: ::libc::c_uint = 2817;
pub const kCFStringEncodingASCII: ::libc::c_uint = 1536;
pub const kCFStringEncodingUnicode: ::libc::c_uint = 256;
pub const kCFStringEncodingUTF8: ::libc::c_uint = 134217984;
pub const kCFStringEncodingNonLossyASCII: ::libc::c_uint = 3071;
pub const kCFStringEncodingUTF16: ::libc::c_uint = 256;
pub const kCFStringEncodingUTF16BE: ::libc::c_uint = 268435712;
pub const kCFStringEncodingUTF16LE: ::libc::c_uint = 335544576;
pub const kCFStringEncodingUTF32: ::libc::c_uint = 201326848;
pub const kCFStringEncodingUTF32BE: ::libc::c_uint = 402653440;
pub const kCFStringEncodingUTF32LE: ::libc::c_uint = 469762304;
pub type CFStringCompareFlags = CFOptionFlags;
pub type Enum_Unnamed54 = ::libc::c_uint;
pub const kCFCompareCaseInsensitive: ::libc::c_uint = 1;
pub const kCFCompareBackwards: ::libc::c_uint = 4;
pub const kCFCompareAnchored: ::libc::c_uint = 8;
pub const kCFCompareNonliteral: ::libc::c_uint = 16;
pub const kCFCompareLocalized: ::libc::c_uint = 32;
pub const kCFCompareNumerically: ::libc::c_uint = 64;
pub const kCFCompareDiacriticInsensitive: ::libc::c_uint = 128;
pub const kCFCompareWidthInsensitive: ::libc::c_uint = 256;
pub const kCFCompareForcedOrdering: ::libc::c_uint = 512;
pub type CFStringNormalizationForm = CFIndex;
pub type Enum_Unnamed55 = ::libc::c_uint;
pub const kCFStringNormalizationFormD: ::libc::c_uint = 0;
pub const kCFStringNormalizationFormKD: ::libc::c_uint = 1;
pub const kCFStringNormalizationFormC: ::libc::c_uint = 2;
pub const kCFStringNormalizationFormKC: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed56 {
    pub buffer: [UniChar; 64usize],
    pub theString: CFStringRef,
    pub directUniCharBuffer: *const UniChar,
    pub directCStringBuffer: *const ::libc::c_char,
    pub rangeToBuffer: CFRange,
    pub bufferedRangeStart: CFIndex,
    pub bufferedRangeEnd: CFIndex,
}
impl ::std::clone::Clone for Struct_Unnamed56 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed56 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFStringInlineBuffer = Struct_Unnamed56;
pub type CFTimeZoneNameStyle = CFIndex;
pub type Enum_Unnamed57 = ::libc::c_uint;
pub const kCFTimeZoneNameStyleStandard: ::libc::c_uint = 0;
pub const kCFTimeZoneNameStyleShortStandard: ::libc::c_uint = 1;
pub const kCFTimeZoneNameStyleDaylightSaving: ::libc::c_uint = 2;
pub const kCFTimeZoneNameStyleShortDaylightSaving: ::libc::c_uint = 3;
pub const kCFTimeZoneNameStyleGeneric: ::libc::c_uint = 4;
pub const kCFTimeZoneNameStyleShortGeneric: ::libc::c_uint = 5;
pub enum Struct___CFCalendar { }
pub type CFCalendarRef = *mut Struct___CFCalendar;
pub type CFCalendarUnit = CFOptionFlags;
pub type Enum_Unnamed58 = ::libc::c_uint;
pub const kCFCalendarUnitEra: ::libc::c_uint = 2;
pub const kCFCalendarUnitYear: ::libc::c_uint = 4;
pub const kCFCalendarUnitMonth: ::libc::c_uint = 8;
pub const kCFCalendarUnitDay: ::libc::c_uint = 16;
pub const kCFCalendarUnitHour: ::libc::c_uint = 32;
pub const kCFCalendarUnitMinute: ::libc::c_uint = 64;
pub const kCFCalendarUnitSecond: ::libc::c_uint = 128;
pub const kCFCalendarUnitWeek: ::libc::c_uint = 256;
pub const kCFCalendarUnitWeekday: ::libc::c_uint = 512;
pub const kCFCalendarUnitWeekdayOrdinal: ::libc::c_uint = 1024;
pub const kCFCalendarUnitQuarter: ::libc::c_uint = 2048;
pub const kCFCalendarUnitWeekOfMonth: ::libc::c_uint = 4096;
pub const kCFCalendarUnitWeekOfYear: ::libc::c_uint = 8192;
pub const kCFCalendarUnitYearForWeekOfYear: ::libc::c_uint = 16384;
pub type Enum_Unnamed59 = ::libc::c_uint;
pub const kCFCalendarComponentsWrap: ::libc::c_uint = 1;
pub enum Struct___CFDateFormatter { }
pub type CFDateFormatterRef = *mut Struct___CFDateFormatter;
pub type CFDateFormatterStyle = CFIndex;
pub type Enum_Unnamed60 = ::libc::c_uint;
pub const kCFDateFormatterNoStyle: ::libc::c_uint = 0;
pub const kCFDateFormatterShortStyle: ::libc::c_uint = 1;
pub const kCFDateFormatterMediumStyle: ::libc::c_uint = 2;
pub const kCFDateFormatterLongStyle: ::libc::c_uint = 3;
pub const kCFDateFormatterFullStyle: ::libc::c_uint = 4;
pub enum Struct___CFError { }
pub type CFErrorRef = *mut Struct___CFError;
pub enum Struct___CFBoolean { }
pub type CFBooleanRef = *const Struct___CFBoolean;
pub type CFNumberType = CFIndex;
pub type Enum_Unnamed61 = ::libc::c_uint;
pub const kCFNumberSInt8Type: ::libc::c_uint = 1;
pub const kCFNumberSInt16Type: ::libc::c_uint = 2;
pub const kCFNumberSInt32Type: ::libc::c_uint = 3;
pub const kCFNumberSInt64Type: ::libc::c_uint = 4;
pub const kCFNumberFloat32Type: ::libc::c_uint = 5;
pub const kCFNumberFloat64Type: ::libc::c_uint = 6;
pub const kCFNumberCharType: ::libc::c_uint = 7;
pub const kCFNumberShortType: ::libc::c_uint = 8;
pub const kCFNumberIntType: ::libc::c_uint = 9;
pub const kCFNumberLongType: ::libc::c_uint = 10;
pub const kCFNumberLongLongType: ::libc::c_uint = 11;
pub const kCFNumberFloatType: ::libc::c_uint = 12;
pub const kCFNumberDoubleType: ::libc::c_uint = 13;
pub const kCFNumberCFIndexType: ::libc::c_uint = 14;
pub const kCFNumberNSIntegerType: ::libc::c_uint = 15;
pub const kCFNumberCGFloatType: ::libc::c_uint = 16;
pub const kCFNumberMaxType: ::libc::c_uint = 16;
pub enum Struct___CFNumber { }
pub type CFNumberRef = *const Struct___CFNumber;
pub enum Struct___CFNumberFormatter { }
pub type CFNumberFormatterRef = *mut Struct___CFNumberFormatter;
pub type CFNumberFormatterStyle = CFIndex;
pub type Enum_Unnamed62 = ::libc::c_uint;
pub const kCFNumberFormatterNoStyle: ::libc::c_uint = 0;
pub const kCFNumberFormatterDecimalStyle: ::libc::c_uint = 1;
pub const kCFNumberFormatterCurrencyStyle: ::libc::c_uint = 2;
pub const kCFNumberFormatterPercentStyle: ::libc::c_uint = 3;
pub const kCFNumberFormatterScientificStyle: ::libc::c_uint = 4;
pub const kCFNumberFormatterSpellOutStyle: ::libc::c_uint = 5;
pub type CFNumberFormatterOptionFlags = CFOptionFlags;
pub type Enum_Unnamed63 = ::libc::c_uint;
pub const kCFNumberFormatterParseIntegersOnly: ::libc::c_uint = 1;
pub type CFNumberFormatterRoundingMode = CFIndex;
pub type Enum_Unnamed64 = ::libc::c_uint;
pub const kCFNumberFormatterRoundCeiling: ::libc::c_uint = 0;
pub const kCFNumberFormatterRoundFloor: ::libc::c_uint = 1;
pub const kCFNumberFormatterRoundDown: ::libc::c_uint = 2;
pub const kCFNumberFormatterRoundUp: ::libc::c_uint = 3;
pub const kCFNumberFormatterRoundHalfEven: ::libc::c_uint = 4;
pub const kCFNumberFormatterRoundHalfDown: ::libc::c_uint = 5;
pub const kCFNumberFormatterRoundHalfUp: ::libc::c_uint = 6;
pub type CFNumberFormatterPadPosition = CFIndex;
pub type Enum_Unnamed65 = ::libc::c_uint;
pub const kCFNumberFormatterPadBeforePrefix: ::libc::c_uint = 0;
pub const kCFNumberFormatterPadAfterPrefix: ::libc::c_uint = 1;
pub const kCFNumberFormatterPadBeforeSuffix: ::libc::c_uint = 2;
pub const kCFNumberFormatterPadAfterSuffix: ::libc::c_uint = 3;
pub type CFURLPathStyle = CFIndex;
pub type Enum_Unnamed66 = ::libc::c_uint;
pub const kCFURLPOSIXPathStyle: ::libc::c_uint = 0;
pub const kCFURLHFSPathStyle: ::libc::c_uint = 1;
pub const kCFURLWindowsPathStyle: ::libc::c_uint = 2;
pub enum Struct___CFURL { }
pub type CFURLRef = *const Struct___CFURL;
pub type CFURLComponentType = CFIndex;
pub type Enum_Unnamed67 = ::libc::c_uint;
pub const kCFURLComponentScheme: ::libc::c_uint = 1;
pub const kCFURLComponentNetLocation: ::libc::c_uint = 2;
pub const kCFURLComponentPath: ::libc::c_uint = 3;
pub const kCFURLComponentResourceSpecifier: ::libc::c_uint = 4;
pub const kCFURLComponentUser: ::libc::c_uint = 5;
pub const kCFURLComponentPassword: ::libc::c_uint = 6;
pub const kCFURLComponentUserInfo: ::libc::c_uint = 7;
pub const kCFURLComponentHost: ::libc::c_uint = 8;
pub const kCFURLComponentPort: ::libc::c_uint = 9;
pub const kCFURLComponentParameterString: ::libc::c_uint = 10;
pub const kCFURLComponentQuery: ::libc::c_uint = 11;
pub const kCFURLComponentFragment: ::libc::c_uint = 12;
pub enum Struct_FSRef { }
pub type CFURLBookmarkCreationOptions = CFOptionFlags;
pub type Enum_Unnamed68 = ::libc::c_uint;
pub const kCFURLBookmarkCreationMinimalBookmarkMask: ::libc::c_uint = 512;
pub const kCFURLBookmarkCreationSuitableForBookmarkFile: ::libc::c_uint =
    1024;
pub const kCFURLBookmarkCreationWithSecurityScope: ::libc::c_uint = 2048;
pub const kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess:
          ::libc::c_uint =
    4096;
pub const kCFURLBookmarkCreationPreferFileIDResolutionMask: ::libc::c_uint =
    256;
pub type CFURLBookmarkResolutionOptions = CFOptionFlags;
pub type Enum_Unnamed69 = ::libc::c_uint;
pub const kCFURLBookmarkResolutionWithoutUIMask: ::libc::c_uint = 256;
pub const kCFURLBookmarkResolutionWithoutMountingMask: ::libc::c_uint = 512;
pub const kCFURLBookmarkResolutionWithSecurityScope: ::libc::c_uint = 1024;
pub const kCFBookmarkResolutionWithoutUIMask: ::libc::c_uint = 256;
pub const kCFBookmarkResolutionWithoutMountingMask: ::libc::c_uint = 512;
pub type CFURLBookmarkFileCreationOptions = CFOptionFlags;
pub type boolean_t = ::libc::c_uint;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::libc::c_int;
pub type vm_offset_t = uintptr_t;
pub type vm_size_t = uintptr_t;
pub type mach_vm_address_t = uint64_t;
pub type mach_vm_offset_t = uint64_t;
pub type mach_vm_size_t = uint64_t;
pub type vm_map_offset_t = uint64_t;
pub type vm_map_address_t = uint64_t;
pub type vm_map_size_t = uint64_t;
pub type mach_port_context_t = mach_vm_address_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_t = __darwin_mach_port_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::libc::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
impl ::std::clone::Clone for Struct_mach_port_status {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_port_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_status_t = Struct_mach_port_status;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
impl ::std::clone::Clone for Struct_mach_port_limits {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_port_limits {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_limits_t = Struct_mach_port_limits;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [uint32_t; 6usize],
}
impl ::std::clone::Clone for Struct_mach_port_info_ext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_port_info_ext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_info_ext_t = Struct_mach_port_info_ext;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_port_qos {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
    pub _bindgen_bitfield_2_: boolean_t,
    pub len: natural_t,
}
impl ::std::clone::Clone for Struct_mach_port_qos {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_port_qos {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_qos_t = Struct_mach_port_qos;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_port_options {
    pub flags: uint32_t,
    pub mpl: mach_port_limits_t,
    pub reserved: [uint64_t; 2usize],
}
impl ::std::clone::Clone for Struct_mach_port_options {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_port_options {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_options_t = Struct_mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub type Enum_mach_port_guard_exception_codes = ::libc::c_uint;
pub const kGUARD_EXC_DESTROY: ::libc::c_uint = 1;
pub const kGUARD_EXC_MOD_REFS: ::libc::c_uint = 2;
pub const kGUARD_EXC_SET_CONTEXT: ::libc::c_uint = 4;
pub const kGUARD_EXC_UNGUARDED: ::libc::c_uint = 8;
pub const kGUARD_EXC_INCORRECT_GUARD: ::libc::c_uint = 16;
pub enum Struct___CFRunLoop { }
pub type CFRunLoopRef = *mut Struct___CFRunLoop;
pub enum Struct___CFRunLoopSource { }
pub type CFRunLoopSourceRef = *mut Struct___CFRunLoopSource;
pub enum Struct___CFRunLoopObserver { }
pub type CFRunLoopObserverRef = *mut Struct___CFRunLoopObserver;
pub enum Struct___CFRunLoopTimer { }
pub type CFRunLoopTimerRef = *mut Struct___CFRunLoopTimer;
pub type Enum_Unnamed70 = ::libc::c_uint;
pub const kCFRunLoopRunFinished: ::libc::c_uint = 1;
pub const kCFRunLoopRunStopped: ::libc::c_uint = 2;
pub const kCFRunLoopRunTimedOut: ::libc::c_uint = 3;
pub const kCFRunLoopRunHandledSource: ::libc::c_uint = 4;
pub type CFRunLoopActivity = CFOptionFlags;
pub type Enum_Unnamed71 = ::libc::c_uint;
pub const kCFRunLoopEntry: ::libc::c_uint = 1;
pub const kCFRunLoopBeforeTimers: ::libc::c_uint = 2;
pub const kCFRunLoopBeforeSources: ::libc::c_uint = 4;
pub const kCFRunLoopBeforeWaiting: ::libc::c_uint = 32;
pub const kCFRunLoopAfterWaiting: ::libc::c_uint = 64;
pub const kCFRunLoopExit: ::libc::c_uint = 128;
pub const kCFRunLoopAllActivities: ::libc::c_uint = 268435455;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed72 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: ::std::option::Option<extern "C" fn(info:
                                                        *const ::libc::c_void)
                                          -> *const ::libc::c_void>,
    pub release: ::std::option::Option<extern "C" fn(info:
                                                         *const ::libc::c_void)
                                           -> ()>,
    pub copyDescription: ::std::option::Option<extern "C" fn(info:
                                                                 *const ::libc::c_void)
                                                   -> CFStringRef>,
    pub equal: ::std::option::Option<extern "C" fn(info1:
                                                       *const ::libc::c_void,
                                                   info2:
                                                       *const ::libc::c_void)
                                         -> Boolean>,
    pub hash: ::std::option::Option<extern "C" fn(info: *const ::libc::c_void)
                                        -> CFHashCode>,
    pub schedule: ::std::option::Option<extern "C" fn(info:
                                                          *mut ::libc::c_void,
                                                      rl: CFRunLoopRef,
                                                      mode: CFStringRef)
                                            -> ()>,
    pub cancel: ::std::option::Option<extern "C" fn(info: *mut ::libc::c_void,
                                                    rl: CFRunLoopRef,
                                                    mode: CFStringRef) -> ()>,
    pub perform: ::std::option::Option<extern "C" fn(info:
                                                         *mut ::libc::c_void)
                                           -> ()>,
}
impl ::std::clone::Clone for Struct_Unnamed72 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed72 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFRunLoopSourceContext = Struct_Unnamed72;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed73 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: ::std::option::Option<extern "C" fn(info:
                                                        *const ::libc::c_void)
                                          -> *const ::libc::c_void>,
    pub release: ::std::option::Option<extern "C" fn(info:
                                                         *const ::libc::c_void)
                                           -> ()>,
    pub copyDescription: ::std::option::Option<extern "C" fn(info:
                                                                 *const ::libc::c_void)
                                                   -> CFStringRef>,
    pub equal: ::std::option::Option<extern "C" fn(info1:
                                                       *const ::libc::c_void,
                                                   info2:
                                                       *const ::libc::c_void)
                                         -> Boolean>,
    pub hash: ::std::option::Option<extern "C" fn(info: *const ::libc::c_void)
                                        -> CFHashCode>,
    pub getPort: ::std::option::Option<extern "C" fn(info:
                                                         *mut ::libc::c_void)
                                           -> mach_port_t>,
    pub perform: ::std::option::Option<extern "C" fn(msg: *mut ::libc::c_void,
                                                     size: CFIndex,
                                                     allocator:
                                                         CFAllocatorRef,
                                                     info:
                                                         *mut ::libc::c_void)
                                           -> *mut ::libc::c_void>,
}
impl ::std::clone::Clone for Struct_Unnamed73 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed73 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFRunLoopSourceContext1 = Struct_Unnamed73;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed74 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: ::std::option::Option<extern "C" fn(info:
                                                        *const ::libc::c_void)
                                          -> *const ::libc::c_void>,
    pub release: ::std::option::Option<extern "C" fn(info:
                                                         *const ::libc::c_void)
                                           -> ()>,
    pub copyDescription: ::std::option::Option<extern "C" fn(info:
                                                                 *const ::libc::c_void)
                                                   -> CFStringRef>,
}
impl ::std::clone::Clone for Struct_Unnamed74 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed74 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFRunLoopObserverContext = Struct_Unnamed74;
pub type CFRunLoopObserverCallBack =
    ::std::option::Option<extern "C" fn(observer: CFRunLoopObserverRef,
                                        activity: CFRunLoopActivity,
                                        info: *mut ::libc::c_void) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed75 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: ::std::option::Option<extern "C" fn(info:
                                                        *const ::libc::c_void)
                                          -> *const ::libc::c_void>,
    pub release: ::std::option::Option<extern "C" fn(info:
                                                         *const ::libc::c_void)
                                           -> ()>,
    pub copyDescription: ::std::option::Option<extern "C" fn(info:
                                                                 *const ::libc::c_void)
                                                   -> CFStringRef>,
}
impl ::std::clone::Clone for Struct_Unnamed75 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed75 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFRunLoopTimerContext = Struct_Unnamed75;
pub type CFRunLoopTimerCallBack =
    ::std::option::Option<extern "C" fn(timer: CFRunLoopTimerRef,
                                        info: *mut ::libc::c_void) -> ()>;
pub enum Struct___CFSocket { }
pub type CFSocketRef = *mut Struct___CFSocket;
pub type CFSocketError = CFIndex;
pub type Enum_Unnamed76 = ::libc::c_int;
pub const kCFSocketSuccess: ::libc::c_int = 0;
pub const kCFSocketError: ::libc::c_int = -1;
pub const kCFSocketTimeout: ::libc::c_int = -2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed77 {
    pub protocolFamily: SInt32,
    pub socketType: SInt32,
    pub protocol: SInt32,
    pub address: CFDataRef,
}
impl ::std::clone::Clone for Struct_Unnamed77 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed77 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFSocketSignature = Struct_Unnamed77;
pub type CFSocketCallBackType = CFOptionFlags;
pub type Enum_Unnamed78 = ::libc::c_uint;
pub const kCFSocketNoCallBack: ::libc::c_uint = 0;
pub const kCFSocketReadCallBack: ::libc::c_uint = 1;
pub const kCFSocketAcceptCallBack: ::libc::c_uint = 2;
pub const kCFSocketDataCallBack: ::libc::c_uint = 3;
pub const kCFSocketConnectCallBack: ::libc::c_uint = 4;
pub const kCFSocketWriteCallBack: ::libc::c_uint = 8;
pub type Enum_Unnamed79 = ::libc::c_uint;
pub const kCFSocketAutomaticallyReenableReadCallBack: ::libc::c_uint = 1;
pub const kCFSocketAutomaticallyReenableAcceptCallBack: ::libc::c_uint = 2;
pub const kCFSocketAutomaticallyReenableDataCallBack: ::libc::c_uint = 3;
pub const kCFSocketAutomaticallyReenableWriteCallBack: ::libc::c_uint = 8;
pub const kCFSocketLeaveErrors: ::libc::c_uint = 64;
pub const kCFSocketCloseOnInvalidate: ::libc::c_uint = 128;
pub type CFSocketCallBack =
    ::std::option::Option<extern "C" fn(s: CFSocketRef,
                                        _type: CFSocketCallBackType,
                                        address: CFDataRef,
                                        data: *const ::libc::c_void,
                                        info: *mut ::libc::c_void) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed80 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: ::std::option::Option<extern "C" fn(info:
                                                        *const ::libc::c_void)
                                          -> *const ::libc::c_void>,
    pub release: ::std::option::Option<extern "C" fn(info:
                                                         *const ::libc::c_void)
                                           -> ()>,
    pub copyDescription: ::std::option::Option<extern "C" fn(info:
                                                                 *const ::libc::c_void)
                                                   -> CFStringRef>,
}
impl ::std::clone::Clone for Struct_Unnamed80 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed80 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFSocketContext = Struct_Unnamed80;
pub type CFSocketNativeHandle = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_accessx_descriptor {
    pub ad_name_offset: ::libc::c_uint,
    pub ad_flags: ::libc::c_int,
    pub ad_pad: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_accessx_descriptor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_accessx_descriptor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uuid_t = __darwin_uuid_t;
pub enum Struct_fssearchblock { }
pub enum Struct_searchstate { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::libc::c_short,
    pub l_whence: ::libc::c_short,
}
impl ::std::clone::Clone for Struct_flock {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_flock {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_flocktimeout {
    pub fl: Struct_flock,
    pub timeout: Struct_timespec,
}
impl ::std::clone::Clone for Struct_flocktimeout {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_flocktimeout {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_radvisory {
    pub ra_offset: off_t,
    pub ra_count: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_radvisory {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_radvisory {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fcodeblobs {
    pub f_cd_hash: *mut ::libc::c_void,
    pub f_hash_size: size_t,
    pub f_cd_buffer: *mut ::libc::c_void,
    pub f_cd_size: size_t,
    pub f_out_size: *mut ::libc::c_uint,
    pub f_arch: ::libc::c_int,
    pub __padding: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_fcodeblobs {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fcodeblobs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fcodeblobs_t = Struct_fcodeblobs;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: *mut ::libc::c_void,
    pub fs_blob_size: size_t,
}
impl ::std::clone::Clone for Struct_fsignatures {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fsignatures {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fsignatures_t = Struct_fsignatures;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fstore {
    pub fst_flags: ::libc::c_uint,
    pub fst_posmode: ::libc::c_int,
    pub fst_offset: off_t,
    pub fst_length: off_t,
    pub fst_bytesalloc: off_t,
}
impl ::std::clone::Clone for Struct_fstore {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fstore {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fstore_t = Struct_fstore;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fbootstraptransfer {
    pub fbt_offset: off_t,
    pub fbt_length: size_t,
    pub fbt_buffer: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_fbootstraptransfer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fbootstraptransfer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fbootstraptransfer_t = Struct_fbootstraptransfer;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_log2phys {
    pub l2p_flags: ::libc::c_uint,
    pub l2p_contigbytes: off_t,
    pub l2p_devoffset: off_t,
}
impl ::std::clone::Clone for Struct_log2phys {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_log2phys {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__filesec { }
pub type filesec_t = *mut Struct__filesec;
pub type Enum_Unnamed81 = ::libc::c_uint;
pub const FILESEC_OWNER: ::libc::c_uint = 1;
pub const FILESEC_GROUP: ::libc::c_uint = 2;
pub const FILESEC_UUID: ::libc::c_uint = 3;
pub const FILESEC_MODE: ::libc::c_uint = 4;
pub const FILESEC_ACL: ::libc::c_uint = 5;
pub const FILESEC_GRPUUID: ::libc::c_uint = 6;
pub const FILESEC_ACL_RAW: ::libc::c_uint = 100;
pub const FILESEC_ACL_ALLOCSIZE: ::libc::c_uint = 101;
pub type filesec_property_t = Enum_Unnamed81;
pub type dispatch_function_t =
    ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
impl ::std::clone::Clone for Struct_time_value {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_time_value {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type time_value_t = Struct_time_value;
pub type alarm_type_t = ::libc::c_int;
pub type sleep_type_t = ::libc::c_int;
pub type clock_id_t = ::libc::c_int;
pub type clock_flavor_t = ::libc::c_int;
pub type clock_attr_t = *mut ::libc::c_int;
pub type clock_res_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_timespec {
    pub tv_sec: ::libc::c_uint,
    pub tv_nsec: clock_res_t,
}
impl ::std::clone::Clone for Struct_mach_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_timespec_t = Struct_mach_timespec;
pub type dispatch_time_t = uint64_t;
pub enum Struct__os_object_s { }
pub enum Struct_dispatch_object_s { }
pub enum Struct_dispatch_continuation_s { }
pub enum Struct_dispatch_queue_s { }
pub enum Struct_dispatch_queue_attr_s { }
pub enum Struct_dispatch_group_s { }
pub enum Struct_dispatch_source_s { }
pub enum Struct_dispatch_mach_s { }
pub enum Struct_dispatch_mach_msg_s { }
pub enum Struct_dispatch_timer_aggregate_s { }
pub enum Struct_dispatch_source_attr_s { }
pub enum Struct_dispatch_semaphore_s { }
pub enum Struct_dispatch_data_s { }
pub enum Struct_dispatch_io_s { }
pub enum Struct_dispatch_operation_s { }
pub enum Struct_dispatch_disk_s { }
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed82 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed82 {
    pub unsafe fn _os_obj(&mut self) -> *mut *mut Struct__os_object_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _do(&mut self) -> *mut *mut Struct_dispatch_object_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _dc(&mut self) -> *mut *mut Struct_dispatch_continuation_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _dq(&mut self) -> *mut *mut Struct_dispatch_queue_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _dqa(&mut self) -> *mut *mut Struct_dispatch_queue_attr_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _dg(&mut self) -> *mut *mut Struct_dispatch_group_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _ds(&mut self) -> *mut *mut Struct_dispatch_source_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _dm(&mut self) -> *mut *mut Struct_dispatch_mach_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _dmsg(&mut self) -> *mut *mut Struct_dispatch_mach_msg_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _dta(&mut self)
     -> *mut *mut Struct_dispatch_timer_aggregate_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _dsa(&mut self) -> *mut *mut Struct_dispatch_source_attr_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _dsema(&mut self) -> *mut *mut Struct_dispatch_semaphore_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _ddata(&mut self) -> *mut *mut Struct_dispatch_data_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _dchannel(&mut self) -> *mut *mut Struct_dispatch_io_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _doperation(&mut self)
     -> *mut *mut Struct_dispatch_operation_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _ddisk(&mut self) -> *mut *mut Struct_dispatch_disk_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed82 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed82 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dispatch_object_t = Union_Unnamed82;
pub type dispatch_block_t = ::libc::c_void;
pub type dispatch_queue_t = *mut Struct_dispatch_queue_s;
pub type dispatch_queue_priority_t = ::libc::c_long;
pub type Enum_Unnamed83 = ::libc::c_uint;
pub const QOS_CLASS_USER_INTERACTIVE: ::libc::c_uint = 33;
pub const QOS_CLASS_USER_INITIATED: ::libc::c_uint = 25;
pub const QOS_CLASS_DEFAULT: ::libc::c_uint = 21;
pub const QOS_CLASS_UTILITY: ::libc::c_uint = 17;
pub const QOS_CLASS_BACKGROUND: ::libc::c_uint = 9;
pub const QOS_CLASS_UNSPECIFIED: ::libc::c_uint = 0;
pub type qos_class_t = ::libc::c_uint;
pub type dispatch_qos_class_t = qos_class_t;
pub type dispatch_queue_attr_t = *mut Struct_dispatch_queue_attr_s;
pub type Enum_Unnamed84 = ::libc::c_uint;
pub const DISPATCH_BLOCK_BARRIER: ::libc::c_uint = 1;
pub const DISPATCH_BLOCK_DETACHED: ::libc::c_uint = 2;
pub const DISPATCH_BLOCK_ASSIGN_CURRENT: ::libc::c_uint = 4;
pub const DISPATCH_BLOCK_NO_QOS_CLASS: ::libc::c_uint = 8;
pub const DISPATCH_BLOCK_INHERIT_QOS_CLASS: ::libc::c_uint = 16;
pub const DISPATCH_BLOCK_ENFORCE_QOS_CLASS: ::libc::c_uint = 32;
pub type dispatch_block_flags_t = ::libc::c_ulong;
pub type kern_return_t = ::libc::c_int;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::libc::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_type_name_t = ::libc::c_uint;
pub type mach_msg_copy_options_t = ::libc::c_uint;
pub type mach_msg_descriptor_type_t = ::libc::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed85 {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bindgen_bitfield_1_: ::libc::c_uint,
    pub _bindgen_bitfield_2_: mach_msg_descriptor_type_t,
}
impl ::std::clone::Clone for Struct_Unnamed85 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed85 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_type_descriptor_t = Struct_Unnamed85;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed86 {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bindgen_bitfield_1_: ::libc::c_uint,
    pub _bindgen_bitfield_2_: mach_msg_type_name_t,
    pub _bindgen_bitfield_3_: mach_msg_descriptor_type_t,
}
impl ::std::clone::Clone for Struct_Unnamed86 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed86 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_port_descriptor_t = Struct_Unnamed86;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed87 {
    pub address: uint32_t,
    pub size: mach_msg_size_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: ::libc::c_uint,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
}
impl ::std::clone::Clone for Struct_Unnamed87 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed87 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_ool_descriptor32_t = Struct_Unnamed87;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed88 {
    pub address: uint64_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: ::libc::c_uint,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub size: mach_msg_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed88 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed88 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_ool_descriptor64_t = Struct_Unnamed88;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed89 {
    pub address: *mut ::libc::c_void,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: ::libc::c_uint,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub size: mach_msg_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed89 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed89 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_ool_descriptor_t = Struct_Unnamed89;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed90 {
    pub address: uint32_t,
    pub count: mach_msg_size_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: mach_msg_type_name_t,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
}
impl ::std::clone::Clone for Struct_Unnamed90 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed90 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_ool_ports_descriptor32_t = Struct_Unnamed90;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed91 {
    pub address: uint64_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: mach_msg_type_name_t,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub count: mach_msg_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed91 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed91 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_ool_ports_descriptor64_t = Struct_Unnamed91;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed92 {
    pub address: *mut ::libc::c_void,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: mach_msg_type_name_t,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub count: mach_msg_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed92 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed92 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_ool_ports_descriptor_t = Struct_Unnamed92;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed93 {
    pub _bindgen_data_: [u32; 4usize],
}
impl Union_Unnamed93 {
    pub unsafe fn port(&mut self) -> *mut mach_msg_port_descriptor_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn out_of_line(&mut self) -> *mut mach_msg_ool_descriptor_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ool_ports(&mut self)
     -> *mut mach_msg_ool_ports_descriptor_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _type(&mut self) -> *mut mach_msg_type_descriptor_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed93 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed93 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_descriptor_t = Union_Unnamed93;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed94 {
    pub msgh_descriptor_count: mach_msg_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed94 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed94 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_body_t = Struct_Unnamed94;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed95 {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
impl ::std::clone::Clone for Struct_Unnamed95 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed95 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_header_t = Struct_Unnamed95;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed96 {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
impl ::std::clone::Clone for Struct_Unnamed96 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed96 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_base_t = Struct_Unnamed96;
pub type mach_msg_trailer_type_t = ::libc::c_uint;
pub type mach_msg_trailer_size_t = ::libc::c_uint;
pub type mach_msg_trailer_info_t = *mut ::libc::c_char;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed97 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed97 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed97 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_trailer_t = Struct_Unnamed97;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed98 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
impl ::std::clone::Clone for Struct_Unnamed98 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed98 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_seqno_trailer_t = Struct_Unnamed98;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed99 {
    pub val: [::libc::c_uint; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed99 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed99 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type security_token_t = Struct_Unnamed99;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed100 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
impl ::std::clone::Clone for Struct_Unnamed100 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed100 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_security_trailer_t = Struct_Unnamed100;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed101 {
    pub val: [::libc::c_uint; 8usize],
}
impl ::std::clone::Clone for Struct_Unnamed101 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed101 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type audit_token_t = Struct_Unnamed101;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed102 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
impl ::std::clone::Clone for Struct_Unnamed102 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed102 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_audit_trailer_t = Struct_Unnamed102;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed103 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
impl ::std::clone::Clone for Struct_Unnamed103 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed103 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_context_trailer_t = Struct_Unnamed103;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed104 {
    pub sender: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed104 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed104 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type msg_labels_t = Struct_Unnamed104;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed105 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: ::libc::c_int,
    pub msgh_labels: msg_labels_t,
}
impl ::std::clone::Clone for Struct_Unnamed105 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed105 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_mac_trailer_t = Struct_Unnamed105;
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed106 {
    pub header: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed106 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed106 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_empty_send_t = Struct_Unnamed106;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed107 {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
impl ::std::clone::Clone for Struct_Unnamed107 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed107 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_empty_rcv_t = Struct_Unnamed107;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed108 {
    pub _bindgen_data_: [u32; 8usize],
}
impl Union_Unnamed108 {
    pub unsafe fn send(&mut self) -> *mut mach_msg_empty_send_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rcv(&mut self) -> *mut mach_msg_empty_rcv_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed108 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed108 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_empty_t = Union_Unnamed108;
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
pub type dispatch_source_t = *mut Struct_dispatch_source_s;
pub enum Struct_dispatch_source_type_s { }
pub type dispatch_source_type_t = *const Struct_dispatch_source_type_s;
pub type dispatch_source_mach_send_flags_t = ::libc::c_ulong;
pub type dispatch_source_memorypressure_flags_t = ::libc::c_ulong;
pub type dispatch_source_proc_flags_t = ::libc::c_ulong;
pub type dispatch_source_vnode_flags_t = ::libc::c_ulong;
pub type dispatch_source_timer_flags_t = ::libc::c_ulong;
pub type dispatch_group_t = *mut Struct_dispatch_group_s;
pub type dispatch_semaphore_t = *mut Struct_dispatch_semaphore_s;
pub type dispatch_once_t = ::libc::c_long;
pub type dispatch_data_t = *mut Struct_dispatch_data_s;
pub type dispatch_data_applier_t = ::libc::c_void;
pub type dispatch_fd_t = ::libc::c_int;
pub type dispatch_io_t = *mut Struct_dispatch_io_s;
pub type dispatch_io_type_t = ::libc::c_ulong;
pub type dispatch_io_handler_t = ::libc::c_void;
pub type dispatch_io_close_flags_t = ::libc::c_ulong;
pub type dispatch_io_interval_flags_t = ::libc::c_ulong;
pub type CFStreamStatus = CFIndex;
pub type Enum_Unnamed109 = ::libc::c_uint;
pub const kCFStreamStatusNotOpen: ::libc::c_uint = 0;
pub const kCFStreamStatusOpening: ::libc::c_uint = 1;
pub const kCFStreamStatusOpen: ::libc::c_uint = 2;
pub const kCFStreamStatusReading: ::libc::c_uint = 3;
pub const kCFStreamStatusWriting: ::libc::c_uint = 4;
pub const kCFStreamStatusAtEnd: ::libc::c_uint = 5;
pub const kCFStreamStatusClosed: ::libc::c_uint = 6;
pub const kCFStreamStatusError: ::libc::c_uint = 7;
pub type CFStreamEventType = CFOptionFlags;
pub type Enum_Unnamed110 = ::libc::c_uint;
pub const kCFStreamEventNone: ::libc::c_uint = 0;
pub const kCFStreamEventOpenCompleted: ::libc::c_uint = 1;
pub const kCFStreamEventHasBytesAvailable: ::libc::c_uint = 2;
pub const kCFStreamEventCanAcceptBytes: ::libc::c_uint = 4;
pub const kCFStreamEventErrorOccurred: ::libc::c_uint = 8;
pub const kCFStreamEventEndEncountered: ::libc::c_uint = 16;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed111 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: ::std::option::Option<extern "C" fn(info: *mut ::libc::c_void)
                                          -> *mut ::libc::c_void>,
    pub release: ::std::option::Option<extern "C" fn(info:
                                                         *mut ::libc::c_void)
                                           -> ()>,
    pub copyDescription: ::std::option::Option<extern "C" fn(info:
                                                                 *mut ::libc::c_void)
                                                   -> CFStringRef>,
}
impl ::std::clone::Clone for Struct_Unnamed111 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed111 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFStreamClientContext = Struct_Unnamed111;
pub enum Struct___CFReadStream { }
pub type CFReadStreamRef = *mut Struct___CFReadStream;
pub enum Struct___CFWriteStream { }
pub type CFWriteStreamRef = *mut Struct___CFWriteStream;
pub type CFReadStreamClientCallBack =
    ::std::option::Option<extern "C" fn(stream: CFReadStreamRef,
                                        _type: CFStreamEventType,
                                        clientCallBackInfo:
                                            *mut ::libc::c_void) -> ()>;
pub type CFWriteStreamClientCallBack =
    ::std::option::Option<extern "C" fn(stream: CFWriteStreamRef,
                                        _type: CFStreamEventType,
                                        clientCallBackInfo:
                                            *mut ::libc::c_void) -> ()>;
pub type CFStreamErrorDomain = CFIndex;
pub type Enum_Unnamed112 = ::libc::c_int;
pub const kCFStreamErrorDomainCustom: ::libc::c_int = -1;
pub const kCFStreamErrorDomainPOSIX: ::libc::c_int = 1;
pub const kCFStreamErrorDomainMacOSStatus: ::libc::c_int = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed113 {
    pub domain: CFIndex,
    pub error: SInt32,
}
impl ::std::clone::Clone for Struct_Unnamed113 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed113 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFStreamError = Struct_Unnamed113;
pub type CFPropertyListMutabilityOptions = CFOptionFlags;
pub type Enum_Unnamed114 = ::libc::c_uint;
pub const kCFPropertyListImmutable: ::libc::c_uint = 0;
pub const kCFPropertyListMutableContainers: ::libc::c_uint = 1;
pub const kCFPropertyListMutableContainersAndLeaves: ::libc::c_uint = 2;
pub type CFPropertyListFormat = CFIndex;
pub type Enum_Unnamed115 = ::libc::c_uint;
pub const kCFPropertyListOpenStepFormat: ::libc::c_uint = 1;
pub const kCFPropertyListXMLFormat_v1_0: ::libc::c_uint = 100;
pub const kCFPropertyListBinaryFormat_v1_0: ::libc::c_uint = 200;
pub type Enum_Unnamed116 = ::libc::c_uint;
pub const kCFPropertyListReadCorruptError: ::libc::c_uint = 3840;
pub const kCFPropertyListReadUnknownVersionError: ::libc::c_uint = 3841;
pub const kCFPropertyListReadStreamError: ::libc::c_uint = 3842;
pub const kCFPropertyListWriteStreamError: ::libc::c_uint = 3851;
pub type CFSetRetainCallBack =
    ::std::option::Option<extern "C" fn(allocator: CFAllocatorRef,
                                        value: *const ::libc::c_void)
                              -> *const ::libc::c_void>;
pub type CFSetReleaseCallBack =
    ::std::option::Option<extern "C" fn(allocator: CFAllocatorRef,
                                        value: *const ::libc::c_void) -> ()>;
pub type CFSetCopyDescriptionCallBack =
    ::std::option::Option<extern "C" fn(value: *const ::libc::c_void)
                              -> CFStringRef>;
pub type CFSetEqualCallBack =
    ::std::option::Option<extern "C" fn(value1: *const ::libc::c_void,
                                        value2: *const ::libc::c_void)
                              -> Boolean>;
pub type CFSetHashCallBack =
    ::std::option::Option<extern "C" fn(value: *const ::libc::c_void)
                              -> CFHashCode>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed117 {
    pub version: CFIndex,
    pub retain: CFSetRetainCallBack,
    pub release: CFSetReleaseCallBack,
    pub copyDescription: CFSetCopyDescriptionCallBack,
    pub equal: CFSetEqualCallBack,
    pub hash: CFSetHashCallBack,
}
impl ::std::clone::Clone for Struct_Unnamed117 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed117 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFSetCallBacks = Struct_Unnamed117;
pub type CFSetApplierFunction =
    ::std::option::Option<extern "C" fn(value: *const ::libc::c_void,
                                        context: *mut ::libc::c_void) -> ()>;
pub enum Struct___CFSet { }
pub type CFSetRef = *const Struct___CFSet;
pub type CFMutableSetRef = *mut Struct___CFSet;
pub type CFStringEncodings = CFIndex;
pub type Enum_Unnamed118 = ::libc::c_uint;
pub const kCFStringEncodingMacJapanese: ::libc::c_uint = 1;
pub const kCFStringEncodingMacChineseTrad: ::libc::c_uint = 2;
pub const kCFStringEncodingMacKorean: ::libc::c_uint = 3;
pub const kCFStringEncodingMacArabic: ::libc::c_uint = 4;
pub const kCFStringEncodingMacHebrew: ::libc::c_uint = 5;
pub const kCFStringEncodingMacGreek: ::libc::c_uint = 6;
pub const kCFStringEncodingMacCyrillic: ::libc::c_uint = 7;
pub const kCFStringEncodingMacDevanagari: ::libc::c_uint = 9;
pub const kCFStringEncodingMacGurmukhi: ::libc::c_uint = 10;
pub const kCFStringEncodingMacGujarati: ::libc::c_uint = 11;
pub const kCFStringEncodingMacOriya: ::libc::c_uint = 12;
pub const kCFStringEncodingMacBengali: ::libc::c_uint = 13;
pub const kCFStringEncodingMacTamil: ::libc::c_uint = 14;
pub const kCFStringEncodingMacTelugu: ::libc::c_uint = 15;
pub const kCFStringEncodingMacKannada: ::libc::c_uint = 16;
pub const kCFStringEncodingMacMalayalam: ::libc::c_uint = 17;
pub const kCFStringEncodingMacSinhalese: ::libc::c_uint = 18;
pub const kCFStringEncodingMacBurmese: ::libc::c_uint = 19;
pub const kCFStringEncodingMacKhmer: ::libc::c_uint = 20;
pub const kCFStringEncodingMacThai: ::libc::c_uint = 21;
pub const kCFStringEncodingMacLaotian: ::libc::c_uint = 22;
pub const kCFStringEncodingMacGeorgian: ::libc::c_uint = 23;
pub const kCFStringEncodingMacArmenian: ::libc::c_uint = 24;
pub const kCFStringEncodingMacChineseSimp: ::libc::c_uint = 25;
pub const kCFStringEncodingMacTibetan: ::libc::c_uint = 26;
pub const kCFStringEncodingMacMongolian: ::libc::c_uint = 27;
pub const kCFStringEncodingMacEthiopic: ::libc::c_uint = 28;
pub const kCFStringEncodingMacCentralEurRoman: ::libc::c_uint = 29;
pub const kCFStringEncodingMacVietnamese: ::libc::c_uint = 30;
pub const kCFStringEncodingMacExtArabic: ::libc::c_uint = 31;
pub const kCFStringEncodingMacSymbol: ::libc::c_uint = 33;
pub const kCFStringEncodingMacDingbats: ::libc::c_uint = 34;
pub const kCFStringEncodingMacTurkish: ::libc::c_uint = 35;
pub const kCFStringEncodingMacCroatian: ::libc::c_uint = 36;
pub const kCFStringEncodingMacIcelandic: ::libc::c_uint = 37;
pub const kCFStringEncodingMacRomanian: ::libc::c_uint = 38;
pub const kCFStringEncodingMacCeltic: ::libc::c_uint = 39;
pub const kCFStringEncodingMacGaelic: ::libc::c_uint = 40;
pub const kCFStringEncodingMacFarsi: ::libc::c_uint = 140;
pub const kCFStringEncodingMacUkrainian: ::libc::c_uint = 152;
pub const kCFStringEncodingMacInuit: ::libc::c_uint = 236;
pub const kCFStringEncodingMacVT100: ::libc::c_uint = 252;
pub const kCFStringEncodingMacHFS: ::libc::c_uint = 255;
pub const kCFStringEncodingISOLatin2: ::libc::c_uint = 514;
pub const kCFStringEncodingISOLatin3: ::libc::c_uint = 515;
pub const kCFStringEncodingISOLatin4: ::libc::c_uint = 516;
pub const kCFStringEncodingISOLatinCyrillic: ::libc::c_uint = 517;
pub const kCFStringEncodingISOLatinArabic: ::libc::c_uint = 518;
pub const kCFStringEncodingISOLatinGreek: ::libc::c_uint = 519;
pub const kCFStringEncodingISOLatinHebrew: ::libc::c_uint = 520;
pub const kCFStringEncodingISOLatin5: ::libc::c_uint = 521;
pub const kCFStringEncodingISOLatin6: ::libc::c_uint = 522;
pub const kCFStringEncodingISOLatinThai: ::libc::c_uint = 523;
pub const kCFStringEncodingISOLatin7: ::libc::c_uint = 525;
pub const kCFStringEncodingISOLatin8: ::libc::c_uint = 526;
pub const kCFStringEncodingISOLatin9: ::libc::c_uint = 527;
pub const kCFStringEncodingISOLatin10: ::libc::c_uint = 528;
pub const kCFStringEncodingDOSLatinUS: ::libc::c_uint = 1024;
pub const kCFStringEncodingDOSGreek: ::libc::c_uint = 1029;
pub const kCFStringEncodingDOSBalticRim: ::libc::c_uint = 1030;
pub const kCFStringEncodingDOSLatin1: ::libc::c_uint = 1040;
pub const kCFStringEncodingDOSGreek1: ::libc::c_uint = 1041;
pub const kCFStringEncodingDOSLatin2: ::libc::c_uint = 1042;
pub const kCFStringEncodingDOSCyrillic: ::libc::c_uint = 1043;
pub const kCFStringEncodingDOSTurkish: ::libc::c_uint = 1044;
pub const kCFStringEncodingDOSPortuguese: ::libc::c_uint = 1045;
pub const kCFStringEncodingDOSIcelandic: ::libc::c_uint = 1046;
pub const kCFStringEncodingDOSHebrew: ::libc::c_uint = 1047;
pub const kCFStringEncodingDOSCanadianFrench: ::libc::c_uint = 1048;
pub const kCFStringEncodingDOSArabic: ::libc::c_uint = 1049;
pub const kCFStringEncodingDOSNordic: ::libc::c_uint = 1050;
pub const kCFStringEncodingDOSRussian: ::libc::c_uint = 1051;
pub const kCFStringEncodingDOSGreek2: ::libc::c_uint = 1052;
pub const kCFStringEncodingDOSThai: ::libc::c_uint = 1053;
pub const kCFStringEncodingDOSJapanese: ::libc::c_uint = 1056;
pub const kCFStringEncodingDOSChineseSimplif: ::libc::c_uint = 1057;
pub const kCFStringEncodingDOSKorean: ::libc::c_uint = 1058;
pub const kCFStringEncodingDOSChineseTrad: ::libc::c_uint = 1059;
pub const kCFStringEncodingWindowsLatin2: ::libc::c_uint = 1281;
pub const kCFStringEncodingWindowsCyrillic: ::libc::c_uint = 1282;
pub const kCFStringEncodingWindowsGreek: ::libc::c_uint = 1283;
pub const kCFStringEncodingWindowsLatin5: ::libc::c_uint = 1284;
pub const kCFStringEncodingWindowsHebrew: ::libc::c_uint = 1285;
pub const kCFStringEncodingWindowsArabic: ::libc::c_uint = 1286;
pub const kCFStringEncodingWindowsBalticRim: ::libc::c_uint = 1287;
pub const kCFStringEncodingWindowsVietnamese: ::libc::c_uint = 1288;
pub const kCFStringEncodingWindowsKoreanJohab: ::libc::c_uint = 1296;
pub const kCFStringEncodingANSEL: ::libc::c_uint = 1537;
pub const kCFStringEncodingJIS_X0201_76: ::libc::c_uint = 1568;
pub const kCFStringEncodingJIS_X0208_83: ::libc::c_uint = 1569;
pub const kCFStringEncodingJIS_X0208_90: ::libc::c_uint = 1570;
pub const kCFStringEncodingJIS_X0212_90: ::libc::c_uint = 1571;
pub const kCFStringEncodingJIS_C6226_78: ::libc::c_uint = 1572;
pub const kCFStringEncodingShiftJIS_X0213: ::libc::c_uint = 1576;
pub const kCFStringEncodingShiftJIS_X0213_MenKuTen: ::libc::c_uint = 1577;
pub const kCFStringEncodingGB_2312_80: ::libc::c_uint = 1584;
pub const kCFStringEncodingGBK_95: ::libc::c_uint = 1585;
pub const kCFStringEncodingGB_18030_2000: ::libc::c_uint = 1586;
pub const kCFStringEncodingKSC_5601_87: ::libc::c_uint = 1600;
pub const kCFStringEncodingKSC_5601_92_Johab: ::libc::c_uint = 1601;
pub const kCFStringEncodingCNS_11643_92_P1: ::libc::c_uint = 1617;
pub const kCFStringEncodingCNS_11643_92_P2: ::libc::c_uint = 1618;
pub const kCFStringEncodingCNS_11643_92_P3: ::libc::c_uint = 1619;
pub const kCFStringEncodingISO_2022_JP: ::libc::c_uint = 2080;
pub const kCFStringEncodingISO_2022_JP_2: ::libc::c_uint = 2081;
pub const kCFStringEncodingISO_2022_JP_1: ::libc::c_uint = 2082;
pub const kCFStringEncodingISO_2022_JP_3: ::libc::c_uint = 2083;
pub const kCFStringEncodingISO_2022_CN: ::libc::c_uint = 2096;
pub const kCFStringEncodingISO_2022_CN_EXT: ::libc::c_uint = 2097;
pub const kCFStringEncodingISO_2022_KR: ::libc::c_uint = 2112;
pub const kCFStringEncodingEUC_JP: ::libc::c_uint = 2336;
pub const kCFStringEncodingEUC_CN: ::libc::c_uint = 2352;
pub const kCFStringEncodingEUC_TW: ::libc::c_uint = 2353;
pub const kCFStringEncodingEUC_KR: ::libc::c_uint = 2368;
pub const kCFStringEncodingShiftJIS: ::libc::c_uint = 2561;
pub const kCFStringEncodingKOI8_R: ::libc::c_uint = 2562;
pub const kCFStringEncodingBig5: ::libc::c_uint = 2563;
pub const kCFStringEncodingMacRomanLatin1: ::libc::c_uint = 2564;
pub const kCFStringEncodingHZ_GB_2312: ::libc::c_uint = 2565;
pub const kCFStringEncodingBig5_HKSCS_1999: ::libc::c_uint = 2566;
pub const kCFStringEncodingVISCII: ::libc::c_uint = 2567;
pub const kCFStringEncodingKOI8_U: ::libc::c_uint = 2568;
pub const kCFStringEncodingBig5_E: ::libc::c_uint = 2569;
pub const kCFStringEncodingNextStepJapanese: ::libc::c_uint = 2818;
pub const kCFStringEncodingEBCDIC_US: ::libc::c_uint = 3073;
pub const kCFStringEncodingEBCDIC_CP037: ::libc::c_uint = 3074;
pub const kCFStringEncodingUTF7: ::libc::c_uint = 67109120;
pub const kCFStringEncodingUTF7_IMAP: ::libc::c_uint = 2576;
pub const kCFStringEncodingShiftJIS_X0213_00: ::libc::c_uint = 1576;
pub type CFTreeRetainCallBack =
    ::std::option::Option<extern "C" fn(info: *const ::libc::c_void)
                              -> *const ::libc::c_void>;
pub type CFTreeReleaseCallBack =
    ::std::option::Option<extern "C" fn(info: *const ::libc::c_void) -> ()>;
pub type CFTreeCopyDescriptionCallBack =
    ::std::option::Option<extern "C" fn(info: *const ::libc::c_void)
                              -> CFStringRef>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed119 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: CFTreeRetainCallBack,
    pub release: CFTreeReleaseCallBack,
    pub copyDescription: CFTreeCopyDescriptionCallBack,
}
impl ::std::clone::Clone for Struct_Unnamed119 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed119 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFTreeContext = Struct_Unnamed119;
pub type CFTreeApplierFunction =
    ::std::option::Option<extern "C" fn(value: *const ::libc::c_void,
                                        context: *mut ::libc::c_void) -> ()>;
pub enum Struct___CFTree { }
pub type CFTreeRef = *mut Struct___CFTree;
pub type CFURLError = CFIndex;
pub type Enum_Unnamed120 = ::libc::c_int;
pub const kCFURLUnknownError: ::libc::c_int = -10;
pub const kCFURLUnknownSchemeError: ::libc::c_int = -11;
pub const kCFURLResourceNotFoundError: ::libc::c_int = -12;
pub const kCFURLResourceAccessViolationError: ::libc::c_int = -13;
pub const kCFURLRemoteHostUnavailableError: ::libc::c_int = -14;
pub const kCFURLImproperArgumentsError: ::libc::c_int = -15;
pub const kCFURLUnknownPropertyKeyError: ::libc::c_int = -16;
pub const kCFURLPropertyKeyUnavailableError: ::libc::c_int = -17;
pub const kCFURLTimeoutError: ::libc::c_int = -18;
pub enum Struct___CFUUID { }
pub type CFUUIDRef = *const Struct___CFUUID;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed121 {
    pub byte0: UInt8,
    pub byte1: UInt8,
    pub byte2: UInt8,
    pub byte3: UInt8,
    pub byte4: UInt8,
    pub byte5: UInt8,
    pub byte6: UInt8,
    pub byte7: UInt8,
    pub byte8: UInt8,
    pub byte9: UInt8,
    pub byte10: UInt8,
    pub byte11: UInt8,
    pub byte12: UInt8,
    pub byte13: UInt8,
    pub byte14: UInt8,
    pub byte15: UInt8,
}
impl ::std::clone::Clone for Struct_Unnamed121 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed121 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFUUIDBytes = Struct_Unnamed121;
pub enum Struct___CFBundle { }
pub type CFBundleRef = *mut Struct___CFBundle;
pub type CFPlugInRef = *mut Struct___CFBundle;
pub type Enum_Unnamed122 = ::libc::c_uint;
pub const kCFBundleExecutableArchitectureI386: ::libc::c_uint = 7;
pub const kCFBundleExecutableArchitecturePPC: ::libc::c_uint = 18;
pub const kCFBundleExecutableArchitectureX86_64: ::libc::c_uint = 16777223;
pub const kCFBundleExecutableArchitecturePPC64: ::libc::c_uint = 16777234;
pub type CFBundleRefNum = ::libc::c_int;
pub enum Struct___CFMessagePort { }
pub type CFMessagePortRef = *mut Struct___CFMessagePort;
pub type Enum_Unnamed123 = ::libc::c_int;
pub const kCFMessagePortSuccess: ::libc::c_int = 0;
pub const kCFMessagePortSendTimeout: ::libc::c_int = -1;
pub const kCFMessagePortReceiveTimeout: ::libc::c_int = -2;
pub const kCFMessagePortIsInvalid: ::libc::c_int = -3;
pub const kCFMessagePortTransportError: ::libc::c_int = -4;
pub const kCFMessagePortBecameInvalidError: ::libc::c_int = -5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed124 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: ::std::option::Option<extern "C" fn(info:
                                                        *const ::libc::c_void)
                                          -> *const ::libc::c_void>,
    pub release: ::std::option::Option<extern "C" fn(info:
                                                         *const ::libc::c_void)
                                           -> ()>,
    pub copyDescription: ::std::option::Option<extern "C" fn(info:
                                                                 *const ::libc::c_void)
                                                   -> CFStringRef>,
}
impl ::std::clone::Clone for Struct_Unnamed124 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed124 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFMessagePortContext = Struct_Unnamed124;
pub type CFMessagePortCallBack =
    ::std::option::Option<extern "C" fn(local: CFMessagePortRef,
                                        msgid: SInt32, data: CFDataRef,
                                        info: *mut ::libc::c_void)
                              -> CFDataRef>;
pub type CFMessagePortInvalidationCallBack =
    ::std::option::Option<extern "C" fn(ms: CFMessagePortRef,
                                        info: *mut ::libc::c_void) -> ()>;
pub type CFPlugInDynamicRegisterFunction =
    ::std::option::Option<extern "C" fn(plugIn: CFPlugInRef) -> ()>;
pub type CFPlugInUnloadFunction =
    ::std::option::Option<extern "C" fn(plugIn: CFPlugInRef) -> ()>;
pub type CFPlugInFactoryFunction =
    ::std::option::Option<extern "C" fn(allocator: CFAllocatorRef,
                                        typeUUID: CFUUIDRef)
                              -> *mut ::libc::c_void>;
pub enum Struct___CFPlugInInstance { }
pub type CFPlugInInstanceRef = *mut Struct___CFPlugInInstance;
pub type CFPlugInInstanceGetInterfaceFunction =
    ::std::option::Option<extern "C" fn(instance: CFPlugInInstanceRef,
                                        interfaceName: CFStringRef,
                                        ftbl: *mut *mut ::libc::c_void)
                              -> Boolean>;
pub type CFPlugInInstanceDeallocateInstanceDataFunction =
    ::std::option::Option<extern "C" fn(instanceData: *mut ::libc::c_void)
                              -> ()>;
pub enum Struct___CFAttributedString { }
pub type CFAttributedStringRef = *const Struct___CFAttributedString;
pub type CFMutableAttributedStringRef = *mut Struct___CFAttributedString;
pub enum Struct___CFNotificationCenter { }
pub type CFNotificationCenterRef = *mut Struct___CFNotificationCenter;
pub type CFNotificationCallback =
    ::std::option::Option<extern "C" fn(center: CFNotificationCenterRef,
                                        observer: *mut ::libc::c_void,
                                        name: CFStringRef,
                                        object: *const ::libc::c_void,
                                        userInfo: CFDictionaryRef) -> ()>;
pub type CFNotificationSuspensionBehavior = CFIndex;
pub type Enum_Unnamed125 = ::libc::c_uint;
pub const CFNotificationSuspensionBehaviorDrop: ::libc::c_uint = 1;
pub const CFNotificationSuspensionBehaviorCoalesce: ::libc::c_uint = 2;
pub const CFNotificationSuspensionBehaviorHold: ::libc::c_uint = 3;
pub const CFNotificationSuspensionBehaviorDeliverImmediately: ::libc::c_uint =
    4;
pub type Enum_Unnamed126 = ::libc::c_uint;
pub const kCFNotificationDeliverImmediately: ::libc::c_uint = 1;
pub const kCFNotificationPostToAllSessions: ::libc::c_uint = 2;
pub enum Struct___CFURLEnumerator { }
pub type CFURLEnumeratorRef = *const Struct___CFURLEnumerator;
pub type CFURLEnumeratorOptions = CFOptionFlags;
pub type Enum_Unnamed127 = ::libc::c_uint;
pub const kCFURLEnumeratorDefaultBehavior: ::libc::c_uint = 0;
pub const kCFURLEnumeratorDescendRecursively: ::libc::c_uint = 1;
pub const kCFURLEnumeratorSkipInvisibles: ::libc::c_uint = 2;
pub const kCFURLEnumeratorGenerateFileReferenceURLs: ::libc::c_uint = 4;
pub const kCFURLEnumeratorSkipPackageContents: ::libc::c_uint = 8;
pub const kCFURLEnumeratorIncludeDirectoriesPreOrder: ::libc::c_uint = 16;
pub const kCFURLEnumeratorIncludeDirectoriesPostOrder: ::libc::c_uint = 32;
pub type CFURLEnumeratorResult = CFIndex;
pub type Enum_Unnamed128 = ::libc::c_uint;
pub const kCFURLEnumeratorSuccess: ::libc::c_uint = 1;
pub const kCFURLEnumeratorEnd: ::libc::c_uint = 2;
pub const kCFURLEnumeratorError: ::libc::c_uint = 3;
pub const kCFURLEnumeratorDirectoryPostOrderSuccess: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed129 {
    pub g_guid: [::libc::c_uchar; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed129 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed129 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type guid_t = Struct_Unnamed129;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed130 {
    pub sid_kind: u_int8_t,
    pub sid_authcount: u_int8_t,
    pub sid_authority: [u_int8_t; 6usize],
    pub sid_authorities: [u_int32_t; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed130 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed130 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ntsid_t = Struct_Unnamed130;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_kauth_identity_extlookup {
    pub el_seqno: u_int32_t,
    pub el_result: u_int32_t,
    pub el_flags: u_int32_t,
    pub el_info_pid: __darwin_pid_t,
    pub el_extend: u_int64_t,
    pub el_info_reserved_1: u_int32_t,
    pub el_uid: uid_t,
    pub el_uguid: guid_t,
    pub el_uguid_valid: u_int32_t,
    pub el_usid: ntsid_t,
    pub el_usid_valid: u_int32_t,
    pub el_gid: gid_t,
    pub el_gguid: guid_t,
    pub el_gguid_valid: u_int32_t,
    pub el_gsid: ntsid_t,
    pub el_gsid_valid: u_int32_t,
    pub el_member_valid: u_int32_t,
    pub el_sup_grp_cnt: u_int32_t,
    pub el_sup_groups: [gid_t; 16usize],
}
impl ::std::clone::Clone for Struct_kauth_identity_extlookup {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_kauth_identity_extlookup {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_kauth_cache_sizes {
    pub kcs_group_size: u_int32_t,
    pub kcs_id_size: u_int32_t,
}
impl ::std::clone::Clone for Struct_kauth_cache_sizes {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_kauth_cache_sizes {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type kauth_ace_rights_t = u_int32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_kauth_ace {
    pub ace_applicable: guid_t,
    pub ace_flags: u_int32_t,
    pub ace_rights: kauth_ace_rights_t,
}
impl ::std::clone::Clone for Struct_kauth_ace {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_kauth_ace {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type kauth_ace_t = *mut Struct_kauth_ace;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_kauth_acl {
    pub acl_entrycount: u_int32_t,
    pub acl_flags: u_int32_t,
    pub acl_ace: [Struct_kauth_ace; 1usize],
}
impl ::std::clone::Clone for Struct_kauth_acl {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_kauth_acl {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type kauth_acl_t = *mut Struct_kauth_acl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_kauth_filesec {
    pub fsec_magic: u_int32_t,
    pub fsec_owner: guid_t,
    pub fsec_group: guid_t,
    pub fsec_acl: Struct_kauth_acl,
}
impl ::std::clone::Clone for Struct_kauth_filesec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_kauth_filesec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type kauth_filesec_t = *mut Struct_kauth_filesec;
pub type Enum_Unnamed131 = ::libc::c_uint;
pub const ACL_READ_DATA: ::libc::c_uint = 2;
pub const ACL_LIST_DIRECTORY: ::libc::c_uint = 2;
pub const ACL_WRITE_DATA: ::libc::c_uint = 4;
pub const ACL_ADD_FILE: ::libc::c_uint = 4;
pub const ACL_EXECUTE: ::libc::c_uint = 8;
pub const ACL_SEARCH: ::libc::c_uint = 8;
pub const ACL_DELETE: ::libc::c_uint = 16;
pub const ACL_APPEND_DATA: ::libc::c_uint = 32;
pub const ACL_ADD_SUBDIRECTORY: ::libc::c_uint = 32;
pub const ACL_DELETE_CHILD: ::libc::c_uint = 64;
pub const ACL_READ_ATTRIBUTES: ::libc::c_uint = 128;
pub const ACL_WRITE_ATTRIBUTES: ::libc::c_uint = 256;
pub const ACL_READ_EXTATTRIBUTES: ::libc::c_uint = 512;
pub const ACL_WRITE_EXTATTRIBUTES: ::libc::c_uint = 1024;
pub const ACL_READ_SECURITY: ::libc::c_uint = 2048;
pub const ACL_WRITE_SECURITY: ::libc::c_uint = 4096;
pub const ACL_CHANGE_OWNER: ::libc::c_uint = 8192;
pub const ACL_SYNCHRONIZE: ::libc::c_uint = 1048576;
pub type acl_perm_t = Enum_Unnamed131;
pub type Enum_Unnamed132 = ::libc::c_uint;
pub const ACL_UNDEFINED_TAG: ::libc::c_uint = 0;
pub const ACL_EXTENDED_ALLOW: ::libc::c_uint = 1;
pub const ACL_EXTENDED_DENY: ::libc::c_uint = 2;
pub type acl_tag_t = Enum_Unnamed132;
pub type Enum_Unnamed133 = ::libc::c_uint;
pub const ACL_TYPE_EXTENDED: ::libc::c_uint = 256;
pub const ACL_TYPE_ACCESS: ::libc::c_uint = 0;
pub const ACL_TYPE_DEFAULT: ::libc::c_uint = 1;
pub const ACL_TYPE_AFS: ::libc::c_uint = 2;
pub const ACL_TYPE_CODA: ::libc::c_uint = 3;
pub const ACL_TYPE_NTFS: ::libc::c_uint = 4;
pub const ACL_TYPE_NWFS: ::libc::c_uint = 5;
pub type acl_type_t = Enum_Unnamed133;
pub type Enum_Unnamed134 = ::libc::c_int;
pub const ACL_FIRST_ENTRY: ::libc::c_int = 0;
pub const ACL_NEXT_ENTRY: ::libc::c_int = -1;
pub const ACL_LAST_ENTRY: ::libc::c_int = -2;
pub type acl_entry_id_t = Enum_Unnamed134;
pub type Enum_Unnamed135 = ::libc::c_uint;
pub const ACL_FLAG_DEFER_INHERIT: ::libc::c_uint = 1;
pub const ACL_FLAG_NO_INHERIT: ::libc::c_uint = 131072;
pub const ACL_ENTRY_INHERITED: ::libc::c_uint = 16;
pub const ACL_ENTRY_FILE_INHERIT: ::libc::c_uint = 32;
pub const ACL_ENTRY_DIRECTORY_INHERIT: ::libc::c_uint = 64;
pub const ACL_ENTRY_LIMIT_INHERIT: ::libc::c_uint = 128;
pub const ACL_ENTRY_ONLY_INHERIT: ::libc::c_uint = 256;
pub type acl_flag_t = Enum_Unnamed135;
pub enum Struct__acl { }
pub enum Struct__acl_entry { }
pub enum Struct__acl_permset { }
pub enum Struct__acl_flagset { }
pub type acl_t = *mut Struct__acl;
pub type acl_entry_t = *mut Struct__acl_entry;
pub type acl_permset_t = *mut Struct__acl_permset;
pub type acl_flagset_t = *mut Struct__acl_flagset;
pub type acl_permset_mask_t = u_int64_t;
pub enum Struct___CFFileSecurity { }
pub type CFFileSecurityRef = *mut Struct___CFFileSecurity;
pub type CFFileSecurityClearOptions = CFOptionFlags;
pub type Enum_Unnamed136 = ::libc::c_uint;
pub const kCFFileSecurityClearOwner: ::libc::c_uint = 1;
pub const kCFFileSecurityClearGroup: ::libc::c_uint = 2;
pub const kCFFileSecurityClearMode: ::libc::c_uint = 4;
pub const kCFFileSecurityClearOwnerUUID: ::libc::c_uint = 8;
pub const kCFFileSecurityClearGroupUUID: ::libc::c_uint = 16;
pub const kCFFileSecurityClearAccessControlList: ::libc::c_uint = 32;
pub enum Struct___CFMachPort { }
pub type CFMachPortRef = *mut Struct___CFMachPort;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed137 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: ::std::option::Option<extern "C" fn(info:
                                                        *const ::libc::c_void)
                                          -> *const ::libc::c_void>,
    pub release: ::std::option::Option<extern "C" fn(info:
                                                         *const ::libc::c_void)
                                           -> ()>,
    pub copyDescription: ::std::option::Option<extern "C" fn(info:
                                                                 *const ::libc::c_void)
                                                   -> CFStringRef>,
}
impl ::std::clone::Clone for Struct_Unnamed137 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed137 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFMachPortContext = Struct_Unnamed137;
pub type CFMachPortCallBack =
    ::std::option::Option<extern "C" fn(port: CFMachPortRef,
                                        msg: *mut ::libc::c_void,
                                        size: CFIndex,
                                        info: *mut ::libc::c_void) -> ()>;
pub type CFMachPortInvalidationCallBack =
    ::std::option::Option<extern "C" fn(port: CFMachPortRef,
                                        info: *mut ::libc::c_void) -> ()>;
pub enum Struct___CFStringTokenizer { }
pub type CFStringTokenizerRef = *mut Struct___CFStringTokenizer;
pub type Enum_Unnamed138 = ::libc::c_uint;
pub const kCFStringTokenizerUnitWord: ::libc::c_uint = 0;
pub const kCFStringTokenizerUnitSentence: ::libc::c_uint = 1;
pub const kCFStringTokenizerUnitParagraph: ::libc::c_uint = 2;
pub const kCFStringTokenizerUnitLineBreak: ::libc::c_uint = 3;
pub const kCFStringTokenizerUnitWordBoundary: ::libc::c_uint = 4;
pub const kCFStringTokenizerAttributeLatinTranscription: ::libc::c_uint =
    65536;
pub const kCFStringTokenizerAttributeLanguage: ::libc::c_uint = 131072;
pub type CFStringTokenizerTokenType = CFOptionFlags;
pub type Enum_Unnamed139 = ::libc::c_uint;
pub const kCFStringTokenizerTokenNone: ::libc::c_uint = 0;
pub const kCFStringTokenizerTokenNormal: ::libc::c_uint = 1;
pub const kCFStringTokenizerTokenHasSubTokensMask: ::libc::c_uint = 2;
pub const kCFStringTokenizerTokenHasDerivedSubTokensMask: ::libc::c_uint = 4;
pub const kCFStringTokenizerTokenHasHasNumbersMask: ::libc::c_uint = 8;
pub const kCFStringTokenizerTokenHasNonLettersMask: ::libc::c_uint = 16;
pub const kCFStringTokenizerTokenIsCJWordMask: ::libc::c_uint = 32;
pub type CFFileDescriptorNativeDescriptor = ::libc::c_int;
pub enum Struct___CFFileDescriptor { }
pub type CFFileDescriptorRef = *mut Struct___CFFileDescriptor;
pub type Enum_Unnamed140 = ::libc::c_uint;
pub const kCFFileDescriptorReadCallBack: ::libc::c_uint = 1;
pub const kCFFileDescriptorWriteCallBack: ::libc::c_uint = 2;
pub type CFFileDescriptorCallBack =
    ::std::option::Option<extern "C" fn(f: CFFileDescriptorRef,
                                        callBackTypes: CFOptionFlags,
                                        info: *mut ::libc::c_void) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed141 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: ::std::option::Option<extern "C" fn(info: *mut ::libc::c_void)
                                          -> *mut ::libc::c_void>,
    pub release: ::std::option::Option<extern "C" fn(info:
                                                         *mut ::libc::c_void)
                                           -> ()>,
    pub copyDescription: ::std::option::Option<extern "C" fn(info:
                                                                 *mut ::libc::c_void)
                                                   -> CFStringRef>,
}
impl ::std::clone::Clone for Struct_Unnamed141 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed141 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFFileDescriptorContext = Struct_Unnamed141;
pub enum Struct___CFUserNotification { }
pub type CFUserNotificationRef = *mut Struct___CFUserNotification;
pub type CFUserNotificationCallBack =
    ::std::option::Option<extern "C" fn(userNotification:
                                            CFUserNotificationRef,
                                        responseFlags: CFOptionFlags) -> ()>;
pub type Enum_Unnamed142 = ::libc::c_uint;
pub const kCFUserNotificationStopAlertLevel: ::libc::c_uint = 0;
pub const kCFUserNotificationNoteAlertLevel: ::libc::c_uint = 1;
pub const kCFUserNotificationCautionAlertLevel: ::libc::c_uint = 2;
pub const kCFUserNotificationPlainAlertLevel: ::libc::c_uint = 3;
pub type Enum_Unnamed143 = ::libc::c_uint;
pub const kCFUserNotificationDefaultResponse: ::libc::c_uint = 0;
pub const kCFUserNotificationAlternateResponse: ::libc::c_uint = 1;
pub const kCFUserNotificationOtherResponse: ::libc::c_uint = 2;
pub const kCFUserNotificationCancelResponse: ::libc::c_uint = 3;
pub type Enum_Unnamed144 = ::libc::c_uint;
pub const kCFUserNotificationNoDefaultButtonFlag: ::libc::c_uint = 32;
pub const kCFUserNotificationUseRadioButtonsFlag: ::libc::c_uint = 64;
pub type Enum_Unnamed145 = ::libc::c_uint;
pub const kCFXMLNodeCurrentVersion: ::libc::c_uint = 1;
pub enum Struct___CFXMLNode { }
pub type CFXMLNodeRef = *const Struct___CFXMLNode;
pub type CFXMLTreeRef = CFTreeRef;
pub type CFXMLNodeTypeCode = CFIndex;
pub type Enum_Unnamed146 = ::libc::c_uint;
pub const kCFXMLNodeTypeDocument: ::libc::c_uint = 1;
pub const kCFXMLNodeTypeElement: ::libc::c_uint = 2;
pub const kCFXMLNodeTypeAttribute: ::libc::c_uint = 3;
pub const kCFXMLNodeTypeProcessingInstruction: ::libc::c_uint = 4;
pub const kCFXMLNodeTypeComment: ::libc::c_uint = 5;
pub const kCFXMLNodeTypeText: ::libc::c_uint = 6;
pub const kCFXMLNodeTypeCDATASection: ::libc::c_uint = 7;
pub const kCFXMLNodeTypeDocumentFragment: ::libc::c_uint = 8;
pub const kCFXMLNodeTypeEntity: ::libc::c_uint = 9;
pub const kCFXMLNodeTypeEntityReference: ::libc::c_uint = 10;
pub const kCFXMLNodeTypeDocumentType: ::libc::c_uint = 11;
pub const kCFXMLNodeTypeWhitespace: ::libc::c_uint = 12;
pub const kCFXMLNodeTypeNotation: ::libc::c_uint = 13;
pub const kCFXMLNodeTypeElementTypeDeclaration: ::libc::c_uint = 14;
pub const kCFXMLNodeTypeAttributeListDeclaration: ::libc::c_uint = 15;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed147 {
    pub attributes: CFDictionaryRef,
    pub attributeOrder: CFArrayRef,
    pub isEmpty: Boolean,
    pub _reserved: [::libc::c_char; 3usize],
}
impl ::std::clone::Clone for Struct_Unnamed147 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed147 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFXMLElementInfo = Struct_Unnamed147;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed148 {
    pub dataString: CFStringRef,
}
impl ::std::clone::Clone for Struct_Unnamed148 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed148 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFXMLProcessingInstructionInfo = Struct_Unnamed148;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed149 {
    pub sourceURL: CFURLRef,
    pub encoding: CFStringEncoding,
}
impl ::std::clone::Clone for Struct_Unnamed149 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed149 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFXMLDocumentInfo = Struct_Unnamed149;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed150 {
    pub systemID: CFURLRef,
    pub publicID: CFStringRef,
}
impl ::std::clone::Clone for Struct_Unnamed150 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed150 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFXMLExternalID = Struct_Unnamed150;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed151 {
    pub externalID: CFXMLExternalID,
}
impl ::std::clone::Clone for Struct_Unnamed151 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed151 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFXMLDocumentTypeInfo = Struct_Unnamed151;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed152 {
    pub externalID: CFXMLExternalID,
}
impl ::std::clone::Clone for Struct_Unnamed152 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed152 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFXMLNotationInfo = Struct_Unnamed152;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed153 {
    pub contentDescription: CFStringRef,
}
impl ::std::clone::Clone for Struct_Unnamed153 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed153 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFXMLElementTypeDeclarationInfo = Struct_Unnamed153;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed154 {
    pub attributeName: CFStringRef,
    pub typeString: CFStringRef,
    pub defaultString: CFStringRef,
}
impl ::std::clone::Clone for Struct_Unnamed154 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed154 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFXMLAttributeDeclarationInfo = Struct_Unnamed154;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed155 {
    pub numberOfAttributes: CFIndex,
    pub attributes: *mut CFXMLAttributeDeclarationInfo,
}
impl ::std::clone::Clone for Struct_Unnamed155 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed155 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFXMLAttributeListDeclarationInfo = Struct_Unnamed155;
pub type CFXMLEntityTypeCode = CFIndex;
pub type Enum_Unnamed156 = ::libc::c_uint;
pub const kCFXMLEntityTypeParameter: ::libc::c_uint = 0;
pub const kCFXMLEntityTypeParsedInternal: ::libc::c_uint = 1;
pub const kCFXMLEntityTypeParsedExternal: ::libc::c_uint = 2;
pub const kCFXMLEntityTypeUnparsed: ::libc::c_uint = 3;
pub const kCFXMLEntityTypeCharacter: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed157 {
    pub entityType: CFXMLEntityTypeCode,
    pub replacementText: CFStringRef,
    pub entityID: CFXMLExternalID,
    pub notationName: CFStringRef,
}
impl ::std::clone::Clone for Struct_Unnamed157 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed157 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFXMLEntityInfo = Struct_Unnamed157;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed158 {
    pub entityType: CFXMLEntityTypeCode,
}
impl ::std::clone::Clone for Struct_Unnamed158 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed158 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFXMLEntityReferenceInfo = Struct_Unnamed158;
pub enum Struct___CFXMLParser { }
pub type CFXMLParserRef = *mut Struct___CFXMLParser;
pub type CFXMLParserOptions = CFOptionFlags;
pub type Enum_Unnamed159 = ::libc::c_uint;
pub const kCFXMLParserValidateDocument: ::libc::c_uint = 1;
pub const kCFXMLParserSkipMetaData: ::libc::c_uint = 2;
pub const kCFXMLParserReplacePhysicalEntities: ::libc::c_uint = 4;
pub const kCFXMLParserSkipWhitespace: ::libc::c_uint = 8;
pub const kCFXMLParserResolveExternalEntities: ::libc::c_uint = 16;
pub const kCFXMLParserAddImpliedAttributes: ::libc::c_uint = 32;
pub const kCFXMLParserAllOptions: ::libc::c_uint = 16777215;
pub const kCFXMLParserNoOptions: ::libc::c_uint = 0;
pub type CFXMLParserStatusCode = CFIndex;
pub type Enum_Unnamed160 = ::libc::c_int;
pub const kCFXMLStatusParseNotBegun: ::libc::c_int = -2;
pub const kCFXMLStatusParseInProgress: ::libc::c_int = -1;
pub const kCFXMLStatusParseSuccessful: ::libc::c_int = 0;
pub const kCFXMLErrorUnexpectedEOF: ::libc::c_int = 1;
pub const kCFXMLErrorUnknownEncoding: ::libc::c_int = 2;
pub const kCFXMLErrorEncodingConversionFailure: ::libc::c_int = 3;
pub const kCFXMLErrorMalformedProcessingInstruction: ::libc::c_int = 4;
pub const kCFXMLErrorMalformedDTD: ::libc::c_int = 5;
pub const kCFXMLErrorMalformedName: ::libc::c_int = 6;
pub const kCFXMLErrorMalformedCDSect: ::libc::c_int = 7;
pub const kCFXMLErrorMalformedCloseTag: ::libc::c_int = 8;
pub const kCFXMLErrorMalformedStartTag: ::libc::c_int = 9;
pub const kCFXMLErrorMalformedDocument: ::libc::c_int = 10;
pub const kCFXMLErrorElementlessDocument: ::libc::c_int = 11;
pub const kCFXMLErrorMalformedComment: ::libc::c_int = 12;
pub const kCFXMLErrorMalformedCharacterReference: ::libc::c_int = 13;
pub const kCFXMLErrorMalformedParsedCharacterData: ::libc::c_int = 14;
pub const kCFXMLErrorNoData: ::libc::c_int = 15;
pub type CFXMLParserCreateXMLStructureCallBack =
    ::std::option::Option<extern "C" fn(parser: CFXMLParserRef,
                                        nodeDesc: CFXMLNodeRef,
                                        info: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
pub type CFXMLParserAddChildCallBack =
    ::std::option::Option<extern "C" fn(parser: CFXMLParserRef,
                                        parent: *mut ::libc::c_void,
                                        child: *mut ::libc::c_void,
                                        info: *mut ::libc::c_void) -> ()>;
pub type CFXMLParserEndXMLStructureCallBack =
    ::std::option::Option<extern "C" fn(parser: CFXMLParserRef,
                                        xmlType: *mut ::libc::c_void,
                                        info: *mut ::libc::c_void) -> ()>;
pub type CFXMLParserResolveExternalEntityCallBack =
    ::std::option::Option<extern "C" fn(parser: CFXMLParserRef,
                                        extID: *mut CFXMLExternalID,
                                        info: *mut ::libc::c_void)
                              -> CFDataRef>;
pub type CFXMLParserHandleErrorCallBack =
    ::std::option::Option<extern "C" fn(parser: CFXMLParserRef,
                                        error: CFXMLParserStatusCode,
                                        info: *mut ::libc::c_void)
                              -> Boolean>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed161 {
    pub version: CFIndex,
    pub createXMLStructure: CFXMLParserCreateXMLStructureCallBack,
    pub addChild: CFXMLParserAddChildCallBack,
    pub endXMLStructure: CFXMLParserEndXMLStructureCallBack,
    pub resolveExternalEntity: CFXMLParserResolveExternalEntityCallBack,
    pub handleError: CFXMLParserHandleErrorCallBack,
}
impl ::std::clone::Clone for Struct_Unnamed161 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed161 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFXMLParserCallBacks = Struct_Unnamed161;
pub type CFXMLParserRetainCallBack =
    ::std::option::Option<extern "C" fn(info: *const ::libc::c_void)
                              -> *const ::libc::c_void>;
pub type CFXMLParserReleaseCallBack =
    ::std::option::Option<extern "C" fn(info: *const ::libc::c_void) -> ()>;
pub type CFXMLParserCopyDescriptionCallBack =
    ::std::option::Option<extern "C" fn(info: *const ::libc::c_void)
                              -> CFStringRef>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed162 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: CFXMLParserRetainCallBack,
    pub release: CFXMLParserReleaseCallBack,
    pub copyDescription: CFXMLParserCopyDescriptionCallBack,
}
impl ::std::clone::Clone for Struct_Unnamed162 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed162 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CFXMLParserContext = Struct_Unnamed162;
pub type Enum_Unnamed163 = ::libc::c_uint;
pub const kAudioComponentFlag_Unsearchable: ::libc::c_uint = 1;
pub const kAudioComponentFlag_SandboxSafe: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioComponentDescription {
    pub componentType: OSType,
    pub componentSubType: OSType,
    pub componentManufacturer: OSType,
    pub componentFlags: UInt32,
    pub componentFlagsMask: UInt32,
}
impl ::std::clone::Clone for Struct_AudioComponentDescription {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioComponentDescription {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioComponentDescription = Struct_AudioComponentDescription;
pub enum Struct_OpaqueAudioComponent { }
pub type AudioComponent = *mut Struct_OpaqueAudioComponent;
pub enum Struct_ComponentInstanceRecord { }
pub type AudioComponentInstance = *mut Struct_ComponentInstanceRecord;
pub type AudioComponentMethod =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void, ...)
                              -> OSStatus>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioComponentPlugInInterface {
    pub Open: ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                                  mInstance:
                                                      AudioComponentInstance)
                                        -> OSStatus>,
    pub Close: ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void)
                                         -> OSStatus>,
    pub Lookup: ::std::option::Option<extern "C" fn(selector: SInt16)
                                          -> AudioComponentMethod>,
    pub reserved: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_AudioComponentPlugInInterface {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioComponentPlugInInterface {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioComponentPlugInInterface = Struct_AudioComponentPlugInInterface;
pub type AudioComponentFactoryFunction =
    ::std::option::Option<extern "C" fn(inDesc:
                                            *const AudioComponentDescription)
                              -> *mut AudioComponentPlugInInterface>;
pub type AudioUnit = AudioComponentInstance;
pub type Enum_Unnamed164 = ::libc::c_uint;
pub const kAudioUnitType_Output: ::libc::c_uint = 1635086197;
pub const kAudioUnitType_MusicDevice: ::libc::c_uint = 1635085685;
pub const kAudioUnitType_MusicEffect: ::libc::c_uint = 1635085670;
pub const kAudioUnitType_FormatConverter: ::libc::c_uint = 1635083875;
pub const kAudioUnitType_Effect: ::libc::c_uint = 1635083896;
pub const kAudioUnitType_Mixer: ::libc::c_uint = 1635085688;
pub const kAudioUnitType_Panner: ::libc::c_uint = 1635086446;
pub const kAudioUnitType_Generator: ::libc::c_uint = 1635084142;
pub const kAudioUnitType_OfflineEffect: ::libc::c_uint = 1635086188;
pub const kAudioUnitType_MIDIProcessor: ::libc::c_uint = 1635085673;
pub type Enum_Unnamed165 = ::libc::c_uint;
pub const kAudioUnitManufacturer_Apple: ::libc::c_uint = 1634758764;
pub type Enum_Unnamed166 = ::libc::c_uint;
pub const kAudioUnitSubType_GenericOutput: ::libc::c_uint = 1734700658;
pub const kAudioUnitSubType_HALOutput: ::libc::c_uint = 1634230636;
pub const kAudioUnitSubType_DefaultOutput: ::libc::c_uint = 1684366880;
pub const kAudioUnitSubType_SystemOutput: ::libc::c_uint = 1937339168;
pub const kAudioUnitSubType_VoiceProcessingIO: ::libc::c_uint = 1987078511;
pub type Enum_Unnamed167 = ::libc::c_uint;
pub const kAudioUnitSubType_DLSSynth: ::libc::c_uint = 1684828960;
pub const kAudioUnitSubType_Sampler: ::libc::c_uint = 1935764848;
pub const kAudioUnitSubType_MIDISynth: ::libc::c_uint = 1836284270;
pub type Enum_Unnamed168 = ::libc::c_uint;
pub const kAudioUnitSubType_AUConverter: ::libc::c_uint = 1668247158;
pub const kAudioUnitSubType_Varispeed: ::libc::c_uint = 1986097769;
pub const kAudioUnitSubType_DeferredRenderer: ::libc::c_uint = 1684366962;
pub const kAudioUnitSubType_Splitter: ::libc::c_uint = 1936747636;
pub const kAudioUnitSubType_Merger: ::libc::c_uint = 1835364967;
pub const kAudioUnitSubType_NewTimePitch: ::libc::c_uint = 1853191280;
pub const kAudioUnitSubType_AUiPodTimeOther: ::libc::c_uint = 1768977519;
pub const kAudioUnitSubType_RoundTripAAC: ::libc::c_uint = 1918984547;
pub const kAudioUnitSubType_TimePitch: ::libc::c_uint = 1953329268;
pub type Enum_Unnamed169 = ::libc::c_uint;
pub const kAudioUnitSubType_PeakLimiter: ::libc::c_uint = 1819112562;
pub const kAudioUnitSubType_DynamicsProcessor: ::libc::c_uint = 1684237680;
pub const kAudioUnitSubType_LowPassFilter: ::libc::c_uint = 1819304307;
pub const kAudioUnitSubType_HighPassFilter: ::libc::c_uint = 1752195443;
pub const kAudioUnitSubType_BandPassFilter: ::libc::c_uint = 1651532147;
pub const kAudioUnitSubType_HighShelfFilter: ::libc::c_uint = 1752393830;
pub const kAudioUnitSubType_LowShelfFilter: ::libc::c_uint = 1819502694;
pub const kAudioUnitSubType_ParametricEQ: ::libc::c_uint = 1886217585;
pub const kAudioUnitSubType_Distortion: ::libc::c_uint = 1684632436;
pub const kAudioUnitSubType_Delay: ::libc::c_uint = 1684368505;
pub const kAudioUnitSubType_SampleDelay: ::libc::c_uint = 1935961209;
pub const kAudioUnitSubType_GraphicEQ: ::libc::c_uint = 1735550321;
pub const kAudioUnitSubType_MultiBandCompressor: ::libc::c_uint = 1835232624;
pub const kAudioUnitSubType_MatrixReverb: ::libc::c_uint = 1836213622;
pub const kAudioUnitSubType_Pitch: ::libc::c_uint = 1953329268;
pub const kAudioUnitSubType_AUFilter: ::libc::c_uint = 1718185076;
pub const kAudioUnitSubType_NetSend: ::libc::c_uint = 1853058660;
pub const kAudioUnitSubType_RogerBeep: ::libc::c_uint = 1919903602;
pub const kAudioUnitSubType_NBandEQ: ::libc::c_uint = 1851942257;
pub type Enum_Unnamed170 = ::libc::c_uint;
pub const kAudioUnitSubType_MultiChannelMixer: ::libc::c_uint = 1835232632;
pub const kAudioUnitSubType_MatrixMixer: ::libc::c_uint = 1836608888;
pub const kAudioUnitSubType_SpatialMixer: ::libc::c_uint = 862217581;
pub const kAudioUnitSubType_StereoMixer: ::libc::c_uint = 1936554098;
pub const kAudioUnitSubType_3DMixer: ::libc::c_uint = 862219640;
pub type Enum_Unnamed171 = ::libc::c_uint;
pub const kAudioUnitSubType_SphericalHeadPanner: ::libc::c_uint = 1936746610;
pub const kAudioUnitSubType_VectorPanner: ::libc::c_uint = 1986158963;
pub const kAudioUnitSubType_SoundFieldPanner: ::libc::c_uint = 1634558569;
pub const kAudioUnitSubType_HRTFPanner: ::libc::c_uint = 1752331366;
pub type Enum_Unnamed172 = ::libc::c_uint;
pub const kAudioUnitSubType_NetReceive: ::libc::c_uint = 1852990326;
pub const kAudioUnitSubType_ScheduledSoundPlayer: ::libc::c_uint = 1936945260;
pub const kAudioUnitSubType_AudioFilePlayer: ::libc::c_uint = 1634103404;
pub type Enum_Unnamed173 = ::libc::c_uint;
pub const kAudioUnitRenderAction_PreRender: ::libc::c_uint = 4;
pub const kAudioUnitRenderAction_PostRender: ::libc::c_uint = 8;
pub const kAudioUnitRenderAction_OutputIsSilence: ::libc::c_uint = 16;
pub const kAudioOfflineUnitRenderAction_Preflight: ::libc::c_uint = 32;
pub const kAudioOfflineUnitRenderAction_Render: ::libc::c_uint = 64;
pub const kAudioOfflineUnitRenderAction_Complete: ::libc::c_uint = 128;
pub const kAudioUnitRenderAction_PostRenderError: ::libc::c_uint = 256;
pub const kAudioUnitRenderAction_DoNotCheckRenderArgs: ::libc::c_uint = 512;
pub type AudioUnitRenderActionFlags = UInt32;
pub type Enum_Unnamed174 = ::libc::c_int;
pub const kAudioUnitErr_InvalidProperty: ::libc::c_int = -10879;
pub const kAudioUnitErr_InvalidParameter: ::libc::c_int = -10878;
pub const kAudioUnitErr_InvalidElement: ::libc::c_int = -10877;
pub const kAudioUnitErr_NoConnection: ::libc::c_int = -10876;
pub const kAudioUnitErr_FailedInitialization: ::libc::c_int = -10875;
pub const kAudioUnitErr_TooManyFramesToProcess: ::libc::c_int = -10874;
pub const kAudioUnitErr_InvalidFile: ::libc::c_int = -10871;
pub const kAudioUnitErr_FormatNotSupported: ::libc::c_int = -10868;
pub const kAudioUnitErr_Uninitialized: ::libc::c_int = -10867;
pub const kAudioUnitErr_InvalidScope: ::libc::c_int = -10866;
pub const kAudioUnitErr_PropertyNotWritable: ::libc::c_int = -10865;
pub const kAudioUnitErr_CannotDoInCurrentContext: ::libc::c_int = -10863;
pub const kAudioUnitErr_InvalidPropertyValue: ::libc::c_int = -10851;
pub const kAudioUnitErr_PropertyNotInUse: ::libc::c_int = -10850;
pub const kAudioUnitErr_Initialized: ::libc::c_int = -10849;
pub const kAudioUnitErr_InvalidOfflineRender: ::libc::c_int = -10848;
pub const kAudioUnitErr_Unauthorized: ::libc::c_int = -10847;
pub type AudioUnitPropertyID = UInt32;
pub type AudioUnitScope = UInt32;
pub type AudioUnitElement = UInt32;
pub type AudioUnitParameterID = UInt32;
pub type AudioUnitParameterValue = Float32;
pub type Enum_Unnamed175 = ::libc::c_uint;
pub const kParameterEvent_Immediate: ::libc::c_uint = 1;
pub const kParameterEvent_Ramped: ::libc::c_uint = 2;
pub type AUParameterEventType = UInt32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitParameterEvent {
    pub scope: AudioUnitScope,
    pub element: AudioUnitElement,
    pub parameter: AudioUnitParameterID,
    pub eventType: AUParameterEventType,
    pub eventValues: Union_Unnamed176,
}
impl ::std::clone::Clone for Struct_AudioUnitParameterEvent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitParameterEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed176 {
    pub _bindgen_data_: [u32; 4usize],
}
impl Union_Unnamed176 {
    pub unsafe fn ramp(&mut self) -> *mut Struct_Unnamed177 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn immediate(&mut self) -> *mut Struct_Unnamed178 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed176 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed176 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed177 {
    pub startBufferOffset: SInt32,
    pub durationInFrames: UInt32,
    pub startValue: AudioUnitParameterValue,
    pub endValue: AudioUnitParameterValue,
}
impl ::std::clone::Clone for Struct_Unnamed177 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed177 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed178 {
    pub bufferOffset: UInt32,
    pub value: AudioUnitParameterValue,
}
impl ::std::clone::Clone for Struct_Unnamed178 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed178 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitParameterEvent = Struct_AudioUnitParameterEvent;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitParameter {
    pub mAudioUnit: AudioUnit,
    pub mParameterID: AudioUnitParameterID,
    pub mScope: AudioUnitScope,
    pub mElement: AudioUnitElement,
}
impl ::std::clone::Clone for Struct_AudioUnitParameter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitParameter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitParameter = Struct_AudioUnitParameter;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitProperty {
    pub mAudioUnit: AudioUnit,
    pub mPropertyID: AudioUnitPropertyID,
    pub mScope: AudioUnitScope,
    pub mElement: AudioUnitElement,
}
impl ::std::clone::Clone for Struct_AudioUnitProperty {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitProperty {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitProperty = Struct_AudioUnitProperty;
pub type AURenderCallback =
    ::std::option::Option<extern "C" fn(inRefCon: *mut ::libc::c_void,
                                        ioActionFlags:
                                            *mut AudioUnitRenderActionFlags,
                                        inTimeStamp: *const AudioTimeStamp,
                                        inBusNumber: UInt32,
                                        inNumberFrames: UInt32,
                                        ioData: *mut AudioBufferList)
                              -> OSStatus>;
pub type AudioUnitPropertyListenerProc =
    ::std::option::Option<extern "C" fn(inRefCon: *mut ::libc::c_void,
                                        inUnit: AudioUnit,
                                        inID: AudioUnitPropertyID,
                                        inScope: AudioUnitScope,
                                        inElement: AudioUnitElement) -> ()>;
pub type AUInputSamplesInOutputCallback =
    ::std::option::Option<extern "C" fn(inRefCon: *mut ::libc::c_void,
                                        inOutputTimeStamp:
                                            *const AudioTimeStamp,
                                        inInputSample: Float64,
                                        inNumberInputSamples: Float64) -> ()>;
pub type Enum_Unnamed179 = ::libc::c_uint;
pub const kAudioUnitRange: ::libc::c_uint = 0;
pub const kAudioUnitInitializeSelect: ::libc::c_uint = 1;
pub const kAudioUnitUninitializeSelect: ::libc::c_uint = 2;
pub const kAudioUnitGetPropertyInfoSelect: ::libc::c_uint = 3;
pub const kAudioUnitGetPropertySelect: ::libc::c_uint = 4;
pub const kAudioUnitSetPropertySelect: ::libc::c_uint = 5;
pub const kAudioUnitAddPropertyListenerSelect: ::libc::c_uint = 10;
pub const kAudioUnitRemovePropertyListenerSelect: ::libc::c_uint = 11;
pub const kAudioUnitRemovePropertyListenerWithUserDataSelect: ::libc::c_uint =
    18;
pub const kAudioUnitAddRenderNotifySelect: ::libc::c_uint = 15;
pub const kAudioUnitRemoveRenderNotifySelect: ::libc::c_uint = 16;
pub const kAudioUnitGetParameterSelect: ::libc::c_uint = 6;
pub const kAudioUnitSetParameterSelect: ::libc::c_uint = 7;
pub const kAudioUnitScheduleParametersSelect: ::libc::c_uint = 17;
pub const kAudioUnitRenderSelect: ::libc::c_uint = 14;
pub const kAudioUnitResetSelect: ::libc::c_uint = 9;
pub const kAudioUnitComplexRenderSelect: ::libc::c_uint = 19;
pub const kAudioUnitProcessSelect: ::libc::c_uint = 20;
pub const kAudioUnitProcessMultipleSelect: ::libc::c_uint = 21;
pub type AudioUnitInitializeProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioUnitUninitializeProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioUnitGetPropertyInfoProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        prop: AudioUnitPropertyID,
                                        scope: AudioUnitScope,
                                        elem: AudioUnitElement,
                                        outDataSize: *mut UInt32,
                                        outWritable: *mut Boolean)
                              -> OSStatus>;
pub type AudioUnitGetPropertyProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inID: AudioUnitPropertyID,
                                        inScope: AudioUnitScope,
                                        inElement: AudioUnitElement,
                                        outData: *mut ::libc::c_void,
                                        ioDataSize: *mut UInt32) -> OSStatus>;
pub type AudioUnitSetPropertyProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inID: AudioUnitPropertyID,
                                        inScope: AudioUnitScope,
                                        inElement: AudioUnitElement,
                                        inData: *const ::libc::c_void,
                                        inDataSize: UInt32) -> OSStatus>;
pub type AudioUnitAddPropertyListenerProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        prop: AudioUnitPropertyID,
                                        _proc: AudioUnitPropertyListenerProc,
                                        userData: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioUnitRemovePropertyListenerProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        prop: AudioUnitPropertyID,
                                        _proc: AudioUnitPropertyListenerProc)
                              -> OSStatus>;
pub type AudioUnitRemovePropertyListenerWithUserDataProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        prop: AudioUnitPropertyID,
                                        _proc: AudioUnitPropertyListenerProc,
                                        userData: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioUnitAddRenderNotifyProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        _proc: AURenderCallback,
                                        userData: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioUnitRemoveRenderNotifyProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        _proc: AURenderCallback,
                                        userData: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioUnitScheduleParametersProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        events:
                                            *const AudioUnitParameterEvent,
                                        numEvents: UInt32) -> OSStatus>;
pub type AudioUnitResetProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inScope: AudioUnitScope,
                                        inElement: AudioUnitElement)
                              -> OSStatus>;
pub type AudioUnitComplexRenderProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        ioActionFlags:
                                            *mut AudioUnitRenderActionFlags,
                                        inTimeStamp: *const AudioTimeStamp,
                                        inOutputBusNumber: UInt32,
                                        inNumberOfPackets: UInt32,
                                        outNumberOfPackets: *mut UInt32,
                                        outPacketDescriptions:
                                            *mut AudioStreamPacketDescription,
                                        ioData: *mut AudioBufferList,
                                        outMetadata: *mut ::libc::c_void,
                                        outMetadataByteSize: *mut UInt32)
                              -> OSStatus>;
pub type AudioUnitProcessProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        ioActionFlags:
                                            *mut AudioUnitRenderActionFlags,
                                        inTimeStamp: *const AudioTimeStamp,
                                        inNumberFrames: UInt32,
                                        ioData: *mut AudioBufferList)
                              -> OSStatus>;
pub type AudioUnitProcessMultipleProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        ioActionFlags:
                                            *mut AudioUnitRenderActionFlags,
                                        inTimeStamp: *const AudioTimeStamp,
                                        inNumberFrames: UInt32,
                                        inNumberInputBufferLists: UInt32,
                                        inInputBufferLists:
                                            *mut *const AudioBufferList,
                                        inNumberOutputBufferLists: UInt32,
                                        ioOutputBufferLists:
                                            *mut *mut AudioBufferList)
                              -> OSStatus>;
pub type AudioUnitGetParameterProc =
    ::std::option::Option<extern "C" fn(inComponentStorage:
                                            *mut ::libc::c_void,
                                        inID: AudioUnitParameterID,
                                        inScope: AudioUnitScope,
                                        inElement: AudioUnitElement,
                                        outValue:
                                            *mut AudioUnitParameterValue)
                              -> OSStatus>;
pub type AudioUnitSetParameterProc =
    ::std::option::Option<extern "C" fn(inComponentStorage:
                                            *mut ::libc::c_void,
                                        inID: AudioUnitParameterID,
                                        inScope: AudioUnitScope,
                                        inElement: AudioUnitElement,
                                        inValue: AudioUnitParameterValue,
                                        inBufferOffsetInFrames: UInt32)
                              -> OSStatus>;
pub type AudioUnitRenderProc =
    ::std::option::Option<extern "C" fn(inComponentStorage:
                                            *mut ::libc::c_void,
                                        ioActionFlags:
                                            *mut AudioUnitRenderActionFlags,
                                        inTimeStamp: *const AudioTimeStamp,
                                        inOutputBusNumber: UInt32,
                                        inNumberFrames: UInt32,
                                        ioData: *mut AudioBufferList)
                              -> OSStatus>;
pub type Enum_Unnamed180 = ::libc::c_int;
pub const kAudioUnitErr_IllegalInstrument: ::libc::c_int = -10873;
pub const kAudioUnitErr_InstrumentTypeNotFound: ::libc::c_int = -10872;
pub const kAudioUnitErr_UnknownFileType: ::libc::c_int = -10870;
pub const kAudioUnitErr_FileNotSpecified: ::libc::c_int = -10869;
pub type Enum_Unnamed181 = ::libc::c_uint;
pub const kAudioOutputUnitRange: ::libc::c_uint = 512;
pub const kAudioOutputUnitStartSelect: ::libc::c_uint = 513;
pub const kAudioOutputUnitStopSelect: ::libc::c_uint = 514;
pub type AudioOutputUnitStartProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioOutputUnitStopProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void)
                              -> OSStatus>;
pub type Enum_Unnamed182 = ::libc::c_uint;
pub const kAudioUnitScope_Global: ::libc::c_uint = 0;
pub const kAudioUnitScope_Input: ::libc::c_uint = 1;
pub const kAudioUnitScope_Output: ::libc::c_uint = 2;
pub const kAudioUnitScope_Group: ::libc::c_uint = 3;
pub const kAudioUnitScope_Part: ::libc::c_uint = 4;
pub const kAudioUnitScope_Note: ::libc::c_uint = 5;
pub const kAudioUnitScope_Layer: ::libc::c_uint = 6;
pub const kAudioUnitScope_LayerItem: ::libc::c_uint = 7;
pub type Enum_Unnamed183 = ::libc::c_uint;
pub const kAudioUnitProperty_ClassInfo: ::libc::c_uint = 0;
pub const kAudioUnitProperty_MakeConnection: ::libc::c_uint = 1;
pub const kAudioUnitProperty_SampleRate: ::libc::c_uint = 2;
pub const kAudioUnitProperty_ParameterList: ::libc::c_uint = 3;
pub const kAudioUnitProperty_ParameterInfo: ::libc::c_uint = 4;
pub const kAudioUnitProperty_CPULoad: ::libc::c_uint = 6;
pub const kAudioUnitProperty_StreamFormat: ::libc::c_uint = 8;
pub const kAudioUnitProperty_ElementCount: ::libc::c_uint = 11;
pub const kAudioUnitProperty_Latency: ::libc::c_uint = 12;
pub const kAudioUnitProperty_SupportedNumChannels: ::libc::c_uint = 13;
pub const kAudioUnitProperty_MaximumFramesPerSlice: ::libc::c_uint = 14;
pub const kAudioUnitProperty_ParameterValueStrings: ::libc::c_uint = 16;
pub const kAudioUnitProperty_AudioChannelLayout: ::libc::c_uint = 19;
pub const kAudioUnitProperty_TailTime: ::libc::c_uint = 20;
pub const kAudioUnitProperty_BypassEffect: ::libc::c_uint = 21;
pub const kAudioUnitProperty_LastRenderError: ::libc::c_uint = 22;
pub const kAudioUnitProperty_SetRenderCallback: ::libc::c_uint = 23;
pub const kAudioUnitProperty_FactoryPresets: ::libc::c_uint = 24;
pub const kAudioUnitProperty_RenderQuality: ::libc::c_uint = 26;
pub const kAudioUnitProperty_HostCallbacks: ::libc::c_uint = 27;
pub const kAudioUnitProperty_InPlaceProcessing: ::libc::c_uint = 29;
pub const kAudioUnitProperty_ElementName: ::libc::c_uint = 30;
pub const kAudioUnitProperty_SupportedChannelLayoutTags: ::libc::c_uint = 32;
pub const kAudioUnitProperty_PresentPreset: ::libc::c_uint = 36;
pub const kAudioUnitProperty_DependentParameters: ::libc::c_uint = 45;
pub const kAudioUnitProperty_InputSamplesInOutput: ::libc::c_uint = 49;
pub const kAudioUnitProperty_ShouldAllocateBuffer: ::libc::c_uint = 51;
pub const kAudioUnitProperty_FrequencyResponse: ::libc::c_uint = 52;
pub const kAudioUnitProperty_ParameterHistoryInfo: ::libc::c_uint = 53;
pub const kAudioUnitProperty_NickName: ::libc::c_uint = 54;
pub const kAudioUnitProperty_OfflineRender: ::libc::c_uint = 37;
pub const kAudioUnitProperty_ParameterIDName: ::libc::c_uint = 34;
pub const kAudioUnitProperty_ParameterStringFromValue: ::libc::c_uint = 33;
pub const kAudioUnitProperty_ParameterValueFromString: ::libc::c_uint = 38;
pub const kAudioUnitProperty_FastDispatch: ::libc::c_uint = 5;
pub const kAudioUnitProperty_SetExternalBuffer: ::libc::c_uint = 15;
pub const kAudioUnitProperty_GetUIComponentList: ::libc::c_uint = 18;
pub const kAudioUnitProperty_ContextName: ::libc::c_uint = 25;
pub const kAudioUnitProperty_CocoaUI: ::libc::c_uint = 31;
pub const kAudioUnitProperty_ParameterClumpName: ::libc::c_uint = 35;
pub const kAudioUnitProperty_IconLocation: ::libc::c_uint = 39;
pub const kAudioUnitProperty_PresentationLatency: ::libc::c_uint = 40;
pub const kAudioUnitProperty_AUHostIdentifier: ::libc::c_uint = 46;
pub const kAudioUnitProperty_MIDIOutputCallbackInfo: ::libc::c_uint = 47;
pub const kAudioUnitProperty_MIDIOutputCallback: ::libc::c_uint = 48;
pub const kAudioUnitProperty_ClassInfoFromDocument: ::libc::c_uint = 50;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitConnection {
    pub sourceAudioUnit: AudioUnit,
    pub sourceOutputNumber: UInt32,
    pub destInputNumber: UInt32,
}
impl ::std::clone::Clone for Struct_AudioUnitConnection {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitConnection {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitConnection = Struct_AudioUnitConnection;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AUChannelInfo {
    pub inChannels: SInt16,
    pub outChannels: SInt16,
}
impl ::std::clone::Clone for Struct_AUChannelInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AUChannelInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AUChannelInfo = Struct_AUChannelInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitExternalBuffer {
    pub buffer: *mut Byte,
    pub size: UInt32,
}
impl ::std::clone::Clone for Struct_AudioUnitExternalBuffer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitExternalBuffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitExternalBuffer = Struct_AudioUnitExternalBuffer;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AURenderCallbackStruct {
    pub inputProc: AURenderCallback,
    pub inputProcRefCon: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_AURenderCallbackStruct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AURenderCallbackStruct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AURenderCallbackStruct = Struct_AURenderCallbackStruct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AUPreset {
    pub presetNumber: SInt32,
    pub presetName: CFStringRef,
}
impl ::std::clone::Clone for Struct_AUPreset {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AUPreset {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AUPreset = Struct_AUPreset;
pub type Enum_Unnamed184 = ::libc::c_uint;
pub const kRenderQuality_Max: ::libc::c_uint = 127;
pub const kRenderQuality_High: ::libc::c_uint = 96;
pub const kRenderQuality_Medium: ::libc::c_uint = 64;
pub const kRenderQuality_Low: ::libc::c_uint = 32;
pub const kRenderQuality_Min: ::libc::c_uint = 0;
pub type Enum_Unnamed185 = ::libc::c_uint;
pub const kNumberOfResponseFrequencies: ::libc::c_uint = 1024;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitFrequencyResponseBin {
    pub mFrequency: Float64,
    pub mMagnitude: Float64,
}
impl ::std::clone::Clone for Struct_AudioUnitFrequencyResponseBin {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitFrequencyResponseBin {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitFrequencyResponseBin = Struct_AudioUnitFrequencyResponseBin;
pub type HostCallback_GetBeatAndTempo =
    ::std::option::Option<extern "C" fn(inHostUserData: *mut ::libc::c_void,
                                        outCurrentBeat: *mut Float64,
                                        outCurrentTempo: *mut Float64)
                              -> OSStatus>;
pub type HostCallback_GetMusicalTimeLocation =
    ::std::option::Option<extern "C" fn(inHostUserData: *mut ::libc::c_void,
                                        outDeltaSampleOffsetToNextBeat:
                                            *mut UInt32,
                                        outTimeSig_Numerator: *mut Float32,
                                        outTimeSig_Denominator: *mut UInt32,
                                        outCurrentMeasureDownBeat:
                                            *mut Float64) -> OSStatus>;
pub type HostCallback_GetTransportState =
    ::std::option::Option<extern "C" fn(inHostUserData: *mut ::libc::c_void,
                                        outIsPlaying: *mut Boolean,
                                        outTransportStateChanged:
                                            *mut Boolean,
                                        outCurrentSampleInTimeLine:
                                            *mut Float64,
                                        outIsCycling: *mut Boolean,
                                        outCycleStartBeat: *mut Float64,
                                        outCycleEndBeat: *mut Float64)
                              -> OSStatus>;
pub type HostCallback_GetTransportState2 =
    ::std::option::Option<extern "C" fn(inHostUserData: *mut ::libc::c_void,
                                        outIsPlaying: *mut Boolean,
                                        outIsRecording: *mut Boolean,
                                        outTransportStateChanged:
                                            *mut Boolean,
                                        outCurrentSampleInTimeLine:
                                            *mut Float64,
                                        outIsCycling: *mut Boolean,
                                        outCycleStartBeat: *mut Float64,
                                        outCycleEndBeat: *mut Float64)
                              -> OSStatus>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_HostCallbackInfo {
    pub hostUserData: *mut ::libc::c_void,
    pub beatAndTempoProc: HostCallback_GetBeatAndTempo,
    pub musicalTimeLocationProc: HostCallback_GetMusicalTimeLocation,
    pub transportStateProc: HostCallback_GetTransportState,
    pub transportStateProc2: HostCallback_GetTransportState2,
}
impl ::std::clone::Clone for Struct_HostCallbackInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_HostCallbackInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HostCallbackInfo = Struct_HostCallbackInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AUDependentParameter {
    pub mScope: AudioUnitScope,
    pub mParameterID: AudioUnitParameterID,
}
impl ::std::clone::Clone for Struct_AUDependentParameter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AUDependentParameter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AUDependentParameter = Struct_AUDependentParameter;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitCocoaViewInfo {
    pub mCocoaAUViewBundleLocation: CFURLRef,
    pub mCocoaAUViewClass: [CFStringRef; 1usize],
}
impl ::std::clone::Clone for Struct_AudioUnitCocoaViewInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitCocoaViewInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitCocoaViewInfo = Struct_AudioUnitCocoaViewInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AUHostVersionIdentifier {
    pub hostName: CFStringRef,
    pub hostVersion: UInt32,
}
impl ::std::clone::Clone for Struct_AUHostVersionIdentifier {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AUHostVersionIdentifier {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AUHostVersionIdentifier = Struct_AUHostVersionIdentifier;
pub type AUMIDIOutputCallback =
    ::std::option::Option<extern "C" fn(userData: *mut ::libc::c_void,
                                        timeStamp: *const AudioTimeStamp,
                                        midiOutNum: UInt32,
                                        pktlist: *const Struct_MIDIPacketList)
                              -> OSStatus>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AUMIDIOutputCallbackStruct {
    pub midiOutputCallback: AUMIDIOutputCallback,
    pub userData: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_AUMIDIOutputCallbackStruct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AUMIDIOutputCallbackStruct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AUMIDIOutputCallbackStruct = Struct_AUMIDIOutputCallbackStruct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AUInputSamplesInOutputCallbackStruct {
    pub inputToOutputCallback: AUInputSamplesInOutputCallback,
    pub userData: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_AUInputSamplesInOutputCallbackStruct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AUInputSamplesInOutputCallbackStruct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AUInputSamplesInOutputCallbackStruct =
    Struct_AUInputSamplesInOutputCallbackStruct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitParameterHistoryInfo {
    pub updatesPerSecond: Float32,
    pub historyDurationInSeconds: Float32,
}
impl ::std::clone::Clone for Struct_AudioUnitParameterHistoryInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitParameterHistoryInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitParameterHistoryInfo = Struct_AudioUnitParameterHistoryInfo;
pub type Enum_Unnamed186 = ::libc::c_uint;
pub const kAudioUnitParameterUnit_Generic: ::libc::c_uint = 0;
pub const kAudioUnitParameterUnit_Indexed: ::libc::c_uint = 1;
pub const kAudioUnitParameterUnit_Boolean: ::libc::c_uint = 2;
pub const kAudioUnitParameterUnit_Percent: ::libc::c_uint = 3;
pub const kAudioUnitParameterUnit_Seconds: ::libc::c_uint = 4;
pub const kAudioUnitParameterUnit_SampleFrames: ::libc::c_uint = 5;
pub const kAudioUnitParameterUnit_Phase: ::libc::c_uint = 6;
pub const kAudioUnitParameterUnit_Rate: ::libc::c_uint = 7;
pub const kAudioUnitParameterUnit_Hertz: ::libc::c_uint = 8;
pub const kAudioUnitParameterUnit_Cents: ::libc::c_uint = 9;
pub const kAudioUnitParameterUnit_RelativeSemiTones: ::libc::c_uint = 10;
pub const kAudioUnitParameterUnit_MIDINoteNumber: ::libc::c_uint = 11;
pub const kAudioUnitParameterUnit_MIDIController: ::libc::c_uint = 12;
pub const kAudioUnitParameterUnit_Decibels: ::libc::c_uint = 13;
pub const kAudioUnitParameterUnit_LinearGain: ::libc::c_uint = 14;
pub const kAudioUnitParameterUnit_Degrees: ::libc::c_uint = 15;
pub const kAudioUnitParameterUnit_EqualPowerCrossfade: ::libc::c_uint = 16;
pub const kAudioUnitParameterUnit_MixerFaderCurve1: ::libc::c_uint = 17;
pub const kAudioUnitParameterUnit_Pan: ::libc::c_uint = 18;
pub const kAudioUnitParameterUnit_Meters: ::libc::c_uint = 19;
pub const kAudioUnitParameterUnit_AbsoluteCents: ::libc::c_uint = 20;
pub const kAudioUnitParameterUnit_Octaves: ::libc::c_uint = 21;
pub const kAudioUnitParameterUnit_BPM: ::libc::c_uint = 22;
pub const kAudioUnitParameterUnit_Beats: ::libc::c_uint = 23;
pub const kAudioUnitParameterUnit_Milliseconds: ::libc::c_uint = 24;
pub const kAudioUnitParameterUnit_Ratio: ::libc::c_uint = 25;
pub const kAudioUnitParameterUnit_CustomUnit: ::libc::c_uint = 26;
pub type AudioUnitParameterUnit = UInt32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitParameterInfo {
    pub name: [::libc::c_char; 52usize],
    pub unitName: CFStringRef,
    pub clumpID: UInt32,
    pub cfNameString: CFStringRef,
    pub unit: AudioUnitParameterUnit,
    pub minValue: AudioUnitParameterValue,
    pub maxValue: AudioUnitParameterValue,
    pub defaultValue: AudioUnitParameterValue,
    pub flags: UInt32,
}
impl ::std::clone::Clone for Struct_AudioUnitParameterInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitParameterInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitParameterInfo = Struct_AudioUnitParameterInfo;
pub type Enum_Unnamed187 = ::libc::c_uint;
pub const kAudioUnitParameterFlag_CFNameRelease: ::libc::c_uint = 16;
pub const kAudioUnitParameterFlag_OmitFromPresets: ::libc::c_uint = 8192;
pub const kAudioUnitParameterFlag_PlotHistory: ::libc::c_uint = 16384;
pub const kAudioUnitParameterFlag_MeterReadOnly: ::libc::c_uint = 32768;
pub const kAudioUnitParameterFlag_DisplayMask: ::libc::c_uint = 4653056;
pub const kAudioUnitParameterFlag_DisplaySquareRoot: ::libc::c_uint = 65536;
pub const kAudioUnitParameterFlag_DisplaySquared: ::libc::c_uint = 131072;
pub const kAudioUnitParameterFlag_DisplayCubed: ::libc::c_uint = 196608;
pub const kAudioUnitParameterFlag_DisplayCubeRoot: ::libc::c_uint = 262144;
pub const kAudioUnitParameterFlag_DisplayExponential: ::libc::c_uint = 327680;
pub const kAudioUnitParameterFlag_HasClump: ::libc::c_uint = 1048576;
pub const kAudioUnitParameterFlag_ValuesHaveStrings: ::libc::c_uint = 2097152;
pub const kAudioUnitParameterFlag_DisplayLogarithmic: ::libc::c_uint =
    4194304;
pub const kAudioUnitParameterFlag_IsHighResolution: ::libc::c_uint = 8388608;
pub const kAudioUnitParameterFlag_NonRealTime: ::libc::c_uint = 16777216;
pub const kAudioUnitParameterFlag_CanRamp: ::libc::c_uint = 33554432;
pub const kAudioUnitParameterFlag_ExpertMode: ::libc::c_uint = 67108864;
pub const kAudioUnitParameterFlag_HasCFNameString: ::libc::c_uint = 134217728;
pub const kAudioUnitParameterFlag_IsGlobalMeta: ::libc::c_uint = 268435456;
pub const kAudioUnitParameterFlag_IsElementMeta: ::libc::c_uint = 536870912;
pub const kAudioUnitParameterFlag_IsReadable: ::libc::c_uint = 1073741824;
pub const kAudioUnitParameterFlag_IsWritable: ::libc::c_uint = ::std::u32::MAX - 2147483648;
pub type Enum_Unnamed188 = ::libc::c_uint;
pub const kAudioUnitClumpID_System: ::libc::c_uint = 0;
pub type Enum_Unnamed189 = ::libc::c_int;
pub const kAudioUnitParameterName_Full: ::libc::c_int = -1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitParameterNameInfo {
    pub inID: AudioUnitParameterID,
    pub inDesiredLength: SInt32,
    pub outName: CFStringRef,
}
impl ::std::clone::Clone for Struct_AudioUnitParameterNameInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitParameterNameInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitParameterIDName = Struct_AudioUnitParameterNameInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitParameterStringFromValue {
    pub inParamID: AudioUnitParameterID,
    pub inValue: *const AudioUnitParameterValue,
    pub outString: CFStringRef,
}
impl ::std::clone::Clone for Struct_AudioUnitParameterStringFromValue {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitParameterStringFromValue {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitParameterStringFromValue =
    Struct_AudioUnitParameterStringFromValue;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitParameterValueFromString {
    pub inParamID: AudioUnitParameterID,
    pub inString: CFStringRef,
    pub outValue: AudioUnitParameterValue,
}
impl ::std::clone::Clone for Struct_AudioUnitParameterValueFromString {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitParameterValueFromString {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitParameterValueFromString =
    Struct_AudioUnitParameterValueFromString;
pub type Enum_Unnamed190 = ::libc::c_uint;
pub const kAudioOutputUnitProperty_IsRunning: ::libc::c_uint = 2001;
pub type Enum_Unnamed191 = ::libc::c_uint;
pub const kAudioUnitProperty_AllParameterMIDIMappings: ::libc::c_uint = 41;
pub const kAudioUnitProperty_AddParameterMIDIMapping: ::libc::c_uint = 42;
pub const kAudioUnitProperty_RemoveParameterMIDIMapping: ::libc::c_uint = 43;
pub const kAudioUnitProperty_HotMapParameterMIDIMapping: ::libc::c_uint = 44;
pub type Enum_Unnamed192 = ::libc::c_uint;
pub const kAUParameterMIDIMapping_AnyChannelFlag: ::libc::c_uint = 1;
pub const kAUParameterMIDIMapping_AnyNoteFlag: ::libc::c_uint = 2;
pub const kAUParameterMIDIMapping_SubRange: ::libc::c_uint = 4;
pub const kAUParameterMIDIMapping_Toggle: ::libc::c_uint = 8;
pub const kAUParameterMIDIMapping_Bipolar: ::libc::c_uint = 16;
pub const kAUParameterMIDIMapping_Bipolar_On: ::libc::c_uint = 32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AUParameterMIDIMapping {
    pub mScope: AudioUnitScope,
    pub mElement: AudioUnitElement,
    pub mParameterID: AudioUnitParameterID,
    pub mFlags: UInt32,
    pub mSubRangeMin: AudioUnitParameterValue,
    pub mSubRangeMax: AudioUnitParameterValue,
    pub mStatus: UInt8,
    pub mData1: UInt8,
    pub reserved1: UInt8,
    pub reserved2: UInt8,
    pub reserved3: UInt32,
}
impl ::std::clone::Clone for Struct_AUParameterMIDIMapping {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AUParameterMIDIMapping {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AUParameterMIDIMapping = Struct_AUParameterMIDIMapping;
pub type Enum_Unnamed193 = ::libc::c_uint;
pub const kMusicDeviceProperty_MIDIXMLNames: ::libc::c_uint = 1006;
pub const kMusicDeviceProperty_PartGroup: ::libc::c_uint = 1010;
pub const kMusicDeviceProperty_DualSchedulingMode: ::libc::c_uint = 1013;
pub const kMusicDeviceProperty_SupportsStartStopNote: ::libc::c_uint = 1014;
pub type Enum_Unnamed194 = ::libc::c_uint;
pub const kMusicDeviceSampleFrameMask_SampleOffset: ::libc::c_uint = 16777215;
pub const kMusicDeviceSampleFrameMask_IsScheduled: ::libc::c_uint = 16777216;
pub type Enum_Unnamed195 = ::libc::c_uint;
pub const kAudioUnitOfflineProperty_InputSize: ::libc::c_uint = 3020;
pub const kAudioUnitOfflineProperty_OutputSize: ::libc::c_uint = 3021;
pub const kAudioUnitOfflineProperty_StartOffset: ::libc::c_uint = 3022;
pub const kAudioUnitOfflineProperty_PreflightRequirements: ::libc::c_uint =
    3023;
pub const kAudioUnitOfflineProperty_PreflightName: ::libc::c_uint = 3024;
pub type Enum_Unnamed196 = ::libc::c_uint;
pub const kOfflinePreflight_NotRequired: ::libc::c_uint = 0;
pub const kOfflinePreflight_Optional: ::libc::c_uint = 1;
pub const kOfflinePreflight_Required: ::libc::c_uint = 2;
pub type Enum_Unnamed197 = ::libc::c_uint;
pub const kAudioUnitProperty_DistanceAttenuationData: ::libc::c_uint = 3600;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AUDistanceAttenuationData {
    pub inNumberOfPairs: UInt32,
    pub pairs: [Struct_Unnamed198; 1usize],
}
impl ::std::clone::Clone for Struct_AUDistanceAttenuationData {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AUDistanceAttenuationData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed198 {
    pub inDistance: Float32,
    pub outGain: Float32,
}
impl ::std::clone::Clone for Struct_Unnamed198 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed198 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AUDistanceAttenuationData = Struct_AUDistanceAttenuationData;
pub type Enum_Unnamed199 = ::libc::c_uint;
pub const kAudioUnitMigrateProperty_FromPlugin: ::libc::c_uint = 4000;
pub const kAudioUnitMigrateProperty_OldAutomation: ::libc::c_uint = 4001;
pub type Enum_Unnamed200 = ::libc::c_uint;
pub const kOtherPluginFormat_Undefined: ::libc::c_uint = 0;
pub const kOtherPluginFormat_kMAS: ::libc::c_uint = 1;
pub const kOtherPluginFormat_kVST: ::libc::c_uint = 2;
pub const kOtherPluginFormat_AU: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitOtherPluginDesc {
    pub format: UInt32,
    pub plugin: AudioClassDescription,
}
impl ::std::clone::Clone for Struct_AudioUnitOtherPluginDesc {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitOtherPluginDesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitOtherPluginDesc = Struct_AudioUnitOtherPluginDesc;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitParameterValueTranslation {
    pub otherDesc: AudioUnitOtherPluginDesc,
    pub otherParamID: UInt32,
    pub otherValue: Float32,
    pub auParamID: AudioUnitParameterID,
    pub auValue: AudioUnitParameterValue,
}
impl ::std::clone::Clone for Struct_AudioUnitParameterValueTranslation {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitParameterValueTranslation {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitParameterValueTranslation =
    Struct_AudioUnitParameterValueTranslation;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitPresetMAS_SettingData {
    pub isStockSetting: UInt32,
    pub settingID: UInt32,
    pub dataLen: UInt32,
    pub data: [UInt8; 1usize],
}
impl ::std::clone::Clone for Struct_AudioUnitPresetMAS_SettingData {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitPresetMAS_SettingData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitPresetMAS_SettingData =
    Struct_AudioUnitPresetMAS_SettingData;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitPresetMAS_Settings {
    pub manufacturerID: UInt32,
    pub effectID: UInt32,
    pub variantID: UInt32,
    pub settingsVersion: UInt32,
    pub numberOfSettings: UInt32,
    pub settings: [AudioUnitPresetMAS_SettingData; 1usize],
}
impl ::std::clone::Clone for Struct_AudioUnitPresetMAS_Settings {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitPresetMAS_Settings {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitPresetMAS_Settings = Struct_AudioUnitPresetMAS_Settings;
pub type Enum_Unnamed201 = ::libc::c_uint;
pub const kAudioUnitProperty_SampleRateConverterComplexity: ::libc::c_uint =
    3014;
pub type Enum_Unnamed202 = ::libc::c_uint;
pub const kAudioUnitSampleRateConverterComplexity_Linear: ::libc::c_uint =
    1818848869;
pub const kAudioUnitSampleRateConverterComplexity_Normal: ::libc::c_uint =
    1852797549;
pub const kAudioUnitSampleRateConverterComplexity_Mastering: ::libc::c_uint =
    1650553971;
pub type Enum_Unnamed203 = ::libc::c_uint;
pub const kAudioOutputUnitProperty_CurrentDevice: ::libc::c_uint = 2000;
pub const kAudioOutputUnitProperty_ChannelMap: ::libc::c_uint = 2002;
pub const kAudioOutputUnitProperty_EnableIO: ::libc::c_uint = 2003;
pub const kAudioOutputUnitProperty_StartTime: ::libc::c_uint = 2004;
pub const kAudioOutputUnitProperty_SetInputCallback: ::libc::c_uint = 2005;
pub const kAudioOutputUnitProperty_HasIO: ::libc::c_uint = 2006;
pub const kAudioOutputUnitProperty_StartTimestampsAtZero: ::libc::c_uint =
    2007;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioOutputUnitStartAtTimeParams {
    pub mTimestamp: AudioTimeStamp,
    pub mFlags: UInt32,
}
impl ::std::clone::Clone for Struct_AudioOutputUnitStartAtTimeParams {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioOutputUnitStartAtTimeParams {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioOutputUnitStartAtTimeParams =
    Struct_AudioOutputUnitStartAtTimeParams;
pub type Enum_Unnamed204 = ::libc::c_uint;
pub const kAUVoiceIOProperty_BypassVoiceProcessing: ::libc::c_uint = 2100;
pub const kAUVoiceIOProperty_VoiceProcessingEnableAGC: ::libc::c_uint = 2101;
pub const kAUVoiceIOProperty_MuteOutput: ::libc::c_uint = 2104;
pub type Enum_Unnamed205 = ::libc::c_uint;
pub const kAUVoiceIOProperty_VoiceProcessingQuality: ::libc::c_uint = 2103;
pub type Enum_Unnamed206 = ::libc::c_uint;
pub const kAUNBandEQProperty_NumberOfBands: ::libc::c_uint = 2200;
pub const kAUNBandEQProperty_MaxNumberOfBands: ::libc::c_uint = 2201;
pub const kAUNBandEQProperty_BiquadCoefficients: ::libc::c_uint = 2203;
pub type Enum_Unnamed207 = ::libc::c_int;
pub const kAUVoiceIOErr_UnexpectedNumberOfInputChannels: ::libc::c_int =
    -66784;
pub type Enum_Unnamed208 = ::libc::c_uint;
pub const kAudioUnitProperty_MeteringMode: ::libc::c_uint = 3007;
pub const kAudioUnitProperty_MatrixLevels: ::libc::c_uint = 3006;
pub const kAudioUnitProperty_MatrixDimensions: ::libc::c_uint = 3009;
pub const kAudioUnitProperty_MeterClipping: ::libc::c_uint = 3011;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitMeterClipping {
    pub peakValueSinceLastCall: Float32,
    pub sawInfinity: Boolean,
    pub sawNotANumber: Boolean,
}
impl ::std::clone::Clone for Struct_AudioUnitMeterClipping {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitMeterClipping {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitMeterClipping = Struct_AudioUnitMeterClipping;
pub type Enum_Unnamed209 = ::libc::c_uint;
pub const kAudioUnitProperty_ReverbRoomType: ::libc::c_uint = 10;
pub const kAudioUnitProperty_UsesInternalReverb: ::libc::c_uint = 1005;
pub const kAudioUnitProperty_SpatializationAlgorithm: ::libc::c_uint = 3000;
pub const kAudioUnitProperty_SpatialMixerDistanceParams: ::libc::c_uint =
    3010;
pub const kAudioUnitProperty_SpatialMixerAttenuationCurve: ::libc::c_uint =
    3013;
pub const kAudioUnitProperty_SpatialMixerRenderingFlags: ::libc::c_uint =
    3003;
pub type Enum_Unnamed210 = ::libc::c_uint;
pub const kSpatializationAlgorithm_EqualPowerPanning: ::libc::c_uint = 0;
pub const kSpatializationAlgorithm_SphericalHead: ::libc::c_uint = 1;
pub const kSpatializationAlgorithm_HRTF: ::libc::c_uint = 2;
pub const kSpatializationAlgorithm_SoundField: ::libc::c_uint = 3;
pub const kSpatializationAlgorithm_VectorBasedPanning: ::libc::c_uint = 4;
pub const kSpatializationAlgorithm_StereoPassThrough: ::libc::c_uint = 5;
pub type Enum_Unnamed211 = ::libc::c_uint;
pub const kReverbRoomType_SmallRoom: ::libc::c_uint = 0;
pub const kReverbRoomType_MediumRoom: ::libc::c_uint = 1;
pub const kReverbRoomType_LargeRoom: ::libc::c_uint = 2;
pub const kReverbRoomType_MediumHall: ::libc::c_uint = 3;
pub const kReverbRoomType_LargeHall: ::libc::c_uint = 4;
pub const kReverbRoomType_Plate: ::libc::c_uint = 5;
pub const kReverbRoomType_MediumChamber: ::libc::c_uint = 6;
pub const kReverbRoomType_LargeChamber: ::libc::c_uint = 7;
pub const kReverbRoomType_Cathedral: ::libc::c_uint = 8;
pub const kReverbRoomType_LargeRoom2: ::libc::c_uint = 9;
pub const kReverbRoomType_MediumHall2: ::libc::c_uint = 10;
pub const kReverbRoomType_MediumHall3: ::libc::c_uint = 11;
pub const kReverbRoomType_LargeHall2: ::libc::c_uint = 12;
pub type Enum_Unnamed212 = ::libc::c_uint;
pub const kSpatialMixerAttenuationCurve_Power: ::libc::c_uint = 0;
pub const kSpatialMixerAttenuationCurve_Exponential: ::libc::c_uint = 1;
pub const kSpatialMixerAttenuationCurve_Inverse: ::libc::c_uint = 2;
pub const kSpatialMixerAttenuationCurve_Linear: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MixerDistanceParams {
    pub mReferenceDistance: Float32,
    pub mMaxDistance: Float32,
    pub mMaxAttenuation: Float32,
}
impl ::std::clone::Clone for Struct_MixerDistanceParams {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MixerDistanceParams {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MixerDistanceParams = Struct_MixerDistanceParams;
pub type Enum_Unnamed213 = ::libc::c_uint;
pub const kSpatialMixerRenderingFlags_InterAuralDelay: ::libc::c_uint = 1;
pub const kSpatialMixerRenderingFlags_DistanceAttenuation: ::libc::c_uint = 4;
pub type Enum_Unnamed214 = ::libc::c_uint;
pub const kAudioUnitProperty_3DMixerDistanceParams: ::libc::c_uint = 3010;
pub const kAudioUnitProperty_3DMixerAttenuationCurve: ::libc::c_uint = 3013;
pub const kAudioUnitProperty_DopplerShift: ::libc::c_uint = 3002;
pub const kAudioUnitProperty_3DMixerRenderingFlags: ::libc::c_uint = 3003;
pub const kAudioUnitProperty_3DMixerDistanceAtten: ::libc::c_uint = 3004;
pub const kAudioUnitProperty_ReverbPreset: ::libc::c_uint = 3012;
pub type Enum_Unnamed215 = ::libc::c_uint;
pub const k3DMixerRenderingFlags_InterAuralDelay: ::libc::c_uint = 1;
pub const k3DMixerRenderingFlags_DopplerShift: ::libc::c_uint = 2;
pub const k3DMixerRenderingFlags_DistanceAttenuation: ::libc::c_uint = 4;
pub const k3DMixerRenderingFlags_DistanceFilter: ::libc::c_uint = 8;
pub const k3DMixerRenderingFlags_DistanceDiffusion: ::libc::c_uint = 16;
pub const k3DMixerRenderingFlags_LinearDistanceAttenuation: ::libc::c_uint =
    32;
pub const k3DMixerRenderingFlags_ConstantReverbBlend: ::libc::c_uint = 64;
pub type Enum_Unnamed216 = ::libc::c_uint;
pub const k3DMixerAttenuationCurve_Power: ::libc::c_uint = 0;
pub const k3DMixerAttenuationCurve_Exponential: ::libc::c_uint = 1;
pub const k3DMixerAttenuationCurve_Inverse: ::libc::c_uint = 2;
pub const k3DMixerAttenuationCurve_Linear: ::libc::c_uint = 3;
pub type Enum_Unnamed217 = ::libc::c_uint;
pub const kAudioUnitProperty_ScheduleAudioSlice: ::libc::c_uint = 3300;
pub const kAudioUnitProperty_ScheduleStartTimeStamp: ::libc::c_uint = 3301;
pub const kAudioUnitProperty_CurrentPlayTime: ::libc::c_uint = 3302;
pub type Enum_Unnamed218 = ::libc::c_uint;
pub const kScheduledAudioSliceFlag_Complete: ::libc::c_uint = 1;
pub const kScheduledAudioSliceFlag_BeganToRender: ::libc::c_uint = 2;
pub const kScheduledAudioSliceFlag_BeganToRenderLate: ::libc::c_uint = 4;
pub const kScheduledAudioSliceFlag_Loop: ::libc::c_uint = 8;
pub const kScheduledAudioSliceFlag_Interrupt: ::libc::c_uint = 16;
pub const kScheduledAudioSliceFlag_InterruptAtLoop: ::libc::c_uint = 32;
pub type ScheduledAudioSlice = Struct_ScheduledAudioSlice;
pub type ScheduledAudioSliceCompletionProc =
    ::std::option::Option<extern "C" fn(userData: *mut ::libc::c_void,
                                        bufferList: *mut ScheduledAudioSlice)
                              -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ScheduledAudioSlice {
    pub mTimeStamp: AudioTimeStamp,
    pub mCompletionProc: ScheduledAudioSliceCompletionProc,
    pub mCompletionProcUserData: *mut ::libc::c_void,
    pub mFlags: UInt32,
    pub mReserved: UInt32,
    pub mReserved2: *mut ::libc::c_void,
    pub mNumberFrames: UInt32,
    pub mBufferList: *mut AudioBufferList,
}
impl ::std::clone::Clone for Struct_ScheduledAudioSlice {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ScheduledAudioSlice {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed219 = ::libc::c_uint;
pub const kAudioUnitProperty_ScheduledFileIDs: ::libc::c_uint = 3310;
pub const kAudioUnitProperty_ScheduledFileRegion: ::libc::c_uint = 3311;
pub const kAudioUnitProperty_ScheduledFilePrime: ::libc::c_uint = 3312;
pub const kAudioUnitProperty_ScheduledFileBufferSizeFrames: ::libc::c_uint =
    3313;
pub const kAudioUnitProperty_ScheduledFileNumberBuffers: ::libc::c_uint =
    3314;
pub type ScheduledAudioFileRegion = Struct_ScheduledAudioFileRegion;
pub type ScheduledAudioFileRegionCompletionProc =
    ::std::option::Option<extern "C" fn(userData: *mut ::libc::c_void,
                                        fileRegion:
                                            *mut ScheduledAudioFileRegion,
                                        result: OSStatus) -> ()>;
pub enum Struct_OpaqueAudioFileID { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ScheduledAudioFileRegion {
    pub mTimeStamp: AudioTimeStamp,
    pub mCompletionProc: ScheduledAudioFileRegionCompletionProc,
    pub mCompletionProcUserData: *mut ::libc::c_void,
    pub mAudioFile: *mut Struct_OpaqueAudioFileID,
    pub mLoopCount: UInt32,
    pub mStartFrame: SInt64,
    pub mFramesToPlay: UInt32,
}
impl ::std::clone::Clone for Struct_ScheduledAudioFileRegion {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ScheduledAudioFileRegion {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed220 = ::libc::c_uint;
pub const kMusicDeviceProperty_UsesInternalReverb: ::libc::c_uint = 1005;
pub const kMusicDeviceProperty_SoundBankData: ::libc::c_uint = 1008;
pub const kMusicDeviceProperty_StreamFromDisk: ::libc::c_uint = 1011;
pub const kMusicDeviceProperty_SoundBankFSRef: ::libc::c_uint = 1012;
pub type Enum_Unnamed221 = ::libc::c_uint;
pub const kMusicDeviceProperty_InstrumentName: ::libc::c_uint = 1001;
pub const kMusicDeviceProperty_InstrumentNumber: ::libc::c_uint = 1004;
pub type Enum_Unnamed222 = ::libc::c_uint;
pub const kMusicDeviceProperty_InstrumentCount: ::libc::c_uint = 1000;
pub const kMusicDeviceProperty_BankName: ::libc::c_uint = 1007;
pub const kMusicDeviceProperty_SoundBankURL: ::libc::c_uint = 1100;
pub type Enum_Unnamed223 = ::libc::c_uint;
pub const kAUMIDISynthProperty_EnablePreload: ::libc::c_uint = 4119;
pub type Enum_Unnamed224 = ::libc::c_uint;
pub const kAUSamplerProperty_LoadInstrument: ::libc::c_uint = 4102;
pub const kAUSamplerProperty_LoadAudioFiles: ::libc::c_uint = 4101;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AUSamplerInstrumentData {
    pub fileURL: CFURLRef,
    pub instrumentType: UInt8,
    pub bankMSB: UInt8,
    pub bankLSB: UInt8,
    pub presetID: UInt8,
}
impl ::std::clone::Clone for Struct_AUSamplerInstrumentData {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AUSamplerInstrumentData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AUSamplerInstrumentData = Struct_AUSamplerInstrumentData;
pub type Enum_Unnamed225 = ::libc::c_uint;
pub const kInstrumentType_DLSPreset: ::libc::c_uint = 1;
pub const kInstrumentType_SF2Preset: ::libc::c_uint = 1;
pub const kInstrumentType_AUPreset: ::libc::c_uint = 2;
pub const kInstrumentType_Audiofile: ::libc::c_uint = 3;
pub const kInstrumentType_EXS24: ::libc::c_uint = 4;
pub type Enum_Unnamed226 = ::libc::c_uint;
pub const kAUSampler_DefaultPercussionBankMSB: ::libc::c_uint = 120;
pub const kAUSampler_DefaultMelodicBankMSB: ::libc::c_uint = 121;
pub const kAUSampler_DefaultBankLSB: ::libc::c_uint = 0;
pub type Enum_Unnamed227 = ::libc::c_uint;
pub const kAudioUnitProperty_DeferredRendererPullSize: ::libc::c_uint = 3320;
pub const kAudioUnitProperty_DeferredRendererExtraLatency: ::libc::c_uint =
    3321;
pub const kAudioUnitProperty_DeferredRendererWaitFrames: ::libc::c_uint =
    3322;
pub type Enum_Unnamed228 = ::libc::c_uint;
pub const kAUNetReceiveProperty_Hostname: ::libc::c_uint = 3511;
pub const kAUNetReceiveProperty_Password: ::libc::c_uint = 3512;
pub type Enum_Unnamed229 = ::libc::c_uint;
pub const kAUNetSendProperty_PortNum: ::libc::c_uint = 3513;
pub const kAUNetSendProperty_TransmissionFormat: ::libc::c_uint = 3514;
pub const kAUNetSendProperty_TransmissionFormatIndex: ::libc::c_uint = 3515;
pub const kAUNetSendProperty_ServiceName: ::libc::c_uint = 3516;
pub const kAUNetSendProperty_Disconnect: ::libc::c_uint = 3517;
pub const kAUNetSendProperty_Password: ::libc::c_uint = 3518;
pub type Enum_Unnamed230 = ::libc::c_uint;
pub const kAUNetSendPresetFormat_PCMFloat32: ::libc::c_uint = 0;
pub const kAUNetSendPresetFormat_PCMInt24: ::libc::c_uint = 1;
pub const kAUNetSendPresetFormat_PCMInt16: ::libc::c_uint = 2;
pub const kAUNetSendPresetFormat_Lossless24: ::libc::c_uint = 3;
pub const kAUNetSendPresetFormat_Lossless16: ::libc::c_uint = 4;
pub const kAUNetSendPresetFormat_ULaw: ::libc::c_uint = 5;
pub const kAUNetSendPresetFormat_IMA4: ::libc::c_uint = 6;
pub const kAUNetSendPresetFormat_AAC_128kbpspc: ::libc::c_uint = 7;
pub const kAUNetSendPresetFormat_AAC_96kbpspc: ::libc::c_uint = 8;
pub const kAUNetSendPresetFormat_AAC_80kbpspc: ::libc::c_uint = 9;
pub const kAUNetSendPresetFormat_AAC_64kbpspc: ::libc::c_uint = 10;
pub const kAUNetSendPresetFormat_AAC_48kbpspc: ::libc::c_uint = 11;
pub const kAUNetSendPresetFormat_AAC_40kbpspc: ::libc::c_uint = 12;
pub const kAUNetSendPresetFormat_AAC_32kbpspc: ::libc::c_uint = 13;
pub const kAUNetSendPresetFormat_AAC_LD_64kbpspc: ::libc::c_uint = 14;
pub const kAUNetSendPresetFormat_AAC_LD_48kbpspc: ::libc::c_uint = 15;
pub const kAUNetSendPresetFormat_AAC_LD_40kbpspc: ::libc::c_uint = 16;
pub const kAUNetSendPresetFormat_AAC_LD_32kbpspc: ::libc::c_uint = 17;
pub const kAUNetSendNumPresetFormats: ::libc::c_uint = 18;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AUNumVersion {
    pub nonRelRev: UInt8,
    pub stage: UInt8,
    pub minorAndBugRev: UInt8,
    pub majorRev: UInt8,
}
impl ::std::clone::Clone for Struct_AUNumVersion {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AUNumVersion {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AUNumVersion = Struct_AUNumVersion;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AUHostIdentifier {
    pub hostName: CFStringRef,
    pub hostVersion: AUNumVersion,
}
impl ::std::clone::Clone for Struct_AUHostIdentifier {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AUHostIdentifier {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AUHostIdentifier = Struct_AUHostIdentifier;
pub type Enum_Unnamed231 = ::libc::c_uint;
pub const kAudioUnitParameterFlag_Global: ::libc::c_uint = 1;
pub const kAudioUnitParameterFlag_Input: ::libc::c_uint = 2;
pub const kAudioUnitParameterFlag_Output: ::libc::c_uint = 4;
pub const kAudioUnitParameterFlag_Group: ::libc::c_uint = 8;
pub type Enum_Unnamed232 = ::libc::c_uint;
pub const kAudioUnitParameterFlag_HasName: ::libc::c_uint = 2097152;
pub type Enum_Unnamed233 = ::libc::c_uint;
pub const kAudioUnitProperty_SRCAlgorithm: ::libc::c_uint = 9;
pub const kAudioUnitProperty_MIDIControlMapping: ::libc::c_uint = 17;
pub const kAudioUnitProperty_CurrentPreset: ::libc::c_uint = 28;
pub const kAudioUnitProperty_ParameterValueName: ::libc::c_uint = 33;
pub const kAudioUnitProperty_BusCount: ::libc::c_uint = 11;
pub const kAudioOfflineUnitProperty_InputSize: ::libc::c_uint = 3020;
pub const kAudioOfflineUnitProperty_OutputSize: ::libc::c_uint = 3021;
pub type Enum_Unnamed234 = ::libc::c_uint;
pub const kAudioUnitSRCAlgorithm_Polyphase: ::libc::c_uint = 1886350457;
pub const kAudioUnitSRCAlgorithm_MediumQuality: ::libc::c_uint = 1668510307;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitMIDIControlMapping {
    pub midiNRPN: UInt16,
    pub midiControl: UInt8,
    pub scope: UInt8,
    pub element: AudioUnitElement,
    pub parameter: AudioUnitParameterID,
}
impl ::std::clone::Clone for Struct_AudioUnitMIDIControlMapping {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitMIDIControlMapping {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitMIDIControlMapping = Struct_AudioUnitMIDIControlMapping;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitParameterValueName {
    pub inParamID: AudioUnitParameterID,
    pub inValue: *const Float32,
    pub outName: CFStringRef,
}
impl ::std::clone::Clone for Struct_AudioUnitParameterValueName {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitParameterValueName {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitParameterValueName = Struct_AudioUnitParameterValueName;
pub type Enum_Unnamed235 = ::libc::c_uint;
pub const kMusicDeviceProperty_GroupOutputBus: ::libc::c_uint = 1002;
pub const kMusicDeviceProperty_SoundBankFSSpec: ::libc::c_uint = 1003;
pub const kAudioUnitProperty_PannerMode: ::libc::c_uint = 3008;
pub type Enum_Unnamed236 = ::libc::c_uint;
pub const kAudioUnitProperty_SpeakerConfiguration: ::libc::c_uint = 3001;
pub type Enum_Unnamed237 = ::libc::c_uint;
pub const kSpeakerConfiguration_HeadPhones: ::libc::c_uint = 0;
pub const kSpeakerConfiguration_Stereo: ::libc::c_uint = 1;
pub const kSpeakerConfiguration_Quad: ::libc::c_uint = 2;
pub const kSpeakerConfiguration_5_0: ::libc::c_uint = 3;
pub const kSpeakerConfiguration_5_1: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AUSamplerBankPresetData {
    pub bankURL: CFURLRef,
    pub bankMSB: UInt8,
    pub bankLSB: UInt8,
    pub presetID: UInt8,
    pub reserved: UInt8,
}
impl ::std::clone::Clone for Struct_AUSamplerBankPresetData {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AUSamplerBankPresetData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AUSamplerBankPresetData = Struct_AUSamplerBankPresetData;
pub type Enum_Unnamed238 = ::libc::c_uint;
pub const kAUSamplerProperty_LoadPresetFromBank: ::libc::c_uint = 4100;
pub const kAUSamplerProperty_BankAndPreset: ::libc::c_uint = 4100;
pub type Enum_Unnamed239 = ::libc::c_uint;
pub const kAUGroupParameterID_Volume: ::libc::c_uint = 7;
pub const kAUGroupParameterID_Sustain: ::libc::c_uint = 64;
pub const kAUGroupParameterID_Sostenuto: ::libc::c_uint = 66;
pub const kAUGroupParameterID_AllNotesOff: ::libc::c_uint = 123;
pub const kAUGroupParameterID_ModWheel: ::libc::c_uint = 1;
pub const kAUGroupParameterID_PitchBend: ::libc::c_uint = 224;
pub const kAUGroupParameterID_AllSoundOff: ::libc::c_uint = 120;
pub const kAUGroupParameterID_ResetAllControllers: ::libc::c_uint = 121;
pub const kAUGroupParameterID_Pan: ::libc::c_uint = 10;
pub const kAUGroupParameterID_Foot: ::libc::c_uint = 4;
pub const kAUGroupParameterID_ChannelPressure: ::libc::c_uint = 208;
pub const kAUGroupParameterID_KeyPressure: ::libc::c_uint = 160;
pub const kAUGroupParameterID_Expression: ::libc::c_uint = 11;
pub const kAUGroupParameterID_DataEntry: ::libc::c_uint = 6;
pub const kAUGroupParameterID_Volume_LSB: ::libc::c_uint = 39;
pub const kAUGroupParameterID_ModWheel_LSB: ::libc::c_uint = 33;
pub const kAUGroupParameterID_Pan_LSB: ::libc::c_uint = 42;
pub const kAUGroupParameterID_Foot_LSB: ::libc::c_uint = 36;
pub const kAUGroupParameterID_Expression_LSB: ::libc::c_uint = 43;
pub const kAUGroupParameterID_DataEntry_LSB: ::libc::c_uint = 38;
pub const kAUGroupParameterID_KeyPressure_FirstKey: ::libc::c_uint = 256;
pub const kAUGroupParameterID_KeyPressure_LastKey: ::libc::c_uint = 383;
pub type Enum_Unnamed240 = ::libc::c_uint;
pub const kPannerParam_Gain: ::libc::c_uint = 0;
pub const kPannerParam_Azimuth: ::libc::c_uint = 1;
pub const kPannerParam_Elevation: ::libc::c_uint = 2;
pub const kPannerParam_Distance: ::libc::c_uint = 3;
pub const kPannerParam_CoordScale: ::libc::c_uint = 4;
pub const kPannerParam_RefDistance: ::libc::c_uint = 5;
pub type Enum_Unnamed241 = ::libc::c_uint;
pub const kSpatialMixerParam_Azimuth: ::libc::c_uint = 0;
pub const kSpatialMixerParam_Elevation: ::libc::c_uint = 1;
pub const kSpatialMixerParam_Distance: ::libc::c_uint = 2;
pub const kSpatialMixerParam_Gain: ::libc::c_uint = 3;
pub const kSpatialMixerParam_PlaybackRate: ::libc::c_uint = 4;
pub const kSpatialMixerParam_Enable: ::libc::c_uint = 5;
pub const kSpatialMixerParam_MinGain: ::libc::c_uint = 6;
pub const kSpatialMixerParam_MaxGain: ::libc::c_uint = 7;
pub const kSpatialMixerParam_ReverbBlend: ::libc::c_uint = 8;
pub const kSpatialMixerParam_GlobalReverbGain: ::libc::c_uint = 9;
pub const kSpatialMixerParam_OcclusionAttenuation: ::libc::c_uint = 10;
pub const kSpatialMixerParam_ObstructionAttenuation: ::libc::c_uint = 11;
pub type Enum_Unnamed242 = ::libc::c_uint;
pub const kReverbParam_FilterFrequency: ::libc::c_uint = 14;
pub const kReverbParam_FilterBandwidth: ::libc::c_uint = 15;
pub const kReverbParam_FilterGain: ::libc::c_uint = 16;
pub const kReverbParam_FilterType: ::libc::c_uint = 17;
pub const kReverbParam_FilterEnable: ::libc::c_uint = 18;
pub type Enum_Unnamed243 = ::libc::c_uint;
pub const k3DMixerParam_Azimuth: ::libc::c_uint = 0;
pub const k3DMixerParam_Elevation: ::libc::c_uint = 1;
pub const k3DMixerParam_Distance: ::libc::c_uint = 2;
pub const k3DMixerParam_Gain: ::libc::c_uint = 3;
pub const k3DMixerParam_PlaybackRate: ::libc::c_uint = 4;
pub const k3DMixerParam_ReverbBlend: ::libc::c_uint = 5;
pub const k3DMixerParam_GlobalReverbGain: ::libc::c_uint = 6;
pub const k3DMixerParam_OcclusionAttenuation: ::libc::c_uint = 7;
pub const k3DMixerParam_ObstructionAttenuation: ::libc::c_uint = 8;
pub const k3DMixerParam_MinGain: ::libc::c_uint = 9;
pub const k3DMixerParam_MaxGain: ::libc::c_uint = 10;
pub const k3DMixerParam_PreAveragePower: ::libc::c_uint = 1000;
pub const k3DMixerParam_PrePeakHoldLevel: ::libc::c_uint = 2000;
pub const k3DMixerParam_PostAveragePower: ::libc::c_uint = 3000;
pub const k3DMixerParam_PostPeakHoldLevel: ::libc::c_uint = 4000;
pub type Enum_Unnamed244 = ::libc::c_uint;
pub const kMultiChannelMixerParam_Volume: ::libc::c_uint = 0;
pub const kMultiChannelMixerParam_Enable: ::libc::c_uint = 1;
pub const kMultiChannelMixerParam_Pan: ::libc::c_uint = 2;
pub const kMultiChannelMixerParam_PreAveragePower: ::libc::c_uint = 1000;
pub const kMultiChannelMixerParam_PrePeakHoldLevel: ::libc::c_uint = 2000;
pub const kMultiChannelMixerParam_PostAveragePower: ::libc::c_uint = 3000;
pub const kMultiChannelMixerParam_PostPeakHoldLevel: ::libc::c_uint = 4000;
pub type Enum_Unnamed245 = ::libc::c_uint;
pub const kMatrixMixerParam_Volume: ::libc::c_uint = 0;
pub const kMatrixMixerParam_Enable: ::libc::c_uint = 1;
pub const kMatrixMixerParam_PreAveragePower: ::libc::c_uint = 1000;
pub const kMatrixMixerParam_PrePeakHoldLevel: ::libc::c_uint = 2000;
pub const kMatrixMixerParam_PostAveragePower: ::libc::c_uint = 3000;
pub const kMatrixMixerParam_PostPeakHoldLevel: ::libc::c_uint = 4000;
pub const kMatrixMixerParam_PreAveragePowerLinear: ::libc::c_uint = 5000;
pub const kMatrixMixerParam_PrePeakHoldLevelLinear: ::libc::c_uint = 6000;
pub const kMatrixMixerParam_PostAveragePowerLinear: ::libc::c_uint = 7000;
pub const kMatrixMixerParam_PostPeakHoldLevelLinear: ::libc::c_uint = 8000;
pub type Enum_Unnamed246 = ::libc::c_uint;
pub const kHALOutputParam_Volume: ::libc::c_uint = 14;
pub type Enum_Unnamed247 = ::libc::c_uint;
pub const kTimePitchParam_Rate: ::libc::c_uint = 0;
pub const kTimePitchParam_Pitch: ::libc::c_uint = 1;
pub const kTimePitchParam_EffectBlend: ::libc::c_uint = 2;
pub type Enum_Unnamed248 = ::libc::c_uint;
pub const kNewTimePitchParam_Rate: ::libc::c_uint = 0;
pub const kNewTimePitchParam_Pitch: ::libc::c_uint = 1;
pub const kNewTimePitchParam_Overlap: ::libc::c_uint = 4;
pub const kNewTimePitchParam_EnablePeakLocking: ::libc::c_uint = 6;
pub type Enum_Unnamed249 = ::libc::c_uint;
pub const kAUSamplerParam_Gain: ::libc::c_uint = 900;
pub const kAUSamplerParam_CoarseTuning: ::libc::c_uint = 901;
pub const kAUSamplerParam_FineTuning: ::libc::c_uint = 902;
pub const kAUSamplerParam_Pan: ::libc::c_uint = 903;
pub type Enum_Unnamed250 = ::libc::c_uint;
pub const kBandpassParam_CenterFrequency: ::libc::c_uint = 0;
pub const kBandpassParam_Bandwidth: ::libc::c_uint = 1;
pub type Enum_Unnamed251 = ::libc::c_uint;
pub const kHipassParam_CutoffFrequency: ::libc::c_uint = 0;
pub const kHipassParam_Resonance: ::libc::c_uint = 1;
pub type Enum_Unnamed252 = ::libc::c_uint;
pub const kLowPassParam_CutoffFrequency: ::libc::c_uint = 0;
pub const kLowPassParam_Resonance: ::libc::c_uint = 1;
pub type Enum_Unnamed253 = ::libc::c_uint;
pub const kHighShelfParam_CutOffFrequency: ::libc::c_uint = 0;
pub const kHighShelfParam_Gain: ::libc::c_uint = 1;
pub type Enum_Unnamed254 = ::libc::c_uint;
pub const kAULowShelfParam_CutoffFrequency: ::libc::c_uint = 0;
pub const kAULowShelfParam_Gain: ::libc::c_uint = 1;
pub type Enum_Unnamed255 = ::libc::c_uint;
pub const kParametricEQParam_CenterFreq: ::libc::c_uint = 0;
pub const kParametricEQParam_Q: ::libc::c_uint = 1;
pub const kParametricEQParam_Gain: ::libc::c_uint = 2;
pub type Enum_Unnamed256 = ::libc::c_uint;
pub const kLimiterParam_AttackTime: ::libc::c_uint = 0;
pub const kLimiterParam_DecayTime: ::libc::c_uint = 1;
pub const kLimiterParam_PreGain: ::libc::c_uint = 2;
pub type Enum_Unnamed257 = ::libc::c_uint;
pub const kDynamicsProcessorParam_Threshold: ::libc::c_uint = 0;
pub const kDynamicsProcessorParam_HeadRoom: ::libc::c_uint = 1;
pub const kDynamicsProcessorParam_ExpansionRatio: ::libc::c_uint = 2;
pub const kDynamicsProcessorParam_ExpansionThreshold: ::libc::c_uint = 3;
pub const kDynamicsProcessorParam_AttackTime: ::libc::c_uint = 4;
pub const kDynamicsProcessorParam_ReleaseTime: ::libc::c_uint = 5;
pub const kDynamicsProcessorParam_MasterGain: ::libc::c_uint = 6;
pub const kDynamicsProcessorParam_CompressionAmount: ::libc::c_uint = 1000;
pub const kDynamicsProcessorParam_InputAmplitude: ::libc::c_uint = 2000;
pub const kDynamicsProcessorParam_OutputAmplitude: ::libc::c_uint = 3000;
pub type Enum_Unnamed258 = ::libc::c_uint;
pub const kVarispeedParam_PlaybackRate: ::libc::c_uint = 0;
pub const kVarispeedParam_PlaybackCents: ::libc::c_uint = 1;
pub type Enum_Unnamed259 = ::libc::c_uint;
pub const kDistortionParam_Delay: ::libc::c_uint = 0;
pub const kDistortionParam_Decay: ::libc::c_uint = 1;
pub const kDistortionParam_DelayMix: ::libc::c_uint = 2;
pub const kDistortionParam_Decimation: ::libc::c_uint = 3;
pub const kDistortionParam_Rounding: ::libc::c_uint = 4;
pub const kDistortionParam_DecimationMix: ::libc::c_uint = 5;
pub const kDistortionParam_LinearTerm: ::libc::c_uint = 6;
pub const kDistortionParam_SquaredTerm: ::libc::c_uint = 7;
pub const kDistortionParam_CubicTerm: ::libc::c_uint = 8;
pub const kDistortionParam_PolynomialMix: ::libc::c_uint = 9;
pub const kDistortionParam_RingModFreq1: ::libc::c_uint = 10;
pub const kDistortionParam_RingModFreq2: ::libc::c_uint = 11;
pub const kDistortionParam_RingModBalance: ::libc::c_uint = 12;
pub const kDistortionParam_RingModMix: ::libc::c_uint = 13;
pub const kDistortionParam_SoftClipGain: ::libc::c_uint = 14;
pub const kDistortionParam_FinalMix: ::libc::c_uint = 15;
pub type Enum_Unnamed260 = ::libc::c_uint;
pub const kDelayParam_WetDryMix: ::libc::c_uint = 0;
pub const kDelayParam_DelayTime: ::libc::c_uint = 1;
pub const kDelayParam_Feedback: ::libc::c_uint = 2;
pub const kDelayParam_LopassCutoff: ::libc::c_uint = 3;
pub type Enum_Unnamed261 = ::libc::c_uint;
pub const kAUNBandEQParam_GlobalGain: ::libc::c_uint = 0;
pub const kAUNBandEQParam_BypassBand: ::libc::c_uint = 1000;
pub const kAUNBandEQParam_FilterType: ::libc::c_uint = 2000;
pub const kAUNBandEQParam_Frequency: ::libc::c_uint = 3000;
pub const kAUNBandEQParam_Gain: ::libc::c_uint = 4000;
pub const kAUNBandEQParam_Bandwidth: ::libc::c_uint = 5000;
pub type Enum_Unnamed262 = ::libc::c_uint;
pub const kAUNBandEQFilterType_Parametric: ::libc::c_uint = 0;
pub const kAUNBandEQFilterType_2ndOrderButterworthLowPass: ::libc::c_uint = 1;
pub const kAUNBandEQFilterType_2ndOrderButterworthHighPass: ::libc::c_uint =
    2;
pub const kAUNBandEQFilterType_ResonantLowPass: ::libc::c_uint = 3;
pub const kAUNBandEQFilterType_ResonantHighPass: ::libc::c_uint = 4;
pub const kAUNBandEQFilterType_BandPass: ::libc::c_uint = 5;
pub const kAUNBandEQFilterType_BandStop: ::libc::c_uint = 6;
pub const kAUNBandEQFilterType_LowShelf: ::libc::c_uint = 7;
pub const kAUNBandEQFilterType_HighShelf: ::libc::c_uint = 8;
pub const kAUNBandEQFilterType_ResonantLowShelf: ::libc::c_uint = 9;
pub const kAUNBandEQFilterType_ResonantHighShelf: ::libc::c_uint = 10;
pub const kNumAUNBandEQFilterTypes: ::libc::c_uint = 11;
pub type Enum_Unnamed263 = ::libc::c_uint;
pub const kRoundTripAACParam_Format: ::libc::c_uint = 0;
pub const kRoundTripAACParam_EncodingStrategy: ::libc::c_uint = 1;
pub const kRoundTripAACParam_RateOrQuality: ::libc::c_uint = 2;
pub const kRoundTripAACParam_BitRate: ::libc::c_uint = 1;
pub const kRoundTripAACParam_Quality: ::libc::c_uint = 2;
pub const kRoundTripAACParam_CompressedFormatSampleRate: ::libc::c_uint = 3;
pub type Enum_Unnamed264 = ::libc::c_uint;
pub const kGraphicEQParam_NumberOfBands: ::libc::c_uint = 10000;
pub type Enum_Unnamed265 = ::libc::c_uint;
pub const kReverbParam_DryWetMix: ::libc::c_uint = 0;
pub const kReverbParam_SmallLargeMix: ::libc::c_uint = 1;
pub const kReverbParam_SmallSize: ::libc::c_uint = 2;
pub const kReverbParam_LargeSize: ::libc::c_uint = 3;
pub const kReverbParam_PreDelay: ::libc::c_uint = 4;
pub const kReverbParam_LargeDelay: ::libc::c_uint = 5;
pub const kReverbParam_SmallDensity: ::libc::c_uint = 6;
pub const kReverbParam_LargeDensity: ::libc::c_uint = 7;
pub const kReverbParam_LargeDelayRange: ::libc::c_uint = 8;
pub const kReverbParam_SmallBrightness: ::libc::c_uint = 9;
pub const kReverbParam_LargeBrightness: ::libc::c_uint = 10;
pub const kReverbParam_SmallDelayRange: ::libc::c_uint = 11;
pub const kReverbParam_ModulationRate: ::libc::c_uint = 12;
pub const kReverbParam_ModulationDepth: ::libc::c_uint = 13;
pub type Enum_Unnamed266 = ::libc::c_uint;
pub const kMultibandCompressorParam_Pregain: ::libc::c_uint = 0;
pub const kMultibandCompressorParam_Postgain: ::libc::c_uint = 1;
pub const kMultibandCompressorParam_Crossover1: ::libc::c_uint = 2;
pub const kMultibandCompressorParam_Crossover2: ::libc::c_uint = 3;
pub const kMultibandCompressorParam_Crossover3: ::libc::c_uint = 4;
pub const kMultibandCompressorParam_Threshold1: ::libc::c_uint = 5;
pub const kMultibandCompressorParam_Threshold2: ::libc::c_uint = 6;
pub const kMultibandCompressorParam_Threshold3: ::libc::c_uint = 7;
pub const kMultibandCompressorParam_Threshold4: ::libc::c_uint = 8;
pub const kMultibandCompressorParam_Headroom1: ::libc::c_uint = 9;
pub const kMultibandCompressorParam_Headroom2: ::libc::c_uint = 10;
pub const kMultibandCompressorParam_Headroom3: ::libc::c_uint = 11;
pub const kMultibandCompressorParam_Headroom4: ::libc::c_uint = 12;
pub const kMultibandCompressorParam_AttackTime: ::libc::c_uint = 13;
pub const kMultibandCompressorParam_ReleaseTime: ::libc::c_uint = 14;
pub const kMultibandCompressorParam_EQ1: ::libc::c_uint = 15;
pub const kMultibandCompressorParam_EQ2: ::libc::c_uint = 16;
pub const kMultibandCompressorParam_EQ3: ::libc::c_uint = 17;
pub const kMultibandCompressorParam_EQ4: ::libc::c_uint = 18;
pub const kMultibandCompressorParam_CompressionAmount1: ::libc::c_uint = 1000;
pub const kMultibandCompressorParam_CompressionAmount2: ::libc::c_uint = 2000;
pub const kMultibandCompressorParam_CompressionAmount3: ::libc::c_uint = 3000;
pub const kMultibandCompressorParam_CompressionAmount4: ::libc::c_uint = 4000;
pub const kMultibandCompressorParam_InputAmplitude1: ::libc::c_uint = 5000;
pub const kMultibandCompressorParam_InputAmplitude2: ::libc::c_uint = 6000;
pub const kMultibandCompressorParam_InputAmplitude3: ::libc::c_uint = 7000;
pub const kMultibandCompressorParam_InputAmplitude4: ::libc::c_uint = 8000;
pub const kMultibandCompressorParam_OutputAmplitude1: ::libc::c_uint = 9000;
pub const kMultibandCompressorParam_OutputAmplitude2: ::libc::c_uint = 10000;
pub const kMultibandCompressorParam_OutputAmplitude3: ::libc::c_uint = 11000;
pub const kMultibandCompressorParam_OutputAmplitude4: ::libc::c_uint = 12000;
pub type Enum_Unnamed267 = ::libc::c_uint;
pub const kMultibandFilter_LowFilterType: ::libc::c_uint = 0;
pub const kMultibandFilter_LowFrequency: ::libc::c_uint = 1;
pub const kMultibandFilter_LowGain: ::libc::c_uint = 2;
pub const kMultibandFilter_CenterFreq1: ::libc::c_uint = 3;
pub const kMultibandFilter_CenterGain1: ::libc::c_uint = 4;
pub const kMultibandFilter_Bandwidth1: ::libc::c_uint = 5;
pub const kMultibandFilter_CenterFreq2: ::libc::c_uint = 6;
pub const kMultibandFilter_CenterGain2: ::libc::c_uint = 7;
pub const kMultibandFilter_Bandwidth2: ::libc::c_uint = 8;
pub const kMultibandFilter_CenterFreq3: ::libc::c_uint = 9;
pub const kMultibandFilter_CenterGain3: ::libc::c_uint = 10;
pub const kMultibandFilter_Bandwidth3: ::libc::c_uint = 11;
pub const kMultibandFilter_HighFilterType: ::libc::c_uint = 12;
pub const kMultibandFilter_HighFrequency: ::libc::c_uint = 13;
pub const kMultibandFilter_HighGain: ::libc::c_uint = 14;
pub type Enum_Unnamed268 = ::libc::c_uint;
pub const kRogerBeepParam_InGateThreshold: ::libc::c_uint = 0;
pub const kRogerBeepParam_InGateThresholdTime: ::libc::c_uint = 1;
pub const kRogerBeepParam_OutGateThreshold: ::libc::c_uint = 2;
pub const kRogerBeepParam_OutGateThresholdTime: ::libc::c_uint = 3;
pub const kRogerBeepParam_Sensitivity: ::libc::c_uint = 4;
pub const kRogerBeepParam_RogerType: ::libc::c_uint = 5;
pub const kRogerBeepParam_RogerGain: ::libc::c_uint = 6;
pub type Enum_Unnamed269 = ::libc::c_uint;
pub const kStereoMixerParam_Volume: ::libc::c_uint = 0;
pub const kStereoMixerParam_Pan: ::libc::c_uint = 1;
pub const kStereoMixerParam_PreAveragePower: ::libc::c_uint = 1000;
pub const kStereoMixerParam_PrePeakHoldLevel: ::libc::c_uint = 2000;
pub const kStereoMixerParam_PostAveragePower: ::libc::c_uint = 3000;
pub const kStereoMixerParam_PostPeakHoldLevel: ::libc::c_uint = 4000;
pub type Enum_Unnamed270 = ::libc::c_uint;
pub const kAUNetReceiveParam_Status: ::libc::c_uint = 0;
pub const kAUNetReceiveParam_NumParameters: ::libc::c_uint = 1;
pub type Enum_Unnamed271 = ::libc::c_uint;
pub const kAUNetSendParam_Status: ::libc::c_uint = 0;
pub const kAUNetSendParam_NumParameters: ::libc::c_uint = 1;
pub type Enum_Unnamed272 = ::libc::c_uint;
pub const kAUNetStatus_NotConnected: ::libc::c_uint = 0;
pub const kAUNetStatus_Connected: ::libc::c_uint = 1;
pub const kAUNetStatus_Overflow: ::libc::c_uint = 2;
pub const kAUNetStatus_Underflow: ::libc::c_uint = 3;
pub const kAUNetStatus_Connecting: ::libc::c_uint = 4;
pub const kAUNetStatus_Listening: ::libc::c_uint = 5;
pub type Enum_Unnamed273 = ::libc::c_uint;
pub const kMusicDeviceParam_Tuning: ::libc::c_uint = 0;
pub const kMusicDeviceParam_Volume: ::libc::c_uint = 1;
pub const kMusicDeviceParam_ReverbVolume: ::libc::c_uint = 2;
pub type Enum_Unnamed274 = ::libc::c_uint;
pub const kRandomParam_BoundA: ::libc::c_uint = 0;
pub const kRandomParam_BoundB: ::libc::c_uint = 1;
pub const kRandomParam_Curve: ::libc::c_uint = 2;
pub type MusicDeviceInstrumentID = UInt32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MusicDeviceStdNoteParams {
    pub argCount: UInt32,
    pub mPitch: Float32,
    pub mVelocity: Float32,
}
impl ::std::clone::Clone for Struct_MusicDeviceStdNoteParams {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MusicDeviceStdNoteParams {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MusicDeviceStdNoteParams = Struct_MusicDeviceStdNoteParams;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_NoteParamsControlValue {
    pub mID: AudioUnitParameterID,
    pub mValue: AudioUnitParameterValue,
}
impl ::std::clone::Clone for Struct_NoteParamsControlValue {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_NoteParamsControlValue {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type NoteParamsControlValue = Struct_NoteParamsControlValue;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MusicDeviceNoteParams {
    pub argCount: UInt32,
    pub mPitch: Float32,
    pub mVelocity: Float32,
    pub mControls: [NoteParamsControlValue; 1usize],
}
impl ::std::clone::Clone for Struct_MusicDeviceNoteParams {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MusicDeviceNoteParams {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MusicDeviceNoteParams = Struct_MusicDeviceNoteParams;
pub type Enum_Unnamed275 = ::libc::c_uint;
pub const kMusicNoteEvent_UseGroupInstrument: ::libc::c_uint = ::std::u32::MAX;
pub const kMusicNoteEvent_Unused: ::libc::c_uint = ::std::u32::MAX;
pub type MusicDeviceGroupID = UInt32;
pub type NoteInstanceID = UInt32;
pub type MusicDeviceComponent = AudioComponentInstance;
pub type Enum_Unnamed276 = ::libc::c_uint;
pub const kMusicDeviceRange: ::libc::c_uint = 256;
pub const kMusicDeviceMIDIEventSelect: ::libc::c_uint = 257;
pub const kMusicDeviceSysExSelect: ::libc::c_uint = 258;
pub const kMusicDevicePrepareInstrumentSelect: ::libc::c_uint = 259;
pub const kMusicDeviceReleaseInstrumentSelect: ::libc::c_uint = 260;
pub const kMusicDeviceStartNoteSelect: ::libc::c_uint = 261;
pub const kMusicDeviceStopNoteSelect: ::libc::c_uint = 262;
pub type MusicDeviceMIDIEventProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inStatus: UInt32, inData1: UInt32,
                                        inData2: UInt32,
                                        inOffsetSampleFrame: UInt32)
                              -> OSStatus>;
pub type MusicDeviceSysExProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inData: *const UInt8,
                                        inLength: UInt32) -> OSStatus>;
pub type MusicDeviceStartNoteProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inInstrument: MusicDeviceInstrumentID,
                                        inGroupID: MusicDeviceGroupID,
                                        outNoteInstanceID:
                                            *mut NoteInstanceID,
                                        inOffsetSampleFrame: UInt32,
                                        inParams:
                                            *const MusicDeviceNoteParams)
                              -> OSStatus>;
pub type MusicDeviceStopNoteProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inGroupID: MusicDeviceGroupID,
                                        inNoteInstanceID: NoteInstanceID,
                                        inOffsetSampleFrame: UInt32)
                              -> OSStatus>;
pub type AudioCodec = AudioComponentInstance;
pub type AudioCodecPropertyID = UInt32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioCodecMagicCookieInfo {
    pub mMagicCookieSize: UInt32,
    pub mMagicCookie: *const ::libc::c_void,
}
impl ::std::clone::Clone for Struct_AudioCodecMagicCookieInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioCodecMagicCookieInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioCodecMagicCookieInfo = Struct_AudioCodecMagicCookieInfo;
pub type Enum_Unnamed277 = ::libc::c_uint;
pub const kAudioDecoderComponentType: ::libc::c_uint = 1633969507;
pub const kAudioEncoderComponentType: ::libc::c_uint = 1634037347;
pub const kAudioUnityCodecComponentType: ::libc::c_uint = 1633903715;
pub type Enum_Unnamed278 = ::libc::c_uint;
pub const kAudioCodecPropertySupportedInputFormats: ::libc::c_uint =
    1768320291;
pub const kAudioCodecPropertySupportedOutputFormats: ::libc::c_uint =
    1868983587;
pub const kAudioCodecPropertyAvailableInputSampleRates: ::libc::c_uint =
    1634300786;
pub const kAudioCodecPropertyAvailableOutputSampleRates: ::libc::c_uint =
    1634694002;
pub const kAudioCodecPropertyAvailableBitRateRange: ::libc::c_uint =
    1633841780;
pub const kAudioCodecPropertyMinimumNumberInputPackets: ::libc::c_uint =
    1835952496;
pub const kAudioCodecPropertyMinimumNumberOutputPackets: ::libc::c_uint =
    1835954032;
pub const kAudioCodecPropertyAvailableNumberChannels: ::libc::c_uint =
    1668116067;
pub const kAudioCodecPropertyDoesSampleRateConversion: ::libc::c_uint =
    1819112035;
pub const kAudioCodecPropertyAvailableInputChannelLayoutTags: ::libc::c_uint =
    1634296684;
pub const kAudioCodecPropertyAvailableOutputChannelLayoutTags: ::libc::c_uint
          =
    1634689900;
pub const kAudioCodecPropertyInputFormatsForOutputFormat: ::libc::c_uint =
    1768305775;
pub const kAudioCodecPropertyOutputFormatsForInputFormat: ::libc::c_uint =
    1868969065;
pub const kAudioCodecPropertyFormatInfo: ::libc::c_uint = 1633904233;
pub type Enum_Unnamed279 = ::libc::c_uint;
pub const kAudioCodecPropertyInputBufferSize: ::libc::c_uint = 1952609638;
pub const kAudioCodecPropertyPacketFrameSize: ::libc::c_uint = 1885432678;
pub const kAudioCodecPropertyHasVariablePacketByteSizes: ::libc::c_uint =
    1987078975;
pub const kAudioCodecPropertyMaximumPacketByteSize: ::libc::c_uint =
    1885432674;
pub const kAudioCodecPropertyPacketSizeLimitForVBR: ::libc::c_uint =
    1885432684;
pub const kAudioCodecPropertyCurrentInputFormat: ::libc::c_uint = 1768320372;
pub const kAudioCodecPropertyCurrentOutputFormat: ::libc::c_uint = 1868983668;
pub const kAudioCodecPropertyMagicCookie: ::libc::c_uint = 1802857321;
pub const kAudioCodecPropertyUsedInputBufferSize: ::libc::c_uint = 1969386854;
pub const kAudioCodecPropertyIsInitialized: ::libc::c_uint = 1768843636;
pub const kAudioCodecPropertyCurrentTargetBitRate: ::libc::c_uint =
    1651663220;
pub const kAudioCodecPropertyCurrentInputSampleRate: ::libc::c_uint =
    1667855218;
pub const kAudioCodecPropertyCurrentOutputSampleRate: ::libc::c_uint =
    1668248434;
pub const kAudioCodecPropertyQualitySetting: ::libc::c_uint = 1936876401;
pub const kAudioCodecPropertyApplicableBitRateRange: ::libc::c_uint =
    1651668065;
pub const kAudioCodecPropertyRecommendedBitRateRange: ::libc::c_uint =
    1651668082;
pub const kAudioCodecPropertyApplicableInputSampleRates: ::libc::c_uint =
    1769173601;
pub const kAudioCodecPropertyApplicableOutputSampleRates: ::libc::c_uint =
    1869836897;
pub const kAudioCodecPropertyPaddedZeros: ::libc::c_uint = 1885430832;
pub const kAudioCodecPropertyPrimeMethod: ::libc::c_uint = 1886547309;
pub const kAudioCodecPropertyPrimeInfo: ::libc::c_uint = 1886546285;
pub const kAudioCodecPropertyCurrentInputChannelLayout: ::libc::c_uint =
    1768123424;
pub const kAudioCodecPropertyCurrentOutputChannelLayout: ::libc::c_uint =
    1868786720;
pub const kAudioCodecPropertySettings: ::libc::c_uint = 1633907488;
pub const kAudioCodecPropertyFormatList: ::libc::c_uint = 1633904236;
pub const kAudioCodecPropertyBitRateControlMode: ::libc::c_uint = 1633903206;
pub const kAudioCodecPropertySoundQualityForVBR: ::libc::c_uint = 1986163313;
pub const kAudioCodecPropertyDelayMode: ::libc::c_uint = 1684893540;
pub const kAudioCodecPropertyAdjustLocalQuality: ::libc::c_uint = 1584488812;
pub const kAudioCodecPropertyProgramTargetLevel: ::libc::c_uint = 1886418028;
pub const kAudioCodecPropertyDynamicRangeControlMode: ::libc::c_uint =
    1835299427;
pub const kAudioCodecPropertyProgramTargetLevelConstant: ::libc::c_uint =
    1886678115;
pub type Enum_Unnamed280 = ::libc::c_uint;
pub const kAudioCodecQuality_Max: ::libc::c_uint = 127;
pub const kAudioCodecQuality_High: ::libc::c_uint = 96;
pub const kAudioCodecQuality_Medium: ::libc::c_uint = 64;
pub const kAudioCodecQuality_Low: ::libc::c_uint = 32;
pub const kAudioCodecQuality_Min: ::libc::c_uint = 0;
pub type Enum_Unnamed281 = ::libc::c_uint;
pub const kAudioCodecPrimeMethod_Pre: ::libc::c_uint = 0;
pub const kAudioCodecPrimeMethod_Normal: ::libc::c_uint = 1;
pub const kAudioCodecPrimeMethod_None: ::libc::c_uint = 2;
pub type Enum_Unnamed282 = ::libc::c_uint;
pub const kAudioCodecBitRateControlMode_Constant: ::libc::c_uint = 0;
pub const kAudioCodecBitRateControlMode_LongTermAverage: ::libc::c_uint = 1;
pub const kAudioCodecBitRateControlMode_VariableConstrained: ::libc::c_uint =
    2;
pub const kAudioCodecBitRateControlMode_Variable: ::libc::c_uint = 3;
pub type Enum_Unnamed283 = ::libc::c_uint;
pub const kAudioCodecDelayMode_Compatibility: ::libc::c_uint = 0;
pub const kAudioCodecDelayMode_Minimum: ::libc::c_uint = 1;
pub const kAudioCodecDelayMode_Optimal: ::libc::c_uint = 2;
pub type Enum_Unnamed284 = ::libc::c_uint;
pub const kProgramTargetLevel_None: ::libc::c_uint = 0;
pub const kProgramTargetLevel_Minus31dB: ::libc::c_uint = 1;
pub const kProgramTargetLevel_Minus23dB: ::libc::c_uint = 2;
pub const kProgramTargetLevel_Minus20dB: ::libc::c_uint = 3;
pub type Enum_Unnamed285 = ::libc::c_uint;
pub const kDynamicRangeControlMode_None: ::libc::c_uint = 0;
pub const kDynamicRangeControlMode_Light: ::libc::c_uint = 1;
pub const kDynamicRangeControlMode_Heavy: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioCodecPrimeInfo {
    pub leadingFrames: UInt32,
    pub trailingFrames: UInt32,
}
impl ::std::clone::Clone for Struct_AudioCodecPrimeInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioCodecPrimeInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioCodecPrimeInfo = Struct_AudioCodecPrimeInfo;
pub type Enum_Unnamed286 = ::libc::c_uint;
pub const kAudioSettingsFlags_ExpertParameter: ::libc::c_uint = 1;
pub const kAudioSettingsFlags_InvisibleParameter: ::libc::c_uint = 2;
pub const kAudioSettingsFlags_MetaParameter: ::libc::c_uint = 4;
pub const kAudioSettingsFlags_UserInterfaceParameter: ::libc::c_uint = 8;
pub type Enum_Unnamed287 = ::libc::c_uint;
pub const kAudioCodecProduceOutputPacketFailure: ::libc::c_uint = 1;
pub const kAudioCodecProduceOutputPacketSuccess: ::libc::c_uint = 2;
pub const kAudioCodecProduceOutputPacketSuccessHasMore: ::libc::c_uint = 3;
pub const kAudioCodecProduceOutputPacketNeedsMoreInputData: ::libc::c_uint =
    4;
pub const kAudioCodecProduceOutputPacketAtEOF: ::libc::c_uint = 5;
pub type Enum_Unnamed288 = ::libc::c_uint;
pub const kAudioCodecGetPropertyInfoSelect: ::libc::c_uint = 1;
pub const kAudioCodecGetPropertySelect: ::libc::c_uint = 2;
pub const kAudioCodecSetPropertySelect: ::libc::c_uint = 3;
pub const kAudioCodecInitializeSelect: ::libc::c_uint = 4;
pub const kAudioCodecUninitializeSelect: ::libc::c_uint = 5;
pub const kAudioCodecAppendInputDataSelect: ::libc::c_uint = 6;
pub const kAudioCodecProduceOutputDataSelect: ::libc::c_uint = 7;
pub const kAudioCodecResetSelect: ::libc::c_uint = 8;
pub const kAudioCodecAppendInputBufferListSelect: ::libc::c_uint = 9;
pub const kAudioCodecProduceOutputBufferListSelect: ::libc::c_uint = 10;
pub type Enum_Unnamed289 = ::libc::c_uint;
pub const kAudioCodecNoError: ::libc::c_uint = 0;
pub const kAudioCodecUnspecifiedError: ::libc::c_uint = 2003329396;
pub const kAudioCodecUnknownPropertyError: ::libc::c_uint = 2003332927;
pub const kAudioCodecBadPropertySizeError: ::libc::c_uint = 561211770;
pub const kAudioCodecIllegalOperationError: ::libc::c_uint = 1852797029;
pub const kAudioCodecUnsupportedFormatError: ::libc::c_uint = 560226676;
pub const kAudioCodecStateError: ::libc::c_uint = 561214580;
pub const kAudioCodecNotEnoughBufferSpaceError: ::libc::c_uint = 560100710;
pub type AudioCodecGetPropertyInfoProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inPropertyID: AudioCodecPropertyID,
                                        outSize: *mut UInt32,
                                        outWritable: *mut Boolean)
                              -> OSStatus>;
pub type AudioCodecGetPropertyProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inPropertyID: AudioCodecPropertyID,
                                        ioPropertyDataSize: *mut UInt32,
                                        outPropertyData: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioCodecSetPropertyProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inPropertyID: AudioCodecPropertyID,
                                        inPropertyDataSize: UInt32,
                                        inPropertyData: *const ::libc::c_void)
                              -> OSStatus>;
pub type AudioCodecInitializeProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inInputFormat:
                                            *const AudioStreamBasicDescription,
                                        inOutputFormat:
                                            *const AudioStreamBasicDescription,
                                        inMagicCookie: *const ::libc::c_void,
                                        inMagicCookieByteSize: UInt32)
                              -> OSStatus>;
pub type AudioCodecUninitializeProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioCodecAppendInputDataProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inInputData: *const ::libc::c_void,
                                        ioInputDataByteSize: *mut UInt32,
                                        ioNumberPackets: *mut UInt32,
                                        inPacketDescription:
                                            *const AudioStreamPacketDescription)
                              -> OSStatus>;
pub type AudioCodecProduceOutputPacketsProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        outOutputData: *mut ::libc::c_void,
                                        ioOutputDataByteSize: *mut UInt32,
                                        ioNumberPackets: *mut UInt32,
                                        outPacketDescription:
                                            *mut AudioStreamPacketDescription,
                                        outStatus: *mut UInt32) -> OSStatus>;
pub type AudioCodecResetProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioCodecAppendInputBufferListProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        ioBufferList: *const AudioBufferList,
                                        inNumberPackets: *mut UInt32,
                                        inPacketDescription:
                                            *const AudioStreamPacketDescription,
                                        outBytesConsumed: *mut UInt32)
                              -> OSStatus>;
pub type AudioCodecProduceOutputBufferListProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        ioBufferList: *mut AudioBufferList,
                                        ioNumberPackets: *mut UInt32,
                                        outPacketDescription:
                                            *mut AudioStreamPacketDescription,
                                        outStatus: *mut UInt32) -> OSStatus>;
pub type Enum_Unnamed290 = ::libc::c_uint;
pub const kAudioCodecPropertyMinimumDelayMode: ::libc::c_uint = 1835296108;
pub type Enum_Unnamed291 = ::libc::c_uint;
pub const kAudioCodecPropertyNameCFString: ::libc::c_uint = 1819173229;
pub const kAudioCodecPropertyManufacturerCFString: ::libc::c_uint =
    1819107691;
pub const kAudioCodecPropertyFormatCFString: ::libc::c_uint = 1818652530;
pub type Enum_Unnamed292 = ::libc::c_uint;
pub const kAudioCodecPropertyRequiresPacketDescription: ::libc::c_uint =
    1885432676;
pub const kAudioCodecPropertyAvailableBitRates: ::libc::c_uint = 1651668003;
pub const kAudioCodecExtendFrequencies: ::libc::c_uint = 1633903974;
pub const kAudioCodecUseRecommendedSampleRate: ::libc::c_uint = 1970434930;
pub const kAudioCodecOutputPrecedence: ::libc::c_uint = 1869639794;
pub const kAudioCodecBitRateFormat: ::libc::c_uint = 1633903206;
pub const kAudioCodecDoesSampleRateConversion: ::libc::c_uint = 1819112035;
pub const kAudioCodecInputFormatsForOutputFormat: ::libc::c_uint = 1768305775;
pub const kAudioCodecOutputFormatsForInputFormat: ::libc::c_uint = 1868969065;
pub const kAudioCodecPropertyInputChannelLayout: ::libc::c_uint = 1768123424;
pub const kAudioCodecPropertyOutputChannelLayout: ::libc::c_uint = 1868786720;
pub const kAudioCodecPropertyAvailableInputChannelLayouts: ::libc::c_uint =
    1634296684;
pub const kAudioCodecPropertyAvailableOutputChannelLayouts: ::libc::c_uint =
    1634689900;
pub const kAudioCodecPropertyZeroFramesPadded: ::libc::c_uint = 1885430832;
pub type Enum_Unnamed293 = ::libc::c_uint;
pub const kAudioCodecBitRateFormat_CBR: ::libc::c_uint = 0;
pub const kAudioCodecBitRateFormat_ABR: ::libc::c_uint = 1;
pub const kAudioCodecBitRateFormat_VBR: ::libc::c_uint = 2;
pub type Enum_Unnamed294 = ::libc::c_uint;
pub const kAudioCodecOutputPrecedenceNone: ::libc::c_uint = 0;
pub const kAudioCodecOutputPrecedenceBitRate: ::libc::c_uint = 1;
pub const kAudioCodecOutputPrecedenceSampleRate: ::libc::c_uint = 2;
pub type MagicCookieInfo = Struct_AudioCodecMagicCookieInfo;
pub type Enum_Unnamed295 = ::libc::c_uint;
pub const kHintBasic: ::libc::c_uint = 0;
pub const kHintAdvanced: ::libc::c_uint = 1;
pub const kHintHidden: ::libc::c_uint = 2;
pub type Enum_Unnamed296 = ::libc::c_uint;
pub const kAudioFileAIFFType: ::libc::c_uint = 1095321158;
pub const kAudioFileAIFCType: ::libc::c_uint = 1095321155;
pub const kAudioFileWAVEType: ::libc::c_uint = 1463899717;
pub const kAudioFileSoundDesigner2Type: ::libc::c_uint = 1399075430;
pub const kAudioFileNextType: ::libc::c_uint = 1315264596;
pub const kAudioFileMP3Type: ::libc::c_uint = 1297106739;
pub const kAudioFileMP2Type: ::libc::c_uint = 1297106738;
pub const kAudioFileMP1Type: ::libc::c_uint = 1297106737;
pub const kAudioFileAC3Type: ::libc::c_uint = 1633889587;
pub const kAudioFileAAC_ADTSType: ::libc::c_uint = 1633973363;
pub const kAudioFileMPEG4Type: ::libc::c_uint = 1836069990;
pub const kAudioFileM4AType: ::libc::c_uint = 1832149350;
pub const kAudioFileM4BType: ::libc::c_uint = 1832149606;
pub const kAudioFileCAFType: ::libc::c_uint = 1667327590;
pub const kAudioFile3GPType: ::libc::c_uint = 862417008;
pub const kAudioFile3GP2Type: ::libc::c_uint = 862416946;
pub const kAudioFileAMRType: ::libc::c_uint = 1634562662;
pub type AudioFileTypeID = UInt32;
pub type Enum_Unnamed297 = ::libc::c_int;
pub const kAudioFileUnspecifiedError: ::libc::c_int = 2003334207;
pub const kAudioFileUnsupportedFileTypeError: ::libc::c_int = 1954115647;
pub const kAudioFileUnsupportedDataFormatError: ::libc::c_int = 1718449215;
pub const kAudioFileUnsupportedPropertyError: ::libc::c_int = 1886681407;
pub const kAudioFileBadPropertySizeError: ::libc::c_int = 561211770;
pub const kAudioFilePermissionsError: ::libc::c_int = 1886547263;
pub const kAudioFileNotOptimizedError: ::libc::c_int = 1869640813;
pub const kAudioFileInvalidChunkError: ::libc::c_int = 1667787583;
pub const kAudioFileDoesNotAllow64BitDataSizeError: ::libc::c_int =
    1868981823;
pub const kAudioFileInvalidPacketOffsetError: ::libc::c_int = 1885563711;
pub const kAudioFileInvalidFileError: ::libc::c_int = 1685348671;
pub const kAudioFileOperationNotSupportedError: ::libc::c_int = 1869627199;
pub const kAudioFileNotOpenError: ::libc::c_int = -38;
pub const kAudioFileEndOfFileError: ::libc::c_int = -39;
pub const kAudioFilePositionError: ::libc::c_int = -40;
pub const kAudioFileFileNotFoundError: ::libc::c_int = -43;
pub type Enum_Unnamed298 = ::libc::c_uint;
pub const kAudioFileFlags_EraseFile: ::libc::c_uint = 1;
pub const kAudioFileFlags_DontPageAlignAudioData: ::libc::c_uint = 2;
pub type Enum_Unnamed299 = ::libc::c_uint;
pub const kAudioFileReadPermission: ::libc::c_uint = 1;
pub const kAudioFileWritePermission: ::libc::c_uint = 2;
pub const kAudioFileReadWritePermission: ::libc::c_uint = 3;
pub type AudioFileID = *mut Struct_OpaqueAudioFileID;
pub type AudioFilePropertyID = UInt32;
pub type Enum_Unnamed300 = ::libc::c_uint;
pub const kAudioFileLoopDirection_NoLooping: ::libc::c_uint = 0;
pub const kAudioFileLoopDirection_Forward: ::libc::c_uint = 1;
pub const kAudioFileLoopDirection_ForwardAndBackward: ::libc::c_uint = 2;
pub const kAudioFileLoopDirection_Backward: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioFile_SMPTE_Time {
    pub mHours: SInt8,
    pub mMinutes: UInt8,
    pub mSeconds: UInt8,
    pub mFrames: UInt8,
    pub mSubFrameSampleOffset: UInt32,
}
impl ::std::clone::Clone for Struct_AudioFile_SMPTE_Time {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioFile_SMPTE_Time {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioFile_SMPTE_Time = Struct_AudioFile_SMPTE_Time;
pub type Enum_Unnamed301 = ::libc::c_uint;
pub const kAudioFileMarkerType_Generic: ::libc::c_uint = 0;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioFileMarker {
    pub mFramePosition: Float64,
    pub mName: CFStringRef,
    pub mMarkerID: SInt32,
    pub mSMPTETime: AudioFile_SMPTE_Time,
    pub mType: UInt32,
    pub mReserved: UInt16,
    pub mChannel: UInt16,
}
impl ::std::clone::Clone for Struct_AudioFileMarker {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioFileMarker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioFileMarker = Struct_AudioFileMarker;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioFileMarkerList {
    pub mSMPTE_TimeType: UInt32,
    pub mNumberMarkers: UInt32,
    pub mMarkers: [AudioFileMarker; 1usize],
}
impl ::std::clone::Clone for Struct_AudioFileMarkerList {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioFileMarkerList {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioFileMarkerList = Struct_AudioFileMarkerList;
pub type Enum_Unnamed302 = ::libc::c_uint;
pub const kAudioFileRegionFlag_LoopEnable: ::libc::c_uint = 1;
pub const kAudioFileRegionFlag_PlayForward: ::libc::c_uint = 2;
pub const kAudioFileRegionFlag_PlayBackward: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioFileRegion {
    pub mRegionID: UInt32,
    pub mName: CFStringRef,
    pub mFlags: UInt32,
    pub mNumberMarkers: UInt32,
    pub mMarkers: [AudioFileMarker; 1usize],
}
impl ::std::clone::Clone for Struct_AudioFileRegion {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioFileRegion {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioFileRegion = Struct_AudioFileRegion;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioFileRegionList {
    pub mSMPTE_TimeType: UInt32,
    pub mNumberRegions: UInt32,
    pub mRegions: [AudioFileRegion; 1usize],
}
impl ::std::clone::Clone for Struct_AudioFileRegionList {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioFileRegionList {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioFileRegionList = Struct_AudioFileRegionList;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioFramePacketTranslation {
    pub mFrame: SInt64,
    pub mPacket: SInt64,
    pub mFrameOffsetInPacket: UInt32,
}
impl ::std::clone::Clone for Struct_AudioFramePacketTranslation {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioFramePacketTranslation {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioFramePacketTranslation = Struct_AudioFramePacketTranslation;
pub type Enum_Unnamed303 = ::libc::c_uint;
pub const kBytePacketTranslationFlag_IsEstimate: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioBytePacketTranslation {
    pub mByte: SInt64,
    pub mPacket: SInt64,
    pub mByteOffsetInPacket: UInt32,
    pub mFlags: UInt32,
}
impl ::std::clone::Clone for Struct_AudioBytePacketTranslation {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioBytePacketTranslation {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioBytePacketTranslation = Struct_AudioBytePacketTranslation;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioFilePacketTableInfo {
    pub mNumberValidFrames: SInt64,
    pub mPrimingFrames: SInt32,
    pub mRemainderFrames: SInt32,
}
impl ::std::clone::Clone for Struct_AudioFilePacketTableInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioFilePacketTableInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioFilePacketTableInfo = Struct_AudioFilePacketTableInfo;
pub type AudioFile_ReadProc =
    ::std::option::Option<extern "C" fn(inClientData: *mut ::libc::c_void,
                                        inPosition: SInt64,
                                        requestCount: UInt32,
                                        buffer: *mut ::libc::c_void,
                                        actualCount: *mut UInt32)
                              -> OSStatus>;
pub type AudioFile_WriteProc =
    ::std::option::Option<extern "C" fn(inClientData: *mut ::libc::c_void,
                                        inPosition: SInt64,
                                        requestCount: UInt32,
                                        buffer: *const ::libc::c_void,
                                        actualCount: *mut UInt32)
                              -> OSStatus>;
pub type AudioFile_GetSizeProc =
    ::std::option::Option<extern "C" fn(inClientData: *mut ::libc::c_void)
                              -> SInt64>;
pub type AudioFile_SetSizeProc =
    ::std::option::Option<extern "C" fn(inClientData: *mut ::libc::c_void,
                                        inSize: SInt64) -> OSStatus>;
pub type Enum_Unnamed304 = ::libc::c_uint;
pub const kAudioFilePropertyFileFormat: ::libc::c_uint = 1717988724;
pub const kAudioFilePropertyDataFormat: ::libc::c_uint = 1684434292;
pub const kAudioFilePropertyIsOptimized: ::libc::c_uint = 1869640813;
pub const kAudioFilePropertyMagicCookieData: ::libc::c_uint = 1835493731;
pub const kAudioFilePropertyAudioDataByteCount: ::libc::c_uint = 1650683508;
pub const kAudioFilePropertyAudioDataPacketCount: ::libc::c_uint = 1885564532;
pub const kAudioFilePropertyMaximumPacketSize: ::libc::c_uint = 1886616165;
pub const kAudioFilePropertyDataOffset: ::libc::c_uint = 1685022310;
pub const kAudioFilePropertyChannelLayout: ::libc::c_uint = 1668112752;
pub const kAudioFilePropertyDeferSizeUpdates: ::libc::c_uint = 1685289589;
pub const kAudioFilePropertyDataFormatName: ::libc::c_uint = 1718512997;
pub const kAudioFilePropertyMarkerList: ::libc::c_uint = 1835756659;
pub const kAudioFilePropertyRegionList: ::libc::c_uint = 1919380595;
pub const kAudioFilePropertyPacketToFrame: ::libc::c_uint = 1886086770;
pub const kAudioFilePropertyFrameToPacket: ::libc::c_uint = 1718775915;
pub const kAudioFilePropertyPacketToByte: ::libc::c_uint = 1886085753;
pub const kAudioFilePropertyByteToPacket: ::libc::c_uint = 1652125803;
pub const kAudioFilePropertyChunkIDs: ::libc::c_uint = 1667787108;
pub const kAudioFilePropertyInfoDictionary: ::libc::c_uint = 1768842863;
pub const kAudioFilePropertyPacketTableInfo: ::libc::c_uint = 1886283375;
pub const kAudioFilePropertyFormatList: ::libc::c_uint = 1718383476;
pub const kAudioFilePropertyPacketSizeUpperBound: ::libc::c_uint = 1886090594;
pub const kAudioFilePropertyReserveDuration: ::libc::c_uint = 1920168566;
pub const kAudioFilePropertyEstimatedDuration: ::libc::c_uint = 1701082482;
pub const kAudioFilePropertyBitRate: ::libc::c_uint = 1651663220;
pub const kAudioFilePropertyID3Tag: ::libc::c_uint = 1768174452;
pub const kAudioFilePropertySourceBitDepth: ::libc::c_uint = 1935832164;
pub const kAudioFilePropertyAlbumArtwork: ::libc::c_uint = 1633776244;
pub const kAudioFilePropertyAudioTrackCount: ::libc::c_uint = 1635017588;
pub const kAudioFilePropertyUseAudioTrack: ::libc::c_uint = 1969321067;
pub type Enum_Unnamed305 = ::libc::c_uint;
pub const kAudioFileGlobalInfo_ReadableTypes: ::libc::c_uint = 1634103910;
pub const kAudioFileGlobalInfo_WritableTypes: ::libc::c_uint = 1634105190;
pub const kAudioFileGlobalInfo_FileTypeName: ::libc::c_uint = 1718906477;
pub const kAudioFileGlobalInfo_AvailableStreamDescriptionsForFormat:
          ::libc::c_uint =
    1935960420;
pub const kAudioFileGlobalInfo_AvailableFormatIDs: ::libc::c_uint =
    1718446436;
pub const kAudioFileGlobalInfo_AllExtensions: ::libc::c_uint = 1634498676;
pub const kAudioFileGlobalInfo_AllHFSTypeCodes: ::libc::c_uint = 1634231923;
pub const kAudioFileGlobalInfo_AllUTIs: ::libc::c_uint = 1635087465;
pub const kAudioFileGlobalInfo_AllMIMETypes: ::libc::c_uint = 1634560365;
pub const kAudioFileGlobalInfo_ExtensionsForType: ::libc::c_uint = 1717926004;
pub const kAudioFileGlobalInfo_HFSTypeCodesForType: ::libc::c_uint =
    1718118003;
pub const kAudioFileGlobalInfo_UTIsForType: ::libc::c_uint = 1718973545;
pub const kAudioFileGlobalInfo_MIMETypesForType: ::libc::c_uint = 1718446445;
pub const kAudioFileGlobalInfo_TypesForMIMEType: ::libc::c_uint = 1953327469;
pub const kAudioFileGlobalInfo_TypesForUTI: ::libc::c_uint = 1953854569;
pub const kAudioFileGlobalInfo_TypesForHFSTypeCode: ::libc::c_uint =
    1952999027;
pub const kAudioFileGlobalInfo_TypesForExtension: ::libc::c_uint = 1952807028;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioFileTypeAndFormatID {
    pub mFileType: AudioFileTypeID,
    pub mFormatID: UInt32,
}
impl ::std::clone::Clone for Struct_AudioFileTypeAndFormatID {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioFileTypeAndFormatID {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioFileTypeAndFormatID = Struct_AudioFileTypeAndFormatID;
pub type AudioFileStreamPropertyID = UInt32;
pub enum Struct_OpaqueAudioFileStreamID { }
pub type AudioFileStreamID = *mut Struct_OpaqueAudioFileStreamID;
pub type AudioFileStream_PropertyListenerProc =
    ::std::option::Option<extern "C" fn(inClientData: *mut ::libc::c_void,
                                        inAudioFileStream: AudioFileStreamID,
                                        inPropertyID:
                                            AudioFileStreamPropertyID,
                                        ioFlags: *mut UInt32) -> ()>;
pub type AudioFileStream_PacketsProc =
    ::std::option::Option<extern "C" fn(inClientData: *mut ::libc::c_void,
                                        inNumberBytes: UInt32,
                                        inNumberPackets: UInt32,
                                        inInputData: *const ::libc::c_void,
                                        inPacketDescriptions:
                                            *mut AudioStreamPacketDescription)
                              -> ()>;
pub type Enum_Unnamed306 = ::libc::c_uint;
pub const kAudioFileStreamPropertyFlag_PropertyIsCached: ::libc::c_uint = 1;
pub const kAudioFileStreamPropertyFlag_CacheProperty: ::libc::c_uint = 2;
pub const kAudioFileStreamParseFlag_Discontinuity: ::libc::c_uint = 1;
pub const kAudioFileStreamSeekFlag_OffsetIsEstimated: ::libc::c_uint = 1;
pub type Enum_Unnamed307 = ::libc::c_uint;
pub const kAudioFileStreamError_UnsupportedFileType: ::libc::c_uint =
    1954115647;
pub const kAudioFileStreamError_UnsupportedDataFormat: ::libc::c_uint =
    1718449215;
pub const kAudioFileStreamError_UnsupportedProperty: ::libc::c_uint =
    1886681407;
pub const kAudioFileStreamError_BadPropertySize: ::libc::c_uint = 561211770;
pub const kAudioFileStreamError_NotOptimized: ::libc::c_uint = 1869640813;
pub const kAudioFileStreamError_InvalidPacketOffset: ::libc::c_uint =
    1885563711;
pub const kAudioFileStreamError_InvalidFile: ::libc::c_uint = 1685348671;
pub const kAudioFileStreamError_ValueUnknown: ::libc::c_uint = 1970170687;
pub const kAudioFileStreamError_DataUnavailable: ::libc::c_uint = 1836020325;
pub const kAudioFileStreamError_IllegalOperation: ::libc::c_uint = 1852797029;
pub const kAudioFileStreamError_UnspecifiedError: ::libc::c_uint = 2003334207;
pub const kAudioFileStreamError_DiscontinuityCantRecover: ::libc::c_uint =
    1685283617;
pub type Enum_Unnamed308 = ::libc::c_uint;
pub const kAudioFileStreamProperty_ReadyToProducePackets: ::libc::c_uint =
    1919247481;
pub const kAudioFileStreamProperty_FileFormat: ::libc::c_uint = 1717988724;
pub const kAudioFileStreamProperty_DataFormat: ::libc::c_uint = 1684434292;
pub const kAudioFileStreamProperty_FormatList: ::libc::c_uint = 1718383476;
pub const kAudioFileStreamProperty_MagicCookieData: ::libc::c_uint =
    1835493731;
pub const kAudioFileStreamProperty_AudioDataByteCount: ::libc::c_uint =
    1650683508;
pub const kAudioFileStreamProperty_AudioDataPacketCount: ::libc::c_uint =
    1885564532;
pub const kAudioFileStreamProperty_MaximumPacketSize: ::libc::c_uint =
    1886616165;
pub const kAudioFileStreamProperty_DataOffset: ::libc::c_uint = 1685022310;
pub const kAudioFileStreamProperty_ChannelLayout: ::libc::c_uint = 1668112752;
pub const kAudioFileStreamProperty_PacketToFrame: ::libc::c_uint = 1886086770;
pub const kAudioFileStreamProperty_FrameToPacket: ::libc::c_uint = 1718775915;
pub const kAudioFileStreamProperty_PacketToByte: ::libc::c_uint = 1886085753;
pub const kAudioFileStreamProperty_ByteToPacket: ::libc::c_uint = 1652125803;
pub const kAudioFileStreamProperty_PacketTableInfo: ::libc::c_uint =
    1886283375;
pub const kAudioFileStreamProperty_PacketSizeUpperBound: ::libc::c_uint =
    1886090594;
pub const kAudioFileStreamProperty_AverageBytesPerPacket: ::libc::c_uint =
    1633841264;
pub const kAudioFileStreamProperty_BitRate: ::libc::c_uint = 1651663220;
pub const kAudioFileStreamProperty_InfoDictionary: ::libc::c_uint =
    1768842863;
pub type AudioFormatPropertyID = UInt32;
pub type Enum_Unnamed309 = ::libc::c_uint;
pub const kPanningMode_SoundField: ::libc::c_uint = 3;
pub const kPanningMode_VectorBasedPanning: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioPanningInfo {
    pub mPanningMode: UInt32,
    pub mCoordinateFlags: UInt32,
    pub mCoordinates: [Float32; 3usize],
    pub mGainScale: Float32,
    pub mOutputChannelMap: *const AudioChannelLayout,
}
impl ::std::clone::Clone for Struct_AudioPanningInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioPanningInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioPanningInfo = Struct_AudioPanningInfo;
pub type Enum_Unnamed310 = ::libc::c_uint;
pub const kAudioBalanceFadeType_MaxUnityGain: ::libc::c_uint = 0;
pub const kAudioBalanceFadeType_EqualPower: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioBalanceFade {
    pub mLeftRightBalance: Float32,
    pub mBackFrontFade: Float32,
    pub mType: UInt32,
    pub mChannelLayout: *const AudioChannelLayout,
}
impl ::std::clone::Clone for Struct_AudioBalanceFade {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioBalanceFade {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioBalanceFade = Struct_AudioBalanceFade;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioFormatInfo {
    pub mASBD: AudioStreamBasicDescription,
    pub mMagicCookie: *const ::libc::c_void,
    pub mMagicCookieSize: UInt32,
}
impl ::std::clone::Clone for Struct_AudioFormatInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioFormatInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioFormatInfo = Struct_AudioFormatInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ExtendedAudioFormatInfo {
    pub mASBD: AudioStreamBasicDescription,
    pub mMagicCookie: *const ::libc::c_void,
    pub mMagicCookieSize: UInt32,
    pub mClassDescription: AudioClassDescription,
}
impl ::std::clone::Clone for Struct_ExtendedAudioFormatInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ExtendedAudioFormatInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ExtendedAudioFormatInfo = Struct_ExtendedAudioFormatInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioFormatListItem {
    pub mASBD: AudioStreamBasicDescription,
    pub mChannelLayoutTag: AudioChannelLayoutTag,
}
impl ::std::clone::Clone for Struct_AudioFormatListItem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioFormatListItem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioFormatListItem = Struct_AudioFormatListItem;
pub type Enum_Unnamed311 = ::libc::c_uint;
pub const kAudioFormatProperty_FormatInfo: ::libc::c_uint = 1718449257;
pub const kAudioFormatProperty_FormatName: ::libc::c_uint = 1718509933;
pub const kAudioFormatProperty_EncodeFormatIDs: ::libc::c_uint = 1633906534;
pub const kAudioFormatProperty_DecodeFormatIDs: ::libc::c_uint = 1633904998;
pub const kAudioFormatProperty_FormatList: ::libc::c_uint = 1718383476;
pub const kAudioFormatProperty_ASBDFromESDS: ::libc::c_uint = 1702064996;
pub const kAudioFormatProperty_ChannelLayoutFromESDS: ::libc::c_uint =
    1702060908;
pub const kAudioFormatProperty_OutputFormatList: ::libc::c_uint = 1868983411;
pub const kAudioFormatProperty_FirstPlayableFormatFromList: ::libc::c_uint =
    1718642284;
pub const kAudioFormatProperty_FormatIsVBR: ::libc::c_uint = 1719034482;
pub const kAudioFormatProperty_FormatIsExternallyFramed: ::libc::c_uint =
    1717925990;
pub const kAudioFormatProperty_FormatIsEncrypted: ::libc::c_uint = 1668446576;
pub const kAudioFormatProperty_Encoders: ::libc::c_uint = 1635149166;
pub const kAudioFormatProperty_Decoders: ::libc::c_uint = 1635148901;
pub const kAudioFormatProperty_AvailableEncodeBitRates: ::libc::c_uint =
    1634034290;
pub const kAudioFormatProperty_AvailableEncodeSampleRates: ::libc::c_uint =
    1634038642;
pub const kAudioFormatProperty_AvailableEncodeChannelLayoutTags:
          ::libc::c_uint =
    1634034540;
pub const kAudioFormatProperty_AvailableEncodeNumberChannels: ::libc::c_uint =
    1635151459;
pub const kAudioFormatProperty_ASBDFromMPEGPacket: ::libc::c_uint =
    1633971568;
pub const kAudioFormatProperty_BitmapForLayoutTag: ::libc::c_uint =
    1651340391;
pub const kAudioFormatProperty_MatrixMixMap: ::libc::c_uint = 1835884912;
pub const kAudioFormatProperty_ChannelMap: ::libc::c_uint = 1667788144;
pub const kAudioFormatProperty_NumberOfChannelsForLayout: ::libc::c_uint =
    1852008557;
pub const kAudioFormatProperty_AreChannelLayoutsEquivalent: ::libc::c_uint =
    1667786097;
pub const kAudioFormatProperty_ChannelLayoutHash: ::libc::c_uint = 1667786849;
pub const kAudioFormatProperty_ValidateChannelLayout: ::libc::c_uint =
    1986093932;
pub const kAudioFormatProperty_ChannelLayoutForTag: ::libc::c_uint =
    1668116588;
pub const kAudioFormatProperty_TagForChannelLayout: ::libc::c_uint =
    1668116596;
pub const kAudioFormatProperty_ChannelLayoutName: ::libc::c_uint = 1819242093;
pub const kAudioFormatProperty_ChannelLayoutSimpleName: ::libc::c_uint =
    1819504237;
pub const kAudioFormatProperty_ChannelLayoutForBitmap: ::libc::c_uint =
    1668116578;
pub const kAudioFormatProperty_ChannelName: ::libc::c_uint = 1668178285;
pub const kAudioFormatProperty_ChannelShortName: ::libc::c_uint = 1668509293;
pub const kAudioFormatProperty_TagsForNumberOfChannels: ::libc::c_uint =
    1952540515;
pub const kAudioFormatProperty_PanningMatrix: ::libc::c_uint = 1885433453;
pub const kAudioFormatProperty_BalanceFade: ::libc::c_uint = 1650551910;
pub const kAudioFormatProperty_ID3TagSize: ::libc::c_uint = 1768174451;
pub const kAudioFormatProperty_ID3TagToDictionary: ::libc::c_uint =
    1768174436;
pub type Enum_Unnamed312 = ::libc::c_uint;
pub const kAudioFormatUnspecifiedError: ::libc::c_uint = 2003329396;
pub const kAudioFormatUnsupportedPropertyError: ::libc::c_uint = 1886547824;
pub const kAudioFormatBadPropertySizeError: ::libc::c_uint = 561211770;
pub const kAudioFormatBadSpecifierSizeError: ::libc::c_uint = 561213539;
pub const kAudioFormatUnsupportedDataFormatError: ::libc::c_uint = 1718449215;
pub const kAudioFormatUnknownFormatError: ::libc::c_uint = 560360820;
pub type Enum_Unnamed313 = ::libc::c_int;
pub const kAudioQueueErr_InvalidBuffer: ::libc::c_int = -66687;
pub const kAudioQueueErr_BufferEmpty: ::libc::c_int = -66686;
pub const kAudioQueueErr_DisposalPending: ::libc::c_int = -66685;
pub const kAudioQueueErr_InvalidProperty: ::libc::c_int = -66684;
pub const kAudioQueueErr_InvalidPropertySize: ::libc::c_int = -66683;
pub const kAudioQueueErr_InvalidParameter: ::libc::c_int = -66682;
pub const kAudioQueueErr_CannotStart: ::libc::c_int = -66681;
pub const kAudioQueueErr_InvalidDevice: ::libc::c_int = -66680;
pub const kAudioQueueErr_BufferInQueue: ::libc::c_int = -66679;
pub const kAudioQueueErr_InvalidRunState: ::libc::c_int = -66678;
pub const kAudioQueueErr_InvalidQueueType: ::libc::c_int = -66677;
pub const kAudioQueueErr_Permissions: ::libc::c_int = -66676;
pub const kAudioQueueErr_InvalidPropertyValue: ::libc::c_int = -66675;
pub const kAudioQueueErr_PrimeTimedOut: ::libc::c_int = -66674;
pub const kAudioQueueErr_CodecNotFound: ::libc::c_int = -66673;
pub const kAudioQueueErr_InvalidCodecAccess: ::libc::c_int = -66672;
pub const kAudioQueueErr_QueueInvalidated: ::libc::c_int = -66671;
pub const kAudioQueueErr_TooManyTaps: ::libc::c_int = -66670;
pub const kAudioQueueErr_InvalidTapContext: ::libc::c_int = -66669;
pub const kAudioQueueErr_RecordUnderrun: ::libc::c_int = -66668;
pub const kAudioQueueErr_InvalidTapType: ::libc::c_int = -66667;
pub const kAudioQueueErr_BufferEnqueuedTwice: ::libc::c_int = -66666;
pub const kAudioQueueErr_EnqueueDuringReset: ::libc::c_int = -66632;
pub const kAudioQueueErr_InvalidOfflineMode: ::libc::c_int = -66626;
pub type Enum_Unnamed314 = ::libc::c_uint;
pub const kAudioQueueProperty_IsRunning: ::libc::c_uint = 1634824814;
pub const kAudioQueueDeviceProperty_SampleRate: ::libc::c_uint = 1634825074;
pub const kAudioQueueDeviceProperty_NumberChannels: ::libc::c_uint =
    1634821219;
pub const kAudioQueueProperty_CurrentDevice: ::libc::c_uint = 1634820964;
pub const kAudioQueueProperty_MagicCookie: ::libc::c_uint = 1634823523;
pub const kAudioQueueProperty_MaximumOutputPacketSize: ::libc::c_uint =
    2020569203;
pub const kAudioQueueProperty_StreamDescription: ::libc::c_uint = 1634821748;
pub const kAudioQueueProperty_ChannelLayout: ::libc::c_uint = 1634820972;
pub const kAudioQueueProperty_EnableLevelMetering: ::libc::c_uint =
    1634823525;
pub const kAudioQueueProperty_CurrentLevelMeter: ::libc::c_uint = 1634823542;
pub const kAudioQueueProperty_CurrentLevelMeterDB: ::libc::c_uint =
    1634823524;
pub const kAudioQueueProperty_DecodeBufferSizeFrames: ::libc::c_uint =
    1684234854;
pub const kAudioQueueProperty_ConverterError: ::libc::c_uint = 1902343781;
pub const kAudioQueueProperty_EnableTimePitch: ::libc::c_uint = 1902081136;
pub const kAudioQueueProperty_TimePitchAlgorithm: ::libc::c_uint = 1903456353;
pub const kAudioQueueProperty_TimePitchBypass: ::libc::c_uint = 1903456354;
pub type Enum_Unnamed315 = ::libc::c_uint;
pub const kAudioQueueTimePitchAlgorithm_Spectral: ::libc::c_uint = 1936745827;
pub const kAudioQueueTimePitchAlgorithm_TimeDomain: ::libc::c_uint =
    1953064047;
pub const kAudioQueueTimePitchAlgorithm_Varispeed: ::libc::c_uint =
    1987276900;
pub type Enum_Unnamed316 = ::libc::c_uint;
pub const kAudioQueueParam_Volume: ::libc::c_uint = 1;
pub const kAudioQueueParam_PlayRate: ::libc::c_uint = 2;
pub const kAudioQueueParam_Pitch: ::libc::c_uint = 3;
pub const kAudioQueueParam_VolumeRampTime: ::libc::c_uint = 4;
pub const kAudioQueueParam_Pan: ::libc::c_uint = 13;
pub type Enum_Unnamed317 = ::libc::c_uint;
pub const kAudioQueueProcessingTap_PreEffects: ::libc::c_uint = 1;
pub const kAudioQueueProcessingTap_PostEffects: ::libc::c_uint = 2;
pub const kAudioQueueProcessingTap_Siphon: ::libc::c_uint = 4;
pub const kAudioQueueProcessingTap_StartOfStream: ::libc::c_uint = 256;
pub const kAudioQueueProcessingTap_EndOfStream: ::libc::c_uint = 512;
pub type AudioQueuePropertyID = UInt32;
pub type AudioQueueParameterID = UInt32;
pub type AudioQueueParameterValue = Float32;
pub enum Struct_OpaqueAudioQueue { }
pub type AudioQueueRef = *mut Struct_OpaqueAudioQueue;
pub enum Struct_OpaqueAudioQueueTimeline { }
pub type AudioQueueTimelineRef = *mut Struct_OpaqueAudioQueueTimeline;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioQueueBuffer {
    pub mAudioDataBytesCapacity: UInt32,
    pub mAudioData: *mut ::libc::c_void,
    pub mAudioDataByteSize: UInt32,
    pub mUserData: *mut ::libc::c_void,
    pub mPacketDescriptionCapacity: UInt32,
    pub mPacketDescriptions: *mut AudioStreamPacketDescription,
    pub mPacketDescriptionCount: UInt32,
}
impl ::std::clone::Clone for Struct_AudioQueueBuffer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioQueueBuffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioQueueBuffer = Struct_AudioQueueBuffer;
pub type AudioQueueBufferRef = *mut AudioQueueBuffer;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioQueueParameterEvent {
    pub mID: AudioQueueParameterID,
    pub mValue: AudioQueueParameterValue,
}
impl ::std::clone::Clone for Struct_AudioQueueParameterEvent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioQueueParameterEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioQueueParameterEvent = Struct_AudioQueueParameterEvent;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioQueueLevelMeterState {
    pub mAveragePower: Float32,
    pub mPeakPower: Float32,
}
impl ::std::clone::Clone for Struct_AudioQueueLevelMeterState {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioQueueLevelMeterState {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioQueueLevelMeterState = Struct_AudioQueueLevelMeterState;
pub enum Struct_OpaqueAudioQueueProcessingTap { }
pub type AudioQueueProcessingTapRef =
    *mut Struct_OpaqueAudioQueueProcessingTap;
pub type AudioQueueOutputCallbackBlock = ::libc::c_void;
pub type AudioQueueInputCallbackBlock = ::libc::c_void;
pub type AudioQueueOutputCallback =
    ::std::option::Option<extern "C" fn(inUserData: *mut ::libc::c_void,
                                        inAQ: AudioQueueRef,
                                        inBuffer: AudioQueueBufferRef) -> ()>;
pub type AudioQueueInputCallback =
    ::std::option::Option<extern "C" fn(inUserData: *mut ::libc::c_void,
                                        inAQ: AudioQueueRef,
                                        inBuffer: AudioQueueBufferRef,
                                        inStartTime: *const AudioTimeStamp,
                                        inNumberPacketDescriptions: UInt32,
                                        inPacketDescs:
                                            *const AudioStreamPacketDescription)
                              -> ()>;
pub type AudioQueuePropertyListenerProc =
    ::std::option::Option<extern "C" fn(inUserData: *mut ::libc::c_void,
                                        inAQ: AudioQueueRef,
                                        inID: AudioQueuePropertyID) -> ()>;
pub type AudioQueueProcessingTapCallback =
    ::std::option::Option<extern "C" fn(inClientData: *mut ::libc::c_void,
                                        inAQTap: AudioQueueProcessingTapRef,
                                        inNumberFrames: UInt32,
                                        ioTimeStamp: *mut AudioTimeStamp,
                                        ioFlags: *mut UInt32,
                                        outNumberFrames: *mut UInt32,
                                        ioData: *mut AudioBufferList) -> ()>;
pub type AudioObjectID = UInt32;
pub type AudioClassID = UInt32;
pub type AudioObjectPropertySelector = UInt32;
pub type AudioObjectPropertyScope = UInt32;
pub type AudioObjectPropertyElement = UInt32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioObjectPropertyAddress {
    pub mSelector: AudioObjectPropertySelector,
    pub mScope: AudioObjectPropertyScope,
    pub mElement: AudioObjectPropertyElement,
}
impl ::std::clone::Clone for Struct_AudioObjectPropertyAddress {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioObjectPropertyAddress {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioObjectPropertyAddress = Struct_AudioObjectPropertyAddress;
pub type Enum_Unnamed318 = ::libc::c_uint;
pub const kAudioHardwareNoError: ::libc::c_uint = 0;
pub const kAudioHardwareNotRunningError: ::libc::c_uint = 1937010544;
pub const kAudioHardwareUnspecifiedError: ::libc::c_uint = 2003329396;
pub const kAudioHardwareUnknownPropertyError: ::libc::c_uint = 2003332927;
pub const kAudioHardwareBadPropertySizeError: ::libc::c_uint = 561211770;
pub const kAudioHardwareIllegalOperationError: ::libc::c_uint = 1852797029;
pub const kAudioHardwareBadObjectError: ::libc::c_uint = 560947818;
pub const kAudioHardwareBadDeviceError: ::libc::c_uint = 560227702;
pub const kAudioHardwareBadStreamError: ::libc::c_uint = 561214578;
pub const kAudioHardwareUnsupportedOperationError: ::libc::c_uint =
    1970171760;
pub const kAudioDeviceUnsupportedFormatError: ::libc::c_uint = 560226676;
pub const kAudioDevicePermissionsError: ::libc::c_uint = 560492391;
pub type Enum_Unnamed319 = ::libc::c_uint;
pub const kAudioObjectUnknown: ::libc::c_uint = 0;
pub type Enum_Unnamed320 = ::libc::c_uint;
pub const kAudioObjectPropertyScopeGlobal: ::libc::c_uint = 1735159650;
pub const kAudioObjectPropertyScopeInput: ::libc::c_uint = 1768845428;
pub const kAudioObjectPropertyScopeOutput: ::libc::c_uint = 1869968496;
pub const kAudioObjectPropertyScopePlayThrough: ::libc::c_uint = 1886679669;
pub const kAudioObjectPropertyElementMaster: ::libc::c_uint = 0;
pub type Enum_Unnamed321 = ::libc::c_uint;
pub const kAudioObjectPropertySelectorWildcard: ::libc::c_uint = 707406378;
pub const kAudioObjectPropertyScopeWildcard: ::libc::c_uint = 707406378;
pub const kAudioObjectPropertyElementWildcard: ::libc::c_uint = ::std::u32::MAX;
pub const kAudioObjectClassIDWildcard: ::libc::c_uint = 707406378;
pub type Enum_Unnamed322 = ::libc::c_uint;
pub const kAudioObjectClassID: ::libc::c_uint = 1634689642;
pub type Enum_Unnamed323 = ::libc::c_uint;
pub const kAudioObjectPropertyBaseClass: ::libc::c_uint = 1650682995;
pub const kAudioObjectPropertyClass: ::libc::c_uint = 1668047219;
pub const kAudioObjectPropertyOwner: ::libc::c_uint = 1937007734;
pub const kAudioObjectPropertyName: ::libc::c_uint = 1819173229;
pub const kAudioObjectPropertyModelName: ::libc::c_uint = 1819111268;
pub const kAudioObjectPropertyManufacturer: ::libc::c_uint = 1819107691;
pub const kAudioObjectPropertyElementName: ::libc::c_uint = 1818454126;
pub const kAudioObjectPropertyElementCategoryName: ::libc::c_uint =
    1818452846;
pub const kAudioObjectPropertyElementNumberName: ::libc::c_uint = 1818455662;
pub const kAudioObjectPropertyOwnedObjects: ::libc::c_uint = 1870098020;
pub const kAudioObjectPropertyIdentify: ::libc::c_uint = 1768187246;
pub const kAudioObjectPropertySerialNumber: ::libc::c_uint = 1936618861;
pub const kAudioObjectPropertyFirmwareVersion: ::libc::c_uint = 1719105134;
pub type Enum_Unnamed324 = ::libc::c_uint;
pub const kAudioPlugInClassID: ::libc::c_uint = 1634757735;
pub type Enum_Unnamed325 = ::libc::c_uint;
pub const kAudioPlugInPropertyBundleID: ::libc::c_uint = 1885956452;
pub const kAudioPlugInPropertyDeviceList: ::libc::c_uint = 1684370979;
pub const kAudioPlugInPropertyTranslateUIDToDevice: ::libc::c_uint =
    1969841252;
pub const kAudioPlugInPropertyBoxList: ::libc::c_uint = 1651472419;
pub const kAudioPlugInPropertyTranslateUIDToBox: ::libc::c_uint = 1969841250;
pub type Enum_Unnamed326 = ::libc::c_uint;
pub const kAudioTransportManagerClassID: ::libc::c_uint = 1953656941;
pub type Enum_Unnamed327 = ::libc::c_uint;
pub const kAudioTransportManagerPropertyEndPointList: ::libc::c_uint =
    1701733411;
pub const kAudioTransportManagerPropertyTranslateUIDToEndPoint: ::libc::c_uint
          =
    1969841253;
pub const kAudioTransportManagerPropertyTransportType: ::libc::c_uint =
    1953653102;
pub type Enum_Unnamed328 = ::libc::c_uint;
pub const kAudioBoxClassID: ::libc::c_uint = 1633841016;
pub type Enum_Unnamed329 = ::libc::c_uint;
pub const kAudioBoxPropertyBoxUID: ::libc::c_uint = 1651861860;
pub const kAudioBoxPropertyTransportType: ::libc::c_uint = 1953653102;
pub const kAudioBoxPropertyHasAudio: ::libc::c_uint = 1651007861;
pub const kAudioBoxPropertyHasVideo: ::libc::c_uint = 1651013225;
pub const kAudioBoxPropertyHasMIDI: ::libc::c_uint = 1651010921;
pub const kAudioBoxPropertyIsProtected: ::libc::c_uint = 1651536495;
pub const kAudioBoxPropertyAcquired: ::libc::c_uint = 1652060014;
pub const kAudioBoxPropertyAcquisitionFailed: ::libc::c_uint = 1652060006;
pub const kAudioBoxPropertyDeviceList: ::libc::c_uint = 1650751011;
pub type Enum_Unnamed330 = ::libc::c_uint;
pub const kAudioDeviceClassID: ::libc::c_uint = 1633969526;
pub type Enum_Unnamed331 = ::libc::c_uint;
pub const kAudioDeviceTransportTypeUnknown: ::libc::c_uint = 0;
pub const kAudioDeviceTransportTypeBuiltIn: ::libc::c_uint = 1651274862;
pub const kAudioDeviceTransportTypeAggregate: ::libc::c_uint = 1735554416;
pub const kAudioDeviceTransportTypeVirtual: ::libc::c_uint = 1986622068;
pub const kAudioDeviceTransportTypePCI: ::libc::c_uint = 1885563168;
pub const kAudioDeviceTransportTypeUSB: ::libc::c_uint = 1970496032;
pub const kAudioDeviceTransportTypeFireWire: ::libc::c_uint = 825440564;
pub const kAudioDeviceTransportTypeBluetooth: ::libc::c_uint = 1651275109;
pub const kAudioDeviceTransportTypeBluetoothLE: ::libc::c_uint = 1651271009;
pub const kAudioDeviceTransportTypeHDMI: ::libc::c_uint = 1751412073;
pub const kAudioDeviceTransportTypeDisplayPort: ::libc::c_uint = 1685090932;
pub const kAudioDeviceTransportTypeAirPlay: ::libc::c_uint = 1634300528;
pub const kAudioDeviceTransportTypeAVB: ::libc::c_uint = 1700886114;
pub const kAudioDeviceTransportTypeThunderbolt: ::libc::c_uint = 1953002862;
pub type Enum_Unnamed332 = ::libc::c_uint;
pub const kAudioDevicePropertyConfigurationApplication: ::libc::c_uint =
    1667330160;
pub const kAudioDevicePropertyDeviceUID: ::libc::c_uint = 1969841184;
pub const kAudioDevicePropertyModelUID: ::libc::c_uint = 1836411236;
pub const kAudioDevicePropertyTransportType: ::libc::c_uint = 1953653102;
pub const kAudioDevicePropertyRelatedDevices: ::libc::c_uint = 1634429294;
pub const kAudioDevicePropertyClockDomain: ::libc::c_uint = 1668049764;
pub const kAudioDevicePropertyDeviceIsAlive: ::libc::c_uint = 1818850926;
pub const kAudioDevicePropertyDeviceIsRunning: ::libc::c_uint = 1735354734;
pub const kAudioDevicePropertyDeviceCanBeDefaultDevice: ::libc::c_uint =
    1684434036;
pub const kAudioDevicePropertyDeviceCanBeDefaultSystemDevice: ::libc::c_uint =
    1936092276;
pub const kAudioDevicePropertyLatency: ::libc::c_uint = 1819569763;
pub const kAudioDevicePropertyStreams: ::libc::c_uint = 1937009955;
pub const kAudioObjectPropertyControlList: ::libc::c_uint = 1668575852;
pub const kAudioDevicePropertySafetyOffset: ::libc::c_uint = 1935763060;
pub const kAudioDevicePropertyNominalSampleRate: ::libc::c_uint = 1853059700;
pub const kAudioDevicePropertyAvailableNominalSampleRates: ::libc::c_uint =
    1853059619;
pub const kAudioDevicePropertyIcon: ::libc::c_uint = 1768124270;
pub const kAudioDevicePropertyIsHidden: ::libc::c_uint = 1751737454;
pub const kAudioDevicePropertyPreferredChannelsForStereo: ::libc::c_uint =
    1684236338;
pub const kAudioDevicePropertyPreferredChannelLayout: ::libc::c_uint =
    1936879204;
pub type Enum_Unnamed333 = ::libc::c_uint;
pub const kAudioEndPointDeviceClassID: ::libc::c_uint = 1701078390;
pub type Enum_Unnamed334 = ::libc::c_uint;
pub const kAudioEndPointDevicePropertyComposition: ::libc::c_uint =
    1633906541;
pub const kAudioEndPointDevicePropertyEndPointList: ::libc::c_uint =
    1634169456;
pub const kAudioEndPointDevicePropertyIsPrivate: ::libc::c_uint = 1886546294;
pub type Enum_Unnamed335 = ::libc::c_uint;
pub const kAudioEndPointClassID: ::libc::c_uint = 1701733488;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioStreamRangedDescription {
    pub mFormat: AudioStreamBasicDescription,
    pub mSampleRateRange: AudioValueRange,
}
impl ::std::clone::Clone for Struct_AudioStreamRangedDescription {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioStreamRangedDescription {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioStreamRangedDescription = Struct_AudioStreamRangedDescription;
pub type Enum_Unnamed336 = ::libc::c_uint;
pub const kAudioStreamClassID: ::libc::c_uint = 1634956402;
pub type Enum_Unnamed337 = ::libc::c_uint;
pub const kAudioStreamTerminalTypeUnknown: ::libc::c_uint = 0;
pub const kAudioStreamTerminalTypeLine: ::libc::c_uint = 1818848869;
pub const kAudioStreamTerminalTypeDigitalAudioInterface: ::libc::c_uint =
    1936745574;
pub const kAudioStreamTerminalTypeSpeaker: ::libc::c_uint = 1936747378;
pub const kAudioStreamTerminalTypeHeadphones: ::libc::c_uint = 1751412840;
pub const kAudioStreamTerminalTypeLFESpeaker: ::libc::c_uint = 1818649971;
pub const kAudioStreamTerminalTypeReceiverSpeaker: ::libc::c_uint =
    1920168043;
pub const kAudioStreamTerminalTypeMicrophone: ::libc::c_uint = 1835623282;
pub const kAudioStreamTerminalTypeHeadsetMicrophone: ::libc::c_uint =
    1752000867;
pub const kAudioStreamTerminalTypeReceiverMicrophone: ::libc::c_uint =
    1919773027;
pub const kAudioStreamTerminalTypeTTY: ::libc::c_uint = 1953790303;
pub const kAudioStreamTerminalTypeHDMI: ::libc::c_uint = 1751412073;
pub const kAudioStreamTerminalTypeDisplayPort: ::libc::c_uint = 1685090932;
pub type Enum_Unnamed338 = ::libc::c_uint;
pub const kAudioStreamPropertyIsActive: ::libc::c_uint = 1935762292;
pub const kAudioStreamPropertyDirection: ::libc::c_uint = 1935960434;
pub const kAudioStreamPropertyTerminalType: ::libc::c_uint = 1952805485;
pub const kAudioStreamPropertyStartingChannel: ::libc::c_uint = 1935894638;
pub const kAudioStreamPropertyLatency: ::libc::c_uint = 1819569763;
pub const kAudioStreamPropertyVirtualFormat: ::libc::c_uint = 1936092532;
pub const kAudioStreamPropertyAvailableVirtualFormats: ::libc::c_uint =
    1936092513;
pub const kAudioStreamPropertyPhysicalFormat: ::libc::c_uint = 1885762592;
pub const kAudioStreamPropertyAvailablePhysicalFormats: ::libc::c_uint =
    1885762657;
pub type Enum_Unnamed339 = ::libc::c_uint;
pub const kAudioControlClassID: ::libc::c_uint = 1633907820;
pub type Enum_Unnamed340 = ::libc::c_uint;
pub const kAudioControlPropertyScope: ::libc::c_uint = 1668506480;
pub const kAudioControlPropertyElement: ::libc::c_uint = 1667591277;
pub type Enum_Unnamed341 = ::libc::c_uint;
pub const kAudioSliderControlClassID: ::libc::c_uint = 1936483442;
pub type Enum_Unnamed342 = ::libc::c_uint;
pub const kAudioSliderControlPropertyValue: ::libc::c_uint = 1935962742;
pub const kAudioSliderControlPropertyRange: ::libc::c_uint = 1935962738;
pub type Enum_Unnamed343 = ::libc::c_uint;
pub const kAudioLevelControlClassID: ::libc::c_uint = 1818588780;
pub const kAudioVolumeControlClassID: ::libc::c_uint = 1986817381;
pub const kAudioLFEVolumeControlClassID: ::libc::c_uint = 1937072758;
pub type Enum_Unnamed344 = ::libc::c_uint;
pub const kAudioLevelControlPropertyScalarValue: ::libc::c_uint = 1818456950;
pub const kAudioLevelControlPropertyDecibelValue: ::libc::c_uint = 1818453110;
pub const kAudioLevelControlPropertyDecibelRange: ::libc::c_uint = 1818453106;
pub const kAudioLevelControlPropertyConvertScalarToDecibels: ::libc::c_uint =
    1818456932;
pub const kAudioLevelControlPropertyConvertDecibelsToScalar: ::libc::c_uint =
    1818453107;
pub type Enum_Unnamed345 = ::libc::c_uint;
pub const kAudioBooleanControlClassID: ::libc::c_uint = 1953458028;
pub const kAudioMuteControlClassID: ::libc::c_uint = 1836414053;
pub const kAudioSoloControlClassID: ::libc::c_uint = 1936682095;
pub const kAudioJackControlClassID: ::libc::c_uint = 1784767339;
pub const kAudioLFEMuteControlClassID: ::libc::c_uint = 1937072749;
pub const kAudioPhantomPowerControlClassID: ::libc::c_uint = 1885888878;
pub const kAudioPhaseInvertControlClassID: ::libc::c_uint = 1885893481;
pub const kAudioClipLightControlClassID: ::libc::c_uint = 1668049264;
pub const kAudioTalkbackControlClassID: ::libc::c_uint = 1952541794;
pub const kAudioListenbackControlClassID: ::libc::c_uint = 1819504226;
pub type Enum_Unnamed346 = ::libc::c_uint;
pub const kAudioBooleanControlPropertyValue: ::libc::c_uint = 1650685548;
pub type Enum_Unnamed347 = ::libc::c_uint;
pub const kAudioSelectorControlClassID: ::libc::c_uint = 1936483188;
pub const kAudioDataSourceControlClassID: ::libc::c_uint = 1685287523;
pub const kAudioDataDestinationControlClassID: ::libc::c_uint = 1684370292;
pub const kAudioClockSourceControlClassID: ::libc::c_uint = 1668047723;
pub const kAudioLineLevelControlClassID: ::libc::c_uint = 1852601964;
pub const kAudioHighPassFilterControlClassID: ::libc::c_uint = 1751740518;
pub type Enum_Unnamed348 = ::libc::c_uint;
pub const kAudioSelectorControlPropertyCurrentItem: ::libc::c_uint =
    1935893353;
pub const kAudioSelectorControlPropertyAvailableItems: ::libc::c_uint =
    1935892841;
pub const kAudioSelectorControlPropertyItemName: ::libc::c_uint = 1935894894;
pub const kAudioSelectorControlPropertyItemKind: ::libc::c_uint = 1668049771;
pub type Enum_Unnamed349 = ::libc::c_uint;
pub const kAudioSelectorControlItemKindSpacer: ::libc::c_uint = 1936745330;
pub type Enum_Unnamed350 = ::libc::c_uint;
pub const kAudioClockSourceItemKindInternal: ::libc::c_uint = 1768846368;
pub type Enum_Unnamed351 = ::libc::c_uint;
pub const kAudioStereoPanControlClassID: ::libc::c_uint = 1936744814;
pub type Enum_Unnamed352 = ::libc::c_uint;
pub const kAudioStereoPanControlPropertyValue: ::libc::c_uint = 1936745334;
pub const kAudioStereoPanControlPropertyPanningChannels: ::libc::c_uint =
    1936745315;
pub type Enum_Unnamed353 = ::libc::c_uint;
pub const kAudioObjectSystemObject: ::libc::c_uint = 1;
pub type AudioObjectPropertyListenerProc =
    ::std::option::Option<extern "C" fn(inObjectID: AudioObjectID,
                                        inNumberAddresses: UInt32,
                                        inAddresses:
                                            *const AudioObjectPropertyAddress,
                                        inClientData: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioObjectPropertyListenerBlock = ::libc::c_void;
pub type Enum_Unnamed354 = ::libc::c_uint;
pub const kAudioObjectPropertyCreator: ::libc::c_uint = 1869638759;
pub const kAudioObjectPropertyListenerAdded: ::libc::c_uint = 1818850145;
pub const kAudioObjectPropertyListenerRemoved: ::libc::c_uint = 1818850162;
pub type Enum_Unnamed355 = ::libc::c_uint;
pub const kAudioSystemObjectClassID: ::libc::c_uint = 1634957683;
pub type Enum_Unnamed356 = ::libc::c_uint;
pub const kAudioHardwarePowerHintNone: ::libc::c_uint = 0;
pub const kAudioHardwarePowerHintFavorSavingPower: ::libc::c_uint = 1;
pub type Enum_Unnamed357 = ::libc::c_uint;
pub const kAudioHardwarePropertyDevices: ::libc::c_uint = 1684370979;
pub const kAudioHardwarePropertyDefaultInputDevice: ::libc::c_uint =
    1682533920;
pub const kAudioHardwarePropertyDefaultOutputDevice: ::libc::c_uint =
    1682929012;
pub const kAudioHardwarePropertyDefaultSystemOutputDevice: ::libc::c_uint =
    1934587252;
pub const kAudioHardwarePropertyTranslateUIDToDevice: ::libc::c_uint =
    1969841252;
pub const kAudioHardwarePropertyMixStereoToMono: ::libc::c_uint = 1937010031;
pub const kAudioHardwarePropertyPlugInList: ::libc::c_uint = 1886152483;
pub const kAudioHardwarePropertyTranslateBundleIDToPlugIn: ::libc::c_uint =
    1651074160;
pub const kAudioHardwarePropertyTransportManagerList: ::libc::c_uint =
    1953326883;
pub const kAudioHardwarePropertyTranslateBundleIDToTransportManager:
          ::libc::c_uint =
    1953325673;
pub const kAudioHardwarePropertyBoxList: ::libc::c_uint = 1651472419;
pub const kAudioHardwarePropertyTranslateUIDToBox: ::libc::c_uint =
    1969841250;
pub const kAudioHardwarePropertyProcessIsMaster: ::libc::c_uint = 1835103092;
pub const kAudioHardwarePropertyIsInitingOrExiting: ::libc::c_uint =
    1768845172;
pub const kAudioHardwarePropertyUserIDChanged: ::libc::c_uint = 1702193508;
pub const kAudioHardwarePropertyProcessIsAudible: ::libc::c_uint = 1886221684;
pub const kAudioHardwarePropertySleepingIsAllowed: ::libc::c_uint =
    1936483696;
pub const kAudioHardwarePropertyUnloadingIsAllowed: ::libc::c_uint =
    1970170980;
pub const kAudioHardwarePropertyHogModeIsAllowed: ::libc::c_uint = 1752131442;
pub const kAudioHardwarePropertyUserSessionIsActiveOrHeadless: ::libc::c_uint
          =
    1970496882;
pub const kAudioHardwarePropertyServiceRestarted: ::libc::c_uint = 1936880500;
pub const kAudioHardwarePropertyPowerHint: ::libc::c_uint = 1886353256;
pub type Enum_Unnamed358 = ::libc::c_uint;
pub const kAudioPlugInCreateAggregateDevice: ::libc::c_uint = 1667327847;
pub const kAudioPlugInDestroyAggregateDevice: ::libc::c_uint = 1684105063;
pub type Enum_Unnamed359 = ::libc::c_uint;
pub const kAudioTransportManagerCreateEndPointDevice: ::libc::c_uint =
    1667523958;
pub const kAudioTransportManagerDestroyEndPointDevice: ::libc::c_uint =
    1684301174;
pub type AudioDeviceIOProc =
    ::std::option::Option<extern "C" fn(inDevice: AudioObjectID,
                                        inNow: *const AudioTimeStamp,
                                        inInputData: *const AudioBufferList,
                                        inInputTime: *const AudioTimeStamp,
                                        outOutputData: *mut AudioBufferList,
                                        inOutputTime: *const AudioTimeStamp,
                                        inClientData: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioDeviceIOBlock = ::libc::c_void;
pub type AudioDeviceIOProcID = AudioDeviceIOProc;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioHardwareIOProcStreamUsage {
    pub mIOProc: *mut ::libc::c_void,
    pub mNumberStreams: UInt32,
    pub mStreamIsOn: [UInt32; 1usize],
}
impl ::std::clone::Clone for Struct_AudioHardwareIOProcStreamUsage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioHardwareIOProcStreamUsage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioHardwareIOProcStreamUsage =
    Struct_AudioHardwareIOProcStreamUsage;
pub type Enum_Unnamed360 = ::libc::c_uint;
pub const kAudioDeviceStartTimeIsInputFlag: ::libc::c_uint = 1;
pub const kAudioDeviceStartTimeDontConsultDeviceFlag: ::libc::c_uint = 2;
pub const kAudioDeviceStartTimeDontConsultHALFlag: ::libc::c_uint = 4;
pub type Enum_Unnamed361 = ::libc::c_uint;
pub const kAudioDevicePropertyPlugIn: ::libc::c_uint = 1886156135;
pub const kAudioDevicePropertyDeviceHasChanged: ::libc::c_uint = 1684629094;
pub const kAudioDevicePropertyDeviceIsRunningSomewhere: ::libc::c_uint =
    1735356005;
pub const kAudioDeviceProcessorOverload: ::libc::c_uint = 1870030194;
pub const kAudioDevicePropertyIOStoppedAbnormally: ::libc::c_uint =
    1937010788;
pub const kAudioDevicePropertyHogMode: ::libc::c_uint = 1869180523;
pub const kAudioDevicePropertyBufferFrameSize: ::libc::c_uint = 1718839674;
pub const kAudioDevicePropertyBufferFrameSizeRange: ::libc::c_uint =
    1718843939;
pub const kAudioDevicePropertyUsesVariableBufferFrameSizes: ::libc::c_uint =
    1986425722;
pub const kAudioDevicePropertyIOCycleUsage: ::libc::c_uint = 1852012899;
pub const kAudioDevicePropertyStreamConfiguration: ::libc::c_uint =
    1936482681;
pub const kAudioDevicePropertyIOProcStreamUsage: ::libc::c_uint = 1937077093;
pub const kAudioDevicePropertyActualSampleRate: ::libc::c_uint = 1634955892;
pub type Enum_Unnamed362 = ::libc::c_uint;
pub const kAudioDevicePropertyJackIsConnected: ::libc::c_uint = 1784767339;
pub const kAudioDevicePropertyVolumeScalar: ::libc::c_uint = 1987013741;
pub const kAudioDevicePropertyVolumeDecibels: ::libc::c_uint = 1987013732;
pub const kAudioDevicePropertyVolumeRangeDecibels: ::libc::c_uint =
    1986290211;
pub const kAudioDevicePropertyVolumeScalarToDecibels: ::libc::c_uint =
    1983013986;
pub const kAudioDevicePropertyVolumeDecibelsToScalar: ::libc::c_uint =
    1684157046;
pub const kAudioDevicePropertyStereoPan: ::libc::c_uint = 1936744814;
pub const kAudioDevicePropertyStereoPanChannels: ::libc::c_uint = 1936748067;
pub const kAudioDevicePropertyMute: ::libc::c_uint = 1836414053;
pub const kAudioDevicePropertySolo: ::libc::c_uint = 1936682095;
pub const kAudioDevicePropertyPhantomPower: ::libc::c_uint = 1885888878;
pub const kAudioDevicePropertyPhaseInvert: ::libc::c_uint = 1885893481;
pub const kAudioDevicePropertyClipLight: ::libc::c_uint = 1668049264;
pub const kAudioDevicePropertyTalkback: ::libc::c_uint = 1952541794;
pub const kAudioDevicePropertyListenback: ::libc::c_uint = 1819504226;
pub const kAudioDevicePropertyDataSource: ::libc::c_uint = 1936945763;
pub const kAudioDevicePropertyDataSources: ::libc::c_uint = 1936941859;
pub const kAudioDevicePropertyDataSourceNameForIDCFString: ::libc::c_uint =
    1819501422;
pub const kAudioDevicePropertyDataSourceKindForID: ::libc::c_uint =
    1936941931;
pub const kAudioDevicePropertyClockSource: ::libc::c_uint = 1668510307;
pub const kAudioDevicePropertyClockSources: ::libc::c_uint = 1668506403;
pub const kAudioDevicePropertyClockSourceNameForIDCFString: ::libc::c_uint =
    1818456942;
pub const kAudioDevicePropertyClockSourceKindForID: ::libc::c_uint =
    1668506475;
pub const kAudioDevicePropertyPlayThru: ::libc::c_uint = 1953002101;
pub const kAudioDevicePropertyPlayThruSolo: ::libc::c_uint = 1953002099;
pub const kAudioDevicePropertyPlayThruVolumeScalar: ::libc::c_uint =
    1836479331;
pub const kAudioDevicePropertyPlayThruVolumeDecibels: ::libc::c_uint =
    1836475490;
pub const kAudioDevicePropertyPlayThruVolumeRangeDecibels: ::libc::c_uint =
    1836475427;
pub const kAudioDevicePropertyPlayThruVolumeScalarToDecibels: ::libc::c_uint =
    1836462692;
pub const kAudioDevicePropertyPlayThruVolumeDecibelsToScalar: ::libc::c_uint =
    1836462707;
pub const kAudioDevicePropertyPlayThruStereoPan: ::libc::c_uint = 1836281966;
pub const kAudioDevicePropertyPlayThruStereoPanChannels: ::libc::c_uint =
    1836281891;
pub const kAudioDevicePropertyPlayThruDestination: ::libc::c_uint =
    1835295859;
pub const kAudioDevicePropertyPlayThruDestinations: ::libc::c_uint =
    1835295779;
pub const kAudioDevicePropertyPlayThruDestinationNameForIDCFString:
          ::libc::c_uint =
    1835295843;
pub const kAudioDevicePropertyChannelNominalLineLevel: ::libc::c_uint =
    1852601964;
pub const kAudioDevicePropertyChannelNominalLineLevels: ::libc::c_uint =
    1852601891;
pub const kAudioDevicePropertyChannelNominalLineLevelNameForIDCFString:
          ::libc::c_uint =
    1818455660;
pub const kAudioDevicePropertyHighPassFilterSetting: ::libc::c_uint =
    1751740518;
pub const kAudioDevicePropertyHighPassFilterSettings: ::libc::c_uint =
    1751740451;
pub const kAudioDevicePropertyHighPassFilterSettingNameForIDCFString:
          ::libc::c_uint =
    1751740524;
pub const kAudioDevicePropertySubVolumeScalar: ::libc::c_uint = 1937140845;
pub const kAudioDevicePropertySubVolumeDecibels: ::libc::c_uint = 1937140836;
pub const kAudioDevicePropertySubVolumeRangeDecibels: ::libc::c_uint =
    1937138723;
pub const kAudioDevicePropertySubVolumeScalarToDecibels: ::libc::c_uint =
    1937125988;
pub const kAudioDevicePropertySubVolumeDecibelsToScalar: ::libc::c_uint =
    1935946358;
pub const kAudioDevicePropertySubMute: ::libc::c_uint = 1936553332;
pub type Enum_Unnamed363 = ::libc::c_uint;
pub const kAudioAggregateDeviceClassID: ::libc::c_uint = 1633773415;
pub type Enum_Unnamed364 = ::libc::c_uint;
pub const kAudioAggregateDevicePropertyFullSubDeviceList: ::libc::c_uint =
    1735554416;
pub const kAudioAggregateDevicePropertyActiveSubDeviceList: ::libc::c_uint =
    1634169456;
pub const kAudioAggregateDevicePropertyComposition: ::libc::c_uint =
    1633906541;
pub const kAudioAggregateDevicePropertyMasterSubDevice: ::libc::c_uint =
    1634562932;
pub type Enum_Unnamed365 = ::libc::c_uint;
pub const kAudioSubDeviceClassID: ::libc::c_uint = 1634956642;
pub type Enum_Unnamed366 = ::libc::c_uint;
pub const kAudioSubDeviceDriftCompensationMinQuality: ::libc::c_uint = 0;
pub const kAudioSubDeviceDriftCompensationLowQuality: ::libc::c_uint = 32;
pub const kAudioSubDeviceDriftCompensationMediumQuality: ::libc::c_uint = 64;
pub const kAudioSubDeviceDriftCompensationHighQuality: ::libc::c_uint = 96;
pub const kAudioSubDeviceDriftCompensationMaxQuality: ::libc::c_uint = 127;
pub type Enum_Unnamed367 = ::libc::c_uint;
pub const kAudioSubDevicePropertyExtraLatency: ::libc::c_uint = 2020373603;
pub const kAudioSubDevicePropertyDriftCompensation: ::libc::c_uint =
    1685218932;
pub const kAudioSubDevicePropertyDriftCompensationQuality: ::libc::c_uint =
    1685218929;
pub type Enum_Unnamed368 = ::libc::c_uint;
pub const kAudioDevicePropertyScopeInput: ::libc::c_uint = 1768845428;
pub const kAudioDevicePropertyScopeOutput: ::libc::c_uint = 1869968496;
pub const kAudioDevicePropertyScopePlayThrough: ::libc::c_uint = 1886679669;
pub type Enum_Unnamed369 = ::libc::c_uint;
pub const kAudioPropertyWildcardPropertyID: ::libc::c_uint = 707406378;
pub const kAudioPropertyWildcardSection: ::libc::c_uint = 255;
pub const kAudioPropertyWildcardChannel: ::libc::c_uint = ::std::u32::MAX;
pub type Enum_Unnamed370 = ::libc::c_uint;
pub const kAudioISubOwnerControlClassID: ::libc::c_uint = 1635017576;
pub type Enum_Unnamed371 = ::libc::c_uint;
pub const kAudioLevelControlPropertyDecibelsToScalarTransferFunction:
          ::libc::c_uint =
    1818457190;
pub type Enum_Unnamed372 = ::libc::c_uint;
pub const kAudioLevelControlTranferFunctionLinear: ::libc::c_uint = 0;
pub const kAudioLevelControlTranferFunction1Over3: ::libc::c_uint = 1;
pub const kAudioLevelControlTranferFunction1Over2: ::libc::c_uint = 2;
pub const kAudioLevelControlTranferFunction3Over4: ::libc::c_uint = 3;
pub const kAudioLevelControlTranferFunction3Over2: ::libc::c_uint = 4;
pub const kAudioLevelControlTranferFunction2Over1: ::libc::c_uint = 5;
pub const kAudioLevelControlTranferFunction3Over1: ::libc::c_uint = 6;
pub const kAudioLevelControlTranferFunction4Over1: ::libc::c_uint = 7;
pub const kAudioLevelControlTranferFunction5Over1: ::libc::c_uint = 8;
pub const kAudioLevelControlTranferFunction6Over1: ::libc::c_uint = 9;
pub const kAudioLevelControlTranferFunction7Over1: ::libc::c_uint = 10;
pub const kAudioLevelControlTranferFunction8Over1: ::libc::c_uint = 11;
pub const kAudioLevelControlTranferFunction9Over1: ::libc::c_uint = 12;
pub const kAudioLevelControlTranferFunction10Over1: ::libc::c_uint = 13;
pub const kAudioLevelControlTranferFunction11Over1: ::libc::c_uint = 14;
pub const kAudioLevelControlTranferFunction12Over1: ::libc::c_uint = 15;
pub type AudioHardwarePropertyID = AudioObjectPropertySelector;
pub type AudioHardwarePropertyListenerProc =
    ::std::option::Option<extern "C" fn(inPropertyID: AudioHardwarePropertyID,
                                        inClientData: *mut ::libc::c_void)
                              -> OSStatus>;
pub type Enum_Unnamed373 = ::libc::c_uint;
pub const kAudioHardwarePropertyRunLoop: ::libc::c_uint = 1919839344;
pub const kAudioHardwarePropertyDeviceForUID: ::libc::c_uint = 1685416292;
pub const kAudioHardwarePropertyPlugInForBundleID: ::libc::c_uint =
    1885954665;
pub type Enum_Unnamed374 = ::libc::c_uint;
pub const kAudioHardwarePropertyBootChimeVolumeScalar: ::libc::c_uint =
    1650620019;
pub const kAudioHardwarePropertyBootChimeVolumeDecibels: ::libc::c_uint =
    1650620004;
pub const kAudioHardwarePropertyBootChimeVolumeRangeDecibels: ::libc::c_uint =
    1650615331;
pub const kAudioHardwarePropertyBootChimeVolumeScalarToDecibels:
          ::libc::c_uint =
    1651913316;
pub const kAudioHardwarePropertyBootChimeVolumeDecibelsToScalar:
          ::libc::c_uint =
    1650733686;
pub const kAudioHardwarePropertyBootChimeVolumeDecibelsToScalarTransferFunction:
          ::libc::c_uint =
    1651930214;
pub type AudioDeviceID = AudioObjectID;
pub type AudioDevicePropertyID = AudioObjectPropertySelector;
pub type AudioDevicePropertyListenerProc =
    ::std::option::Option<extern "C" fn(inDevice: AudioDeviceID,
                                        inChannel: UInt32, isInput: Boolean,
                                        inPropertyID: AudioDevicePropertyID,
                                        inClientData: *mut ::libc::c_void)
                              -> OSStatus>;
pub type Enum_Unnamed375 = ::libc::c_uint;
pub const kAudioDeviceUnknown: ::libc::c_uint = 0;
pub type Enum_Unnamed376 = ::libc::c_uint;
pub const kAudioDeviceTransportTypeAutoAggregate: ::libc::c_uint = 1718055536;
pub type Enum_Unnamed377 = ::libc::c_uint;
pub const kAudioDevicePropertyVolumeDecibelsToScalarTransferFunction:
          ::libc::c_uint =
    1986229350;
pub const kAudioDevicePropertyPlayThruVolumeDecibelsToScalarTransferFunction:
          ::libc::c_uint =
    1836479590;
pub const kAudioDevicePropertyDriverShouldOwniSub: ::libc::c_uint =
    1769174370;
pub const kAudioDevicePropertySubVolumeDecibelsToScalarTransferFunction:
          ::libc::c_uint =
    1937142886;
pub type Enum_Unnamed378 = ::libc::c_uint;
pub const kAudioDevicePropertyDeviceName: ::libc::c_uint = 1851878757;
pub const kAudioDevicePropertyDeviceNameCFString: ::libc::c_uint = 1819173229;
pub const kAudioDevicePropertyDeviceManufacturer: ::libc::c_uint = 1835101042;
pub const kAudioDevicePropertyDeviceManufacturerCFString: ::libc::c_uint =
    1819107691;
pub const kAudioDevicePropertyRegisterBufferList: ::libc::c_uint = 1919055206;
pub const kAudioDevicePropertyBufferSize: ::libc::c_uint = 1651730810;
pub const kAudioDevicePropertyBufferSizeRange: ::libc::c_uint = 1651735075;
pub const kAudioDevicePropertyChannelName: ::libc::c_uint = 1667788397;
pub const kAudioDevicePropertyChannelNameCFString: ::libc::c_uint =
    1818454126;
pub const kAudioDevicePropertyChannelCategoryName: ::libc::c_uint =
    1667460717;
pub const kAudioDevicePropertyChannelCategoryNameCFString: ::libc::c_uint =
    1818452846;
pub const kAudioDevicePropertyChannelNumberName: ::libc::c_uint = 1668181613;
pub const kAudioDevicePropertyChannelNumberNameCFString: ::libc::c_uint =
    1818455662;
pub const kAudioDevicePropertySupportsMixing: ::libc::c_uint = 1835628607;
pub const kAudioDevicePropertyStreamFormat: ::libc::c_uint = 1936092532;
pub const kAudioDevicePropertyStreamFormats: ::libc::c_uint = 1936092451;
pub const kAudioDevicePropertyStreamFormatSupported: ::libc::c_uint =
    1936092479;
pub const kAudioDevicePropertyStreamFormatMatch: ::libc::c_uint = 1936092525;
pub const kAudioDevicePropertyDataSourceNameForID: ::libc::c_uint =
    1936941934;
pub const kAudioDevicePropertyClockSourceNameForID: ::libc::c_uint =
    1668506478;
pub const kAudioDevicePropertyPlayThruDestinationNameForID: ::libc::c_uint =
    1835295854;
pub const kAudioDevicePropertyChannelNominalLineLevelNameForID: ::libc::c_uint
          =
    1668181110;
pub const kAudioDevicePropertyHighPassFilterSettingNameForID: ::libc::c_uint =
    1667787120;
pub type AudioStreamID = AudioObjectID;
pub type AudioStreamPropertyListenerProc =
    ::std::option::Option<extern "C" fn(inStream: AudioStreamID,
                                        inChannel: UInt32,
                                        inPropertyID: AudioDevicePropertyID,
                                        inClientData: *mut ::libc::c_void)
                              -> OSStatus>;
pub type Enum_Unnamed379 = ::libc::c_uint;
pub const kAudioStreamUnknown: ::libc::c_uint = 0;
pub type Enum_Unnamed380 = ::libc::c_uint;
pub const kAudioStreamPropertyOwningDevice: ::libc::c_uint = 1937007734;
pub const kAudioStreamPropertyPhysicalFormats: ::libc::c_uint = 1885762595;
pub const kAudioStreamPropertyPhysicalFormatSupported: ::libc::c_uint =
    1885762623;
pub const kAudioStreamPropertyPhysicalFormatMatch: ::libc::c_uint =
    1885762669;
pub type Enum_Unnamed381 = ::libc::c_uint;
pub const kAudioBootChimeVolumeControlClassID: ::libc::c_uint = 1886544237;
pub type Enum_Unnamed382 = ::libc::c_uint;
pub const kAudioControlPropertyVariant: ::libc::c_uint = 1668702578;
pub type Enum_Unnamed383 = ::libc::c_uint;
pub const kAudioClockSourceControlPropertyItemKind: ::libc::c_uint =
    1668049771;
pub type Enum_Unnamed384 = ::libc::c_int;
pub const kAudioServicesNoError: ::libc::c_int = 0;
pub const kAudioServicesUnsupportedPropertyError: ::libc::c_int = 1886681407;
pub const kAudioServicesBadPropertySizeError: ::libc::c_int = 561211770;
pub const kAudioServicesBadSpecifierSizeError: ::libc::c_int = 561213539;
pub const kAudioServicesSystemSoundUnspecifiedError: ::libc::c_int = -1500;
pub const kAudioServicesSystemSoundClientTimedOutError: ::libc::c_int = -1501;
pub type SystemSoundID = UInt32;
pub type AudioServicesPropertyID = UInt32;
pub type AudioServicesSystemSoundCompletionProc =
    ::std::option::Option<extern "C" fn(ssID: SystemSoundID,
                                        clientData: *mut ::libc::c_void)
                              -> ()>;
pub type Enum_Unnamed385 = ::libc::c_uint;
pub const kSystemSoundID_UserPreferredAlert: ::libc::c_uint = 4096;
pub const kSystemSoundID_FlashScreen: ::libc::c_uint = 4094;
pub const kUserPreferredAlert: ::libc::c_uint = 4096;
pub type Enum_Unnamed386 = ::libc::c_uint;
pub const kAudioServicesPropertyIsUISound: ::libc::c_uint = 1769174377;
pub const kAudioServicesPropertyCompletePlaybackIfAppDies: ::libc::c_uint =
    1768318057;
pub type Enum_Unnamed387 = ::libc::c_uint;
pub const kAudioHardwareServiceProperty_ServiceRestarted: ::libc::c_uint =
    1936880500;
pub const kAudioHardwareServiceDeviceProperty_VirtualMasterVolume:
          ::libc::c_uint =
    1986885219;
pub const kAudioHardwareServiceDeviceProperty_VirtualMasterBalance:
          ::libc::c_uint =
    1986880099;
pub enum Struct_OpaqueAUGraph { }
pub type AUGraph = *mut Struct_OpaqueAUGraph;
pub type AUNode = SInt32;
pub type Enum_Unnamed388 = ::libc::c_int;
pub const kAUGraphErr_NodeNotFound: ::libc::c_int = -10860;
pub const kAUGraphErr_InvalidConnection: ::libc::c_int = -10861;
pub const kAUGraphErr_OutputNodeErr: ::libc::c_int = -10862;
pub const kAUGraphErr_CannotDoInCurrentContext: ::libc::c_int = -10863;
pub const kAUGraphErr_InvalidAudioUnit: ::libc::c_int = -10864;
pub type Enum_Unnamed389 = ::libc::c_uint;
pub const kAUNodeInteraction_Connection: ::libc::c_uint = 1;
pub const kAUNodeInteraction_InputCallback: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitNodeConnection {
    pub sourceNode: AUNode,
    pub sourceOutputNumber: UInt32,
    pub destNode: AUNode,
    pub destInputNumber: UInt32,
}
impl ::std::clone::Clone for Struct_AudioUnitNodeConnection {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitNodeConnection {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitNodeConnection = Struct_AudioUnitNodeConnection;
pub type AUNodeConnection = Struct_AudioUnitNodeConnection;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AUNodeRenderCallback {
    pub destNode: AUNode,
    pub destInputNumber: AudioUnitElement,
    pub cback: AURenderCallbackStruct,
}
impl ::std::clone::Clone for Struct_AUNodeRenderCallback {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AUNodeRenderCallback {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AUNodeRenderCallback = Struct_AUNodeRenderCallback;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AUNodeInteraction {
    pub nodeInteractionType: UInt32,
    pub nodeInteraction: Union_Unnamed390,
}
impl ::std::clone::Clone for Struct_AUNodeInteraction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AUNodeInteraction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed390 {
    pub _bindgen_data_: [u64; 3usize],
}
impl Union_Unnamed390 {
    pub unsafe fn connection(&mut self) -> *mut AUNodeConnection {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn inputCallback(&mut self) -> *mut AUNodeRenderCallback {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed390 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed390 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AUNodeInteraction = Struct_AUNodeInteraction;
pub enum Struct_ComponentDescription { }
pub enum Struct_OpaqueAudioConverter { }
pub type AudioConverterRef = *mut Struct_OpaqueAudioConverter;
pub type AudioConverterPropertyID = UInt32;
pub type Enum_Unnamed391 = ::libc::c_uint;
pub const kAudioConverterPropertyMinimumInputBufferSize: ::libc::c_uint =
    1835623027;
pub const kAudioConverterPropertyMinimumOutputBufferSize: ::libc::c_uint =
    1836016243;
pub const kAudioConverterPropertyMaximumInputBufferSize: ::libc::c_uint =
    2020172403;
pub const kAudioConverterPropertyMaximumInputPacketSize: ::libc::c_uint =
    2020175987;
pub const kAudioConverterPropertyMaximumOutputPacketSize: ::libc::c_uint =
    2020569203;
pub const kAudioConverterPropertyCalculateInputBufferSize: ::libc::c_uint =
    1667850867;
pub const kAudioConverterPropertyCalculateOutputBufferSize: ::libc::c_uint =
    1668244083;
pub const kAudioConverterPropertyInputCodecParameters: ::libc::c_uint =
    1768121456;
pub const kAudioConverterPropertyOutputCodecParameters: ::libc::c_uint =
    1868784752;
pub const kAudioConverterSampleRateConverterAlgorithm: ::libc::c_uint =
    1936876393;
pub const kAudioConverterSampleRateConverterComplexity: ::libc::c_uint =
    1936876385;
pub const kAudioConverterSampleRateConverterQuality: ::libc::c_uint =
    1936876401;
pub const kAudioConverterSampleRateConverterInitialPhase: ::libc::c_uint =
    1936876400;
pub const kAudioConverterCodecQuality: ::libc::c_uint = 1667527029;
pub const kAudioConverterPrimeMethod: ::libc::c_uint = 1886547309;
pub const kAudioConverterPrimeInfo: ::libc::c_uint = 1886546285;
pub const kAudioConverterChannelMap: ::libc::c_uint = 1667788144;
pub const kAudioConverterDecompressionMagicCookie: ::libc::c_uint =
    1684891491;
pub const kAudioConverterCompressionMagicCookie: ::libc::c_uint = 1668114275;
pub const kAudioConverterEncodeBitRate: ::libc::c_uint = 1651663220;
pub const kAudioConverterEncodeAdjustableSampleRate: ::libc::c_uint =
    1634366322;
pub const kAudioConverterInputChannelLayout: ::libc::c_uint = 1768123424;
pub const kAudioConverterOutputChannelLayout: ::libc::c_uint = 1868786720;
pub const kAudioConverterApplicableEncodeBitRates: ::libc::c_uint =
    1634034290;
pub const kAudioConverterAvailableEncodeBitRates: ::libc::c_uint = 1986355826;
pub const kAudioConverterApplicableEncodeSampleRates: ::libc::c_uint =
    1634038642;
pub const kAudioConverterAvailableEncodeSampleRates: ::libc::c_uint =
    1986360178;
pub const kAudioConverterAvailableEncodeChannelLayoutTags: ::libc::c_uint =
    1634034540;
pub const kAudioConverterCurrentOutputStreamDescription: ::libc::c_uint =
    1633906532;
pub const kAudioConverterCurrentInputStreamDescription: ::libc::c_uint =
    1633904996;
pub const kAudioConverterPropertySettings: ::libc::c_uint = 1633906803;
pub const kAudioConverterPropertyBitDepthHint: ::libc::c_uint = 1633903204;
pub const kAudioConverterPropertyFormatList: ::libc::c_uint = 1718383476;
pub type Enum_Unnamed392 = ::libc::c_uint;
pub const kAudioConverterPropertyDithering: ::libc::c_uint = 1684632680;
pub const kAudioConverterPropertyDitherBitDepth: ::libc::c_uint = 1684171124;
pub type Enum_Unnamed393 = ::libc::c_uint;
pub const kDitherAlgorithm_TPDF: ::libc::c_uint = 1;
pub const kDitherAlgorithm_NoiseShaping: ::libc::c_uint = 2;
pub type Enum_Unnamed394 = ::libc::c_uint;
pub const kAudioConverterQuality_Max: ::libc::c_uint = 127;
pub const kAudioConverterQuality_High: ::libc::c_uint = 96;
pub const kAudioConverterQuality_Medium: ::libc::c_uint = 64;
pub const kAudioConverterQuality_Low: ::libc::c_uint = 32;
pub const kAudioConverterQuality_Min: ::libc::c_uint = 0;
pub type Enum_Unnamed395 = ::libc::c_uint;
pub const kAudioConverterSampleRateConverterComplexity_Linear: ::libc::c_uint
          =
    1818848869;
pub const kAudioConverterSampleRateConverterComplexity_Normal: ::libc::c_uint
          =
    1852797549;
pub const kAudioConverterSampleRateConverterComplexity_Mastering:
          ::libc::c_uint =
    1650553971;
pub type Enum_Unnamed396 = ::libc::c_uint;
pub const kConverterPrimeMethod_Pre: ::libc::c_uint = 0;
pub const kConverterPrimeMethod_Normal: ::libc::c_uint = 1;
pub const kConverterPrimeMethod_None: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioConverterPrimeInfo {
    pub leadingFrames: UInt32,
    pub trailingFrames: UInt32,
}
impl ::std::clone::Clone for Struct_AudioConverterPrimeInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioConverterPrimeInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioConverterPrimeInfo = Struct_AudioConverterPrimeInfo;
pub type Enum_Unnamed397 = ::libc::c_uint;
pub const kAudioConverterErr_FormatNotSupported: ::libc::c_uint = 1718449215;
pub const kAudioConverterErr_OperationNotSupported: ::libc::c_uint =
    1869627199;
pub const kAudioConverterErr_PropertyNotSupported: ::libc::c_uint =
    1886547824;
pub const kAudioConverterErr_InvalidInputSize: ::libc::c_uint = 1768846202;
pub const kAudioConverterErr_InvalidOutputSize: ::libc::c_uint = 1869902714;
pub const kAudioConverterErr_UnspecifiedError: ::libc::c_uint = 2003329396;
pub const kAudioConverterErr_BadPropertySizeError: ::libc::c_uint = 561211770;
pub const kAudioConverterErr_RequiresPacketDescriptionsError: ::libc::c_uint =
    561015652;
pub const kAudioConverterErr_InputSampleRateOutOfRange: ::libc::c_uint =
    560558962;
pub const kAudioConverterErr_OutputSampleRateOutOfRange: ::libc::c_uint =
    560952178;
pub type AudioConverterInputDataProc =
    ::std::option::Option<extern "C" fn(inAudioConverter: AudioConverterRef,
                                        ioDataSize: *mut UInt32,
                                        outData: *mut *mut ::libc::c_void,
                                        inUserData: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioConverterComplexInputDataProc =
    ::std::option::Option<extern "C" fn(inAudioConverter: AudioConverterRef,
                                        ioNumberDataPackets: *mut UInt32,
                                        ioData: *mut AudioBufferList,
                                        outDataPacketDescription:
                                            *mut *mut AudioStreamPacketDescription,
                                        inUserData: *mut ::libc::c_void)
                              -> OSStatus>;
pub enum Struct_OpaqueExtAudioFile { }
pub type ExtAudioFileRef = *mut Struct_OpaqueExtAudioFile;
pub type Enum_Unnamed398 = ::libc::c_uint;
pub const kExtAudioFileProperty_FileDataFormat: ::libc::c_uint = 1717988724;
pub const kExtAudioFileProperty_FileChannelLayout: ::libc::c_uint =
    1717791855;
pub const kExtAudioFileProperty_ClientDataFormat: ::libc::c_uint = 1667657076;
pub const kExtAudioFileProperty_ClientChannelLayout: ::libc::c_uint =
    1667460207;
pub const kExtAudioFileProperty_CodecManufacturer: ::libc::c_uint =
    1668112750;
pub const kExtAudioFileProperty_AudioConverter: ::libc::c_uint = 1633906294;
pub const kExtAudioFileProperty_AudioFile: ::libc::c_uint = 1634101612;
pub const kExtAudioFileProperty_FileMaxPacketSize: ::libc::c_uint =
    1718448243;
pub const kExtAudioFileProperty_ClientMaxPacketSize: ::libc::c_uint =
    1668116595;
pub const kExtAudioFileProperty_FileLengthFrames: ::libc::c_uint = 593916525;
pub const kExtAudioFileProperty_ConverterConfig: ::libc::c_uint = 1633903462;
pub const kExtAudioFileProperty_IOBufferSizeBytes: ::libc::c_uint =
    1768907379;
pub const kExtAudioFileProperty_IOBuffer: ::libc::c_uint = 1768907366;
pub const kExtAudioFileProperty_PacketTable: ::libc::c_uint = 2020635753;
pub type ExtAudioFilePropertyID = UInt32;
pub type Enum_Unnamed399 = ::libc::c_int;
pub const kExtAudioFileError_InvalidProperty: ::libc::c_int = -66561;
pub const kExtAudioFileError_InvalidPropertySize: ::libc::c_int = -66562;
pub const kExtAudioFileError_NonPCMClientFormat: ::libc::c_int = -66563;
pub const kExtAudioFileError_InvalidChannelMap: ::libc::c_int = -66564;
pub const kExtAudioFileError_InvalidOperationOrder: ::libc::c_int = -66565;
pub const kExtAudioFileError_InvalidDataFormat: ::libc::c_int = -66566;
pub const kExtAudioFileError_MaxPacketSizeUnknown: ::libc::c_int = -66567;
pub const kExtAudioFileError_InvalidSeek: ::libc::c_int = -66568;
pub const kExtAudioFileError_AsyncWriteTooLarge: ::libc::c_int = -66569;
pub const kExtAudioFileError_AsyncWriteBufferOverflow: ::libc::c_int = -66570;
pub type Enum_Unnamed400 = ::libc::c_int;
pub const kMIDIInvalidClient: ::libc::c_int = -10830;
pub const kMIDIInvalidPort: ::libc::c_int = -10831;
pub const kMIDIWrongEndpointType: ::libc::c_int = -10832;
pub const kMIDINoConnection: ::libc::c_int = -10833;
pub const kMIDIUnknownEndpoint: ::libc::c_int = -10834;
pub const kMIDIUnknownProperty: ::libc::c_int = -10835;
pub const kMIDIWrongPropertyType: ::libc::c_int = -10836;
pub const kMIDINoCurrentSetup: ::libc::c_int = -10837;
pub const kMIDIMessageSendErr: ::libc::c_int = -10838;
pub const kMIDIServerStartErr: ::libc::c_int = -10839;
pub const kMIDISetupFormatErr: ::libc::c_int = -10840;
pub const kMIDIWrongThread: ::libc::c_int = -10841;
pub const kMIDIObjectNotFound: ::libc::c_int = -10842;
pub const kMIDIIDNotUnique: ::libc::c_int = -10843;
pub const kMIDINotPermitted: ::libc::c_int = -10844;
pub type MIDIObjectRef = UInt32;
pub type MIDIClientRef = MIDIObjectRef;
pub type MIDIPortRef = MIDIObjectRef;
pub type MIDIDeviceRef = MIDIObjectRef;
pub type MIDIEntityRef = MIDIObjectRef;
pub type MIDIEndpointRef = MIDIObjectRef;
pub type MIDITimeStamp = UInt64;
pub type Enum_Unnamed401 = ::libc::c_int;
pub const kMIDIObjectType_Other: ::libc::c_int = -1;
pub const kMIDIObjectType_Device: ::libc::c_int = 0;
pub const kMIDIObjectType_Entity: ::libc::c_int = 1;
pub const kMIDIObjectType_Source: ::libc::c_int = 2;
pub const kMIDIObjectType_Destination: ::libc::c_int = 3;
pub const kMIDIObjectType_ExternalMask: ::libc::c_int = 16;
pub const kMIDIObjectType_ExternalDevice: ::libc::c_int = 16;
pub const kMIDIObjectType_ExternalEntity: ::libc::c_int = 17;
pub const kMIDIObjectType_ExternalSource: ::libc::c_int = 18;
pub const kMIDIObjectType_ExternalDestination: ::libc::c_int = 19;
pub type MIDIObjectType = SInt32;
pub type MIDIUniqueID = SInt32;
pub type Enum_Unnamed402 = ::libc::c_uint;
pub const kMIDIInvalidUniqueID: ::libc::c_uint = 0;
pub type MIDIPacketList = Struct_MIDIPacketList;
pub type MIDISysexSendRequest = Struct_MIDISysexSendRequest;
pub type MIDINotification = Struct_MIDINotification;
pub type MIDINotifyProc =
    ::std::option::Option<extern "C" fn(message: *const MIDINotification,
                                        refCon: *mut ::libc::c_void) -> ()>;
pub type MIDIReadProc =
    ::std::option::Option<extern "C" fn(pktlist: *const MIDIPacketList,
                                        readProcRefCon: *mut ::libc::c_void,
                                        srcConnRefCon: *mut ::libc::c_void)
                              -> ()>;
pub type MIDICompletionProc =
    ::std::option::Option<extern "C" fn(request: *mut MIDISysexSendRequest)
                              -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MIDIPacket {
    pub timeStamp: MIDITimeStamp,
    pub length: UInt16,
    pub data: [Byte; 256usize],
}
impl ::std::clone::Clone for Struct_MIDIPacket {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIPacket {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIPacket = Struct_MIDIPacket;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MIDIPacketList {
    pub numPackets: UInt32,
    pub packet: [MIDIPacket; 1usize],
}
impl ::std::clone::Clone for Struct_MIDIPacketList {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIPacketList {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MIDISysexSendRequest {
    pub destination: MIDIEndpointRef,
    pub data: *const Byte,
    pub bytesToSend: UInt32,
    pub complete: Boolean,
    pub reserved: [Byte; 3usize],
    pub completionProc: MIDICompletionProc,
    pub completionRefCon: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_MIDISysexSendRequest {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDISysexSendRequest {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed403 = ::libc::c_uint;
pub const kMIDIMsgSetupChanged: ::libc::c_uint = 1;
pub const kMIDIMsgObjectAdded: ::libc::c_uint = 2;
pub const kMIDIMsgObjectRemoved: ::libc::c_uint = 3;
pub const kMIDIMsgPropertyChanged: ::libc::c_uint = 4;
pub const kMIDIMsgThruConnectionsChanged: ::libc::c_uint = 5;
pub const kMIDIMsgSerialPortOwnerChanged: ::libc::c_uint = 6;
pub const kMIDIMsgIOError: ::libc::c_uint = 7;
pub type MIDINotificationMessageID = SInt32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MIDINotification {
    pub messageID: MIDINotificationMessageID,
    pub messageSize: UInt32,
}
impl ::std::clone::Clone for Struct_MIDINotification {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDINotification {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MIDIObjectAddRemoveNotification {
    pub messageID: MIDINotificationMessageID,
    pub messageSize: UInt32,
    pub parent: MIDIObjectRef,
    pub parentType: MIDIObjectType,
    pub child: MIDIObjectRef,
    pub childType: MIDIObjectType,
}
impl ::std::clone::Clone for Struct_MIDIObjectAddRemoveNotification {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIObjectAddRemoveNotification {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIObjectAddRemoveNotification =
    Struct_MIDIObjectAddRemoveNotification;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MIDIObjectPropertyChangeNotification {
    pub messageID: MIDINotificationMessageID,
    pub messageSize: UInt32,
    pub object: MIDIObjectRef,
    pub objectType: MIDIObjectType,
    pub propertyName: CFStringRef,
}
impl ::std::clone::Clone for Struct_MIDIObjectPropertyChangeNotification {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIObjectPropertyChangeNotification {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIObjectPropertyChangeNotification =
    Struct_MIDIObjectPropertyChangeNotification;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MIDIIOErrorNotification {
    pub messageID: MIDINotificationMessageID,
    pub messageSize: UInt32,
    pub driverDevice: MIDIDeviceRef,
    pub errorCode: OSStatus,
}
impl ::std::clone::Clone for Struct_MIDIIOErrorNotification {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIIOErrorNotification {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIIOErrorNotification = Struct_MIDIIOErrorNotification;
pub type Enum_Unnamed404 = ::libc::c_uint;
pub const kMusicEventType_NULL: ::libc::c_uint = 0;
pub const kMusicEventType_ExtendedNote: ::libc::c_uint = 1;
pub const kMusicEventType_ExtendedTempo: ::libc::c_uint = 3;
pub const kMusicEventType_User: ::libc::c_uint = 4;
pub const kMusicEventType_Meta: ::libc::c_uint = 5;
pub const kMusicEventType_MIDINoteMessage: ::libc::c_uint = 6;
pub const kMusicEventType_MIDIChannelMessage: ::libc::c_uint = 7;
pub const kMusicEventType_MIDIRawData: ::libc::c_uint = 8;
pub const kMusicEventType_Parameter: ::libc::c_uint = 9;
pub const kMusicEventType_AUPreset: ::libc::c_uint = 10;
pub type MusicEventType = UInt32;
pub type Enum_Unnamed405 = ::libc::c_uint;
pub const kMusicSequenceLoadSMF_ChannelsToTracks: ::libc::c_uint = 1;
pub type MusicSequenceLoadFlags = UInt32;
pub type Enum_Unnamed406 = ::libc::c_uint;
pub const kMusicSequenceType_Beats: ::libc::c_uint = 1650811252;
pub const kMusicSequenceType_Seconds: ::libc::c_uint = 1936024435;
pub const kMusicSequenceType_Samples: ::libc::c_uint = 1935764848;
pub type MusicSequenceType = UInt32;
pub type Enum_Unnamed407 = ::libc::c_uint;
pub const kMusicSequenceFile_MIDIType: ::libc::c_uint = 1835623529;
pub const kMusicSequenceFile_iMelodyType: ::libc::c_uint = 1768777068;
pub type MusicSequenceFileTypeID = UInt32;
pub type Enum_Unnamed408 = ::libc::c_uint;
pub const kMusicSequenceFileFlags_EraseFile: ::libc::c_uint = 1;
pub type MusicSequenceFileFlags = UInt32;
pub type MusicTimeStamp = Float64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MIDINoteMessage {
    pub channel: UInt8,
    pub note: UInt8,
    pub velocity: UInt8,
    pub releaseVelocity: UInt8,
    pub duration: Float32,
}
impl ::std::clone::Clone for Struct_MIDINoteMessage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDINoteMessage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDINoteMessage = Struct_MIDINoteMessage;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MIDIChannelMessage {
    pub status: UInt8,
    pub data1: UInt8,
    pub data2: UInt8,
    pub reserved: UInt8,
}
impl ::std::clone::Clone for Struct_MIDIChannelMessage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIChannelMessage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIChannelMessage = Struct_MIDIChannelMessage;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MIDIRawData {
    pub length: UInt32,
    pub data: [UInt8; 1usize],
}
impl ::std::clone::Clone for Struct_MIDIRawData {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIRawData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIRawData = Struct_MIDIRawData;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MIDIMetaEvent {
    pub metaEventType: UInt8,
    pub unused1: UInt8,
    pub unused2: UInt8,
    pub unused3: UInt8,
    pub dataLength: UInt32,
    pub data: [UInt8; 1usize],
}
impl ::std::clone::Clone for Struct_MIDIMetaEvent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIMetaEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIMetaEvent = Struct_MIDIMetaEvent;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MusicEventUserData {
    pub length: UInt32,
    pub data: [UInt8; 1usize],
}
impl ::std::clone::Clone for Struct_MusicEventUserData {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MusicEventUserData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MusicEventUserData = Struct_MusicEventUserData;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ExtendedNoteOnEvent {
    pub instrumentID: MusicDeviceInstrumentID,
    pub groupID: MusicDeviceGroupID,
    pub duration: Float32,
    pub extendedParams: MusicDeviceNoteParams,
}
impl ::std::clone::Clone for Struct_ExtendedNoteOnEvent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ExtendedNoteOnEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ExtendedNoteOnEvent = Struct_ExtendedNoteOnEvent;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ParameterEvent {
    pub parameterID: AudioUnitParameterID,
    pub scope: AudioUnitScope,
    pub element: AudioUnitElement,
    pub value: AudioUnitParameterValue,
}
impl ::std::clone::Clone for Struct_ParameterEvent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ParameterEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ParameterEvent = Struct_ParameterEvent;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ExtendedTempoEvent {
    pub bpm: Float64,
}
impl ::std::clone::Clone for Struct_ExtendedTempoEvent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ExtendedTempoEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ExtendedTempoEvent = Struct_ExtendedTempoEvent;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AUPresetEvent {
    pub scope: AudioUnitScope,
    pub element: AudioUnitElement,
    pub preset: CFPropertyListRef,
}
impl ::std::clone::Clone for Struct_AUPresetEvent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AUPresetEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AUPresetEvent = Struct_AUPresetEvent;
pub type Enum_Unnamed409 = ::libc::c_uint;
pub const kCAClockProperty_InternalTimebase: ::libc::c_uint = 1768846434;
pub const kCAClockProperty_TimebaseSource: ::libc::c_uint = 1769235059;
pub const kCAClockProperty_SyncMode: ::libc::c_uint = 1937337965;
pub const kCAClockProperty_SyncSource: ::libc::c_uint = 1937337971;
pub const kCAClockProperty_SMPTEFormat: ::libc::c_uint = 1936552038;
pub const kCAClockProperty_SMPTEOffset: ::libc::c_uint = 1936552047;
pub const kCAClockProperty_MIDIClockDestinations: ::libc::c_uint = 1835164516;
pub const kCAClockProperty_MTCDestinations: ::libc::c_uint = 1836344164;
pub const kCAClockProperty_MTCFreewheelTime: ::libc::c_uint = 1836344951;
pub const kCAClockProperty_TempoMap: ::libc::c_uint = 1953329263;
pub const kCAClockProperty_MeterTrack: ::libc::c_uint = 1835365490;
pub const kCAClockProperty_Name: ::libc::c_uint = 1851878757;
pub const kCAClockProperty_SendMIDISPP: ::libc::c_uint = 1836281968;
pub type CAClockPropertyID = UInt32;
pub type Enum_Unnamed410 = ::libc::c_uint;
pub const kCAClockTimebase_HostTime: ::libc::c_uint = 1752134516;
pub const kCAClockTimebase_AudioDevice: ::libc::c_uint = 1635083369;
pub const kCAClockTimebase_AudioOutputUnit: ::libc::c_uint = 1635086197;
pub type CAClockTimebase = UInt32;
pub type Enum_Unnamed411 = ::libc::c_uint;
pub const kCAClockSyncMode_Internal: ::libc::c_uint = 1768846450;
pub const kCAClockSyncMode_MIDIClockTransport: ::libc::c_uint = 1835232363;
pub const kCAClockSyncMode_MTCTransport: ::libc::c_uint = 1835889763;
pub type CAClockSyncMode = UInt32;
pub type CAClockSMPTEFormat = UInt32;
pub type Enum_Unnamed412 = ::libc::c_uint;
pub const kCAClockMessage_StartTimeSet: ::libc::c_uint = 1937009005;
pub const kCAClockMessage_Started: ::libc::c_uint = 1937011316;
pub const kCAClockMessage_Stopped: ::libc::c_uint = 1937010544;
pub const kCAClockMessage_Armed: ::libc::c_uint = 1634889060;
pub const kCAClockMessage_Disarmed: ::libc::c_uint = 1684107885;
pub const kCAClockMessage_PropertyChanged: ::libc::c_uint = 1885562983;
pub const kCAClockMessage_WrongSMPTEFormat: ::libc::c_uint = 1064529264;
pub type CAClockMessage = UInt32;
pub type Enum_Unnamed413 = ::libc::c_uint;
pub const kCAClockTimeFormat_HostTime: ::libc::c_uint = 1752134516;
pub const kCAClockTimeFormat_Samples: ::libc::c_uint = 1935764848;
pub const kCAClockTimeFormat_Beats: ::libc::c_uint = 1650811252;
pub const kCAClockTimeFormat_Seconds: ::libc::c_uint = 1936024435;
pub const kCAClockTimeFormat_SMPTESeconds: ::libc::c_uint = 1936552051;
pub const kCAClockTimeFormat_SMPTETime: ::libc::c_uint = 1936552052;
pub type CAClockTimeFormat = UInt32;
pub type Enum_Unnamed414 = ::libc::c_int;
pub const kCAClock_UnknownPropertyError: ::libc::c_int = -66816;
pub const kCAClock_InvalidPropertySizeError: ::libc::c_int = -66815;
pub const kCAClock_InvalidTimeFormatError: ::libc::c_int = -66814;
pub const kCAClock_InvalidSyncModeError: ::libc::c_int = -66813;
pub const kCAClock_InvalidSyncSourceError: ::libc::c_int = -66812;
pub const kCAClock_InvalidTimebaseError: ::libc::c_int = -66811;
pub const kCAClock_InvalidTimebaseSourceError: ::libc::c_int = -66810;
pub const kCAClock_InvalidSMPTEFormatError: ::libc::c_int = -66809;
pub const kCAClock_InvalidSMPTEOffsetError: ::libc::c_int = -66808;
pub const kCAClock_InvalidUnitError: ::libc::c_int = -66807;
pub const kCAClock_InvalidPlayRateError: ::libc::c_int = -66806;
pub const kCAClock_CannotSetTimeError: ::libc::c_int = -66805;
pub enum Struct_OpaqueCAClock { }
pub type CAClockRef = *mut Struct_OpaqueCAClock;
pub type CAClockBeats = Float64;
pub type CAClockTempo = Float64;
pub type CAClockSamples = Float64;
pub type CAClockSeconds = Float64;
pub type CAClockListenerProc =
    ::std::option::Option<extern "C" fn(userData: *mut ::libc::c_void,
                                        message: CAClockMessage,
                                        param: *const ::libc::c_void) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_CAClockTime {
    pub format: CAClockTimeFormat,
    pub reserved: UInt32,
    pub time: Union_Unnamed415,
}
impl ::std::clone::Clone for Struct_CAClockTime {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAClockTime {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed415 {
    pub _bindgen_data_: [u64; 3usize],
}
impl Union_Unnamed415 {
    pub unsafe fn hostTime(&mut self) -> *mut UInt64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn samples(&mut self) -> *mut CAClockSamples {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn beats(&mut self) -> *mut CAClockBeats {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn seconds(&mut self) -> *mut CAClockSeconds {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn smpte(&mut self) -> *mut SMPTETime {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed415 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed415 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAClockTime = Struct_CAClockTime;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_CABarBeatTime {
    pub bar: SInt32,
    pub beat: UInt16,
    pub subbeat: UInt16,
    pub subbeatDivisor: UInt16,
    pub reserved: UInt16,
}
impl ::std::clone::Clone for Struct_CABarBeatTime {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CABarBeatTime {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CABarBeatTime = Struct_CABarBeatTime;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_CATempoMapEntry {
    pub beats: CAClockBeats,
    pub tempoBPM: CAClockTempo,
}
impl ::std::clone::Clone for Struct_CATempoMapEntry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CATempoMapEntry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CATempoMapEntry = Struct_CATempoMapEntry;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_CAMeterTrackEntry {
    pub beats: CAClockBeats,
    pub meterNumer: UInt16,
    pub meterDenom: UInt16,
}
impl ::std::clone::Clone for Struct_CAMeterTrackEntry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAMeterTrackEntry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAMeterTrackEntry = Struct_CAMeterTrackEntry;
pub enum Struct_OpaqueMusicPlayer { }
pub type MusicPlayer = *mut Struct_OpaqueMusicPlayer;
pub enum Struct_OpaqueMusicSequence { }
pub type MusicSequence = *mut Struct_OpaqueMusicSequence;
pub enum Struct_OpaqueMusicTrack { }
pub type MusicTrack = *mut Struct_OpaqueMusicTrack;
pub enum Struct_OpaqueMusicEventIterator { }
pub type MusicEventIterator = *mut Struct_OpaqueMusicEventIterator;
pub type MusicSequenceUserCallback =
    ::std::option::Option<extern "C" fn(inClientData: *mut ::libc::c_void,
                                        inSequence: MusicSequence,
                                        inTrack: MusicTrack,
                                        inEventTime: MusicTimeStamp,
                                        inEventData:
                                            *const MusicEventUserData,
                                        inStartSliceBeat: MusicTimeStamp,
                                        inEndSliceBeat: MusicTimeStamp)
                              -> ()>;
pub type Enum_Unnamed416 = ::libc::c_int;
pub const kAudioToolboxErr_InvalidSequenceType: ::libc::c_int = -10846;
pub const kAudioToolboxErr_TrackIndexError: ::libc::c_int = -10859;
pub const kAudioToolboxErr_TrackNotFound: ::libc::c_int = -10858;
pub const kAudioToolboxErr_EndOfTrack: ::libc::c_int = -10857;
pub const kAudioToolboxErr_StartOfTrack: ::libc::c_int = -10856;
pub const kAudioToolboxErr_IllegalTrackDestination: ::libc::c_int = -10855;
pub const kAudioToolboxErr_NoSequence: ::libc::c_int = -10854;
pub const kAudioToolboxErr_InvalidEventType: ::libc::c_int = -10853;
pub const kAudioToolboxErr_InvalidPlayerState: ::libc::c_int = -10852;
pub const kAudioToolboxErr_CannotDoInCurrentContext: ::libc::c_int = -10863;
pub type Enum_Unnamed417 = ::libc::c_uint;
pub const kSequenceTrackProperty_LoopInfo: ::libc::c_uint = 0;
pub const kSequenceTrackProperty_OffsetTime: ::libc::c_uint = 1;
pub const kSequenceTrackProperty_MuteStatus: ::libc::c_uint = 2;
pub const kSequenceTrackProperty_SoloStatus: ::libc::c_uint = 3;
pub const kSequenceTrackProperty_AutomatedParameters: ::libc::c_uint = 4;
pub const kSequenceTrackProperty_TrackLength: ::libc::c_uint = 5;
pub const kSequenceTrackProperty_TimeResolution: ::libc::c_uint = 6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MusicTrackLoopInfo {
    pub loopDuration: MusicTimeStamp,
    pub numberOfLoops: SInt32,
}
impl ::std::clone::Clone for Struct_MusicTrackLoopInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MusicTrackLoopInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MusicTrackLoopInfo = Struct_MusicTrackLoopInfo;
pub type Enum_Unnamed418 = ::libc::c_uint;
pub const kMusicEventType_ExtendedControl: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ExtendedControlEvent {
    pub groupID: MusicDeviceGroupID,
    pub controlID: AudioUnitParameterID,
    pub value: AudioUnitParameterValue,
}
impl ::std::clone::Clone for Struct_ExtendedControlEvent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ExtendedControlEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ExtendedControlEvent = Struct_ExtendedControlEvent;
pub type Enum_Unnamed419 = ::libc::c_uint;
pub const kCAF_FileType: ::libc::c_uint = 1667327590;
pub const kCAF_FileVersion_Initial: ::libc::c_uint = 1;
pub type Enum_Unnamed420 = ::libc::c_uint;
pub const kCAF_StreamDescriptionChunkID: ::libc::c_uint = 1684370275;
pub const kCAF_AudioDataChunkID: ::libc::c_uint = 1684108385;
pub const kCAF_ChannelLayoutChunkID: ::libc::c_uint = 1667785070;
pub const kCAF_FillerChunkID: ::libc::c_uint = 1718773093;
pub const kCAF_MarkerChunkID: ::libc::c_uint = 1835102827;
pub const kCAF_RegionChunkID: ::libc::c_uint = 1919248238;
pub const kCAF_InstrumentChunkID: ::libc::c_uint = 1768846196;
pub const kCAF_MagicCookieID: ::libc::c_uint = 1802857321;
pub const kCAF_InfoStringsChunkID: ::libc::c_uint = 1768842863;
pub const kCAF_EditCommentsChunkID: ::libc::c_uint = 1701077876;
pub const kCAF_PacketTableChunkID: ::libc::c_uint = 1885432692;
pub const kCAF_StringsChunkID: ::libc::c_uint = 1937011303;
pub const kCAF_UUIDChunkID: ::libc::c_uint = 1970628964;
pub const kCAF_PeakChunkID: ::libc::c_uint = 1885692267;
pub const kCAF_OverviewChunkID: ::libc::c_uint = 1870034551;
pub const kCAF_MIDIChunkID: ::libc::c_uint = 1835623529;
pub const kCAF_UMIDChunkID: ::libc::c_uint = 1970104676;
pub const kCAF_FormatListID: ::libc::c_uint = 1818522467;
pub const kCAF_iXMLChunkID: ::libc::c_uint = 1767394636;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFFileHeader {
    pub mFileType: UInt32,
    pub mFileVersion: UInt16,
    pub mFileFlags: UInt16,
}
impl ::std::clone::Clone for Struct_CAFFileHeader {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFFileHeader {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFFileHeader = Struct_CAFFileHeader;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFChunkHeader {
    pub mChunkType: UInt32,
    pub mChunkSize: SInt64,
}
impl ::std::clone::Clone for Struct_CAFChunkHeader {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFChunkHeader {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFChunkHeader = Struct_CAFChunkHeader;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAF_UUID_ChunkHeader {
    pub mHeader: CAFChunkHeader,
    pub mUUID: [UInt8; 16usize],
}
impl ::std::clone::Clone for Struct_CAF_UUID_ChunkHeader {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAF_UUID_ChunkHeader {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAF_UUID_ChunkHeader = Struct_CAF_UUID_ChunkHeader;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFAudioDescription {
    pub mSampleRate: Float64,
    pub mFormatID: UInt32,
    pub mFormatFlags: UInt32,
    pub mBytesPerPacket: UInt32,
    pub mFramesPerPacket: UInt32,
    pub mChannelsPerFrame: UInt32,
    pub mBitsPerChannel: UInt32,
}
impl ::std::clone::Clone for Struct_CAFAudioDescription {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFAudioDescription {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFAudioDescription = Struct_CAFAudioDescription;
pub type Enum_Unnamed421 = ::libc::c_uint;
pub const kCAFLinearPCMFormatFlagIsFloat: ::libc::c_uint = 1;
pub const kCAFLinearPCMFormatFlagIsLittleEndian: ::libc::c_uint = 2;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFAudioFormatListItem {
    pub mFormat: CAFAudioDescription,
    pub mChannelLayoutTag: UInt32,
}
impl ::std::clone::Clone for Struct_CAFAudioFormatListItem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFAudioFormatListItem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFPacketTableHeader {
    pub mNumberPackets: SInt64,
    pub mNumberValidFrames: SInt64,
    pub mPrimingFrames: SInt32,
    pub mRemainderFrames: SInt32,
    pub mPacketDescriptions: [UInt8; 1usize],
}
impl ::std::clone::Clone for Struct_CAFPacketTableHeader {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFPacketTableHeader {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFPacketTableHeader = Struct_CAFPacketTableHeader;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFDataChunk {
    pub mEditCount: UInt32,
    pub mData: [UInt8; 1usize],
}
impl ::std::clone::Clone for Struct_CAFDataChunk {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFDataChunk {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFDataChunk = Struct_CAFDataChunk;
pub type Enum_Unnamed422 = ::libc::c_uint;
pub const kCAFMarkerType_Generic: ::libc::c_uint = 0;
pub const kCAFMarkerType_ProgramStart: ::libc::c_uint = 1885496679;
pub const kCAFMarkerType_ProgramEnd: ::libc::c_uint = 1885695588;
pub const kCAFMarkerType_TrackStart: ::libc::c_uint = 1952605543;
pub const kCAFMarkerType_TrackEnd: ::libc::c_uint = 1952804452;
pub const kCAFMarkerType_Index: ::libc::c_uint = 1768842360;
pub const kCAFMarkerType_RegionStart: ::libc::c_uint = 1919051111;
pub const kCAFMarkerType_RegionEnd: ::libc::c_uint = 1919250020;
pub const kCAFMarkerType_RegionSyncPoint: ::libc::c_uint = 1920170339;
pub const kCAFMarkerType_SelectionStart: ::libc::c_uint = 1935828327;
pub const kCAFMarkerType_SelectionEnd: ::libc::c_uint = 1936027236;
pub const kCAFMarkerType_EditSourceBegin: ::libc::c_uint = 1667392871;
pub const kCAFMarkerType_EditSourceEnd: ::libc::c_uint = 1667591780;
pub const kCAFMarkerType_EditDestinationBegin: ::libc::c_uint = 1684170087;
pub const kCAFMarkerType_EditDestinationEnd: ::libc::c_uint = 1684368996;
pub const kCAFMarkerType_SustainLoopStart: ::libc::c_uint = 1936482919;
pub const kCAFMarkerType_SustainLoopEnd: ::libc::c_uint = 1936483694;
pub const kCAFMarkerType_ReleaseLoopStart: ::libc::c_uint = 1919705703;
pub const kCAFMarkerType_ReleaseLoopEnd: ::libc::c_uint = 1919706478;
pub const kCAFMarkerType_SavedPlayPosition: ::libc::c_uint = 1936747641;
pub const kCAFMarkerType_Tempo: ::libc::c_uint = 1953329263;
pub const kCAFMarkerType_TimeSignature: ::libc::c_uint = 1953720679;
pub const kCAFMarkerType_KeySignature: ::libc::c_uint = 1802725735;
pub type Enum_Unnamed423 = ::libc::c_uint;
pub const kCAF_SMPTE_TimeTypeNone: ::libc::c_uint = 0;
pub const kCAF_SMPTE_TimeType24: ::libc::c_uint = 1;
pub const kCAF_SMPTE_TimeType25: ::libc::c_uint = 2;
pub const kCAF_SMPTE_TimeType30Drop: ::libc::c_uint = 3;
pub const kCAF_SMPTE_TimeType30: ::libc::c_uint = 4;
pub const kCAF_SMPTE_TimeType2997: ::libc::c_uint = 5;
pub const kCAF_SMPTE_TimeType2997Drop: ::libc::c_uint = 6;
pub const kCAF_SMPTE_TimeType60: ::libc::c_uint = 7;
pub const kCAF_SMPTE_TimeType5994: ::libc::c_uint = 8;
pub const kCAF_SMPTE_TimeType60Drop: ::libc::c_uint = 9;
pub const kCAF_SMPTE_TimeType5994Drop: ::libc::c_uint = 10;
pub const kCAF_SMPTE_TimeType50: ::libc::c_uint = 11;
pub const kCAF_SMPTE_TimeType2398: ::libc::c_uint = 12;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAF_SMPTE_Time {
    pub mHours: SInt8,
    pub mMinutes: SInt8,
    pub mSeconds: SInt8,
    pub mFrames: SInt8,
    pub mSubFrameSampleOffset: UInt32,
}
impl ::std::clone::Clone for Struct_CAF_SMPTE_Time {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAF_SMPTE_Time {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAF_SMPTE_Time = Struct_CAF_SMPTE_Time;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFMarker {
    pub mType: UInt32,
    pub mFramePosition: Float64,
    pub mMarkerID: UInt32,
    pub mSMPTETime: CAF_SMPTE_Time,
    pub mChannel: UInt32,
}
impl ::std::clone::Clone for Struct_CAFMarker {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFMarker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFMarker = Struct_CAFMarker;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFMarkerChunk {
    pub mSMPTE_TimeType: UInt32,
    pub mNumberMarkers: UInt32,
    pub mMarkers: [CAFMarker; 1usize],
}
impl ::std::clone::Clone for Struct_CAFMarkerChunk {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFMarkerChunk {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFMarkerChunk = Struct_CAFMarkerChunk;
pub type Enum_Unnamed424 = ::libc::c_uint;
pub const kCAFRegionFlag_LoopEnable: ::libc::c_uint = 1;
pub const kCAFRegionFlag_PlayForward: ::libc::c_uint = 2;
pub const kCAFRegionFlag_PlayBackward: ::libc::c_uint = 4;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFRegion {
    pub mRegionID: UInt32,
    pub mFlags: UInt32,
    pub mNumberMarkers: UInt32,
    pub mMarkers: [CAFMarker; 1usize],
}
impl ::std::clone::Clone for Struct_CAFRegion {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFRegion {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFRegion = Struct_CAFRegion;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFRegionChunk {
    pub mSMPTE_TimeType: UInt32,
    pub mNumberRegions: UInt32,
    pub mRegions: [CAFRegion; 1usize],
}
impl ::std::clone::Clone for Struct_CAFRegionChunk {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFRegionChunk {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFRegionChunk = Struct_CAFRegionChunk;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFInstrumentChunk {
    pub mBaseNote: Float32,
    pub mMIDILowNote: UInt8,
    pub mMIDIHighNote: UInt8,
    pub mMIDILowVelocity: UInt8,
    pub mMIDIHighVelocity: UInt8,
    pub mdBGain: Float32,
    pub mStartRegionID: UInt32,
    pub mSustainRegionID: UInt32,
    pub mReleaseRegionID: UInt32,
    pub mInstrumentID: UInt32,
}
impl ::std::clone::Clone for Struct_CAFInstrumentChunk {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFInstrumentChunk {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFInstrumentChunk = Struct_CAFInstrumentChunk;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFStringID {
    pub mStringID: UInt32,
    pub mStringStartByteOffset: SInt64,
}
impl ::std::clone::Clone for Struct_CAFStringID {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFStringID {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFStringID = Struct_CAFStringID;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFStrings {
    pub mNumEntries: UInt32,
    pub mStringsIDs: [CAFStringID; 1usize],
}
impl ::std::clone::Clone for Struct_CAFStrings {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFStrings {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFStrings = Struct_CAFStrings;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFInfoStrings {
    pub mNumEntries: UInt32,
}
impl ::std::clone::Clone for Struct_CAFInfoStrings {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFInfoStrings {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFInfoStrings = Struct_CAFInfoStrings;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFPositionPeak {
    pub mValue: Float32,
    pub mFrameNumber: UInt64,
}
impl ::std::clone::Clone for Struct_CAFPositionPeak {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFPositionPeak {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFPositionPeak = Struct_CAFPositionPeak;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFPeakChunk {
    pub mEditCount: UInt32,
    pub mPeaks: [CAFPositionPeak; 1usize],
}
impl ::std::clone::Clone for Struct_CAFPeakChunk {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFPeakChunk {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFPeakChunk = Struct_CAFPeakChunk;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFOverviewSample {
    pub mMinValue: SInt16,
    pub mMaxValue: SInt16,
}
impl ::std::clone::Clone for Struct_CAFOverviewSample {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFOverviewSample {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFOverviewSample = Struct_CAFOverviewSample;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFOverviewChunk {
    pub mEditCount: UInt32,
    pub mNumFramesPerOVWSample: UInt32,
    pub mData: [CAFOverviewSample; 1usize],
}
impl ::std::clone::Clone for Struct_CAFOverviewChunk {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFOverviewChunk {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFOverviewChunk = Struct_CAFOverviewChunk;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_CAFUMIDChunk {
    pub mBytes: [UInt8; 64usize],
}
impl ::std::clone::Clone for Struct_CAFUMIDChunk {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CAFUMIDChunk {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CAFUMIDChunk = Struct_CAFUMIDChunk;
pub type AudioFileComponent = AudioComponentInstance;
pub type AudioFileComponentPropertyID = UInt32;
pub type Enum_Unnamed425 = ::libc::c_uint;
pub const kAudioFileComponent_CanRead: ::libc::c_uint = 1668182628;
pub const kAudioFileComponent_CanWrite: ::libc::c_uint = 1668183922;
pub const kAudioFileComponent_FileTypeName: ::libc::c_uint = 1718906477;
pub const kAudioFileComponent_UTIsForType: ::libc::c_uint = 1718973545;
pub const kAudioFileComponent_MIMETypesForType: ::libc::c_uint = 1718446445;
pub const kAudioFileComponent_ExtensionsForType: ::libc::c_uint = 1717926004;
pub const kAudioFileComponent_AvailableFormatIDs: ::libc::c_uint = 1718446436;
pub const kAudioFileComponent_AvailableStreamDescriptionsForFormat:
          ::libc::c_uint =
    1935960420;
pub const kAudioFileComponent_FastDispatchTable: ::libc::c_uint = 1717855860;
pub const kAudioFileComponent_HFSTypeCodesForType: ::libc::c_uint =
    1718118003;
pub type Enum_Unnamed426 = ::libc::c_uint;
pub const kAudioFileCreateSelect: ::libc::c_uint = 1;
pub const kAudioFileOpenSelect: ::libc::c_uint = 2;
pub const kAudioFileInitializeSelect: ::libc::c_uint = 3;
pub const kAudioFileOpenWithCallbacksSelect: ::libc::c_uint = 4;
pub const kAudioFileInitializeWithCallbacksSelect: ::libc::c_uint = 5;
pub const kAudioFileCloseSelect: ::libc::c_uint = 6;
pub const kAudioFileOptimizeSelect: ::libc::c_uint = 7;
pub const kAudioFileReadBytesSelect: ::libc::c_uint = 8;
pub const kAudioFileWriteBytesSelect: ::libc::c_uint = 9;
pub const kAudioFileReadPacketsSelect: ::libc::c_uint = 10;
pub const kAudioFileWritePacketsSelect: ::libc::c_uint = 11;
pub const kAudioFileGetPropertyInfoSelect: ::libc::c_uint = 12;
pub const kAudioFileGetPropertySelect: ::libc::c_uint = 13;
pub const kAudioFileSetPropertySelect: ::libc::c_uint = 14;
pub const kAudioFileExtensionIsThisFormatSelect: ::libc::c_uint = 15;
pub const kAudioFileFileIsThisFormatSelect: ::libc::c_uint = 16;
pub const kAudioFileDataIsThisFormatSelect: ::libc::c_uint = 17;
pub const kAudioFileGetGlobalInfoSizeSelect: ::libc::c_uint = 18;
pub const kAudioFileGetGlobalInfoSelect: ::libc::c_uint = 19;
pub const kAudioFileCountUserDataSelect: ::libc::c_uint = 20;
pub const kAudioFileGetUserDataSizeSelect: ::libc::c_uint = 21;
pub const kAudioFileGetUserDataSelect: ::libc::c_uint = 22;
pub const kAudioFileSetUserDataSelect: ::libc::c_uint = 23;
pub const kAudioFileRemoveUserDataSelect: ::libc::c_uint = 24;
pub const kAudioFileCreateURLSelect: ::libc::c_uint = 25;
pub const kAudioFileOpenURLSelect: ::libc::c_uint = 26;
pub const kAudioFileFileDataIsThisFormatSelect: ::libc::c_uint = 27;
pub const kAudioFileReadPacketDataSelect: ::libc::c_uint = 28;
pub type ReadBytesFDF =
    ::std::option::Option<extern "C" fn(inComponentStorage:
                                            *mut ::libc::c_void,
                                        inUseCache: Boolean,
                                        inStartingByte: SInt64,
                                        ioNumBytes: *mut UInt32,
                                        outBuffer: *mut ::libc::c_void)
                              -> OSStatus>;
pub type WriteBytesFDF =
    ::std::option::Option<extern "C" fn(inComponentStorage:
                                            *mut ::libc::c_void,
                                        inUseCache: Boolean,
                                        inStartingByte: SInt64,
                                        ioNumBytes: *mut UInt32,
                                        inBuffer: *const ::libc::c_void)
                              -> OSStatus>;
pub type ReadPacketsFDF =
    ::std::option::Option<extern "C" fn(inComponentStorage:
                                            *mut ::libc::c_void,
                                        inUseCache: Boolean,
                                        outNumBytes: *mut UInt32,
                                        outPacketDescriptions:
                                            *mut AudioStreamPacketDescription,
                                        inStartingPacket: SInt64,
                                        ioNumPackets: *mut UInt32,
                                        outBuffer: *mut ::libc::c_void)
                              -> OSStatus>;
pub type ReadPacketDataFDF =
    ::std::option::Option<extern "C" fn(inComponentStorage:
                                            *mut ::libc::c_void,
                                        inUseCache: Boolean,
                                        ioNumBytes: *mut UInt32,
                                        outPacketDescriptions:
                                            *mut AudioStreamPacketDescription,
                                        inStartingPacket: SInt64,
                                        ioNumPackets: *mut UInt32,
                                        outBuffer: *mut ::libc::c_void)
                              -> OSStatus>;
pub type WritePacketsFDF =
    ::std::option::Option<extern "C" fn(inComponentStorage:
                                            *mut ::libc::c_void,
                                        inUseCache: Boolean,
                                        inNumBytes: UInt32,
                                        inPacketDescriptions:
                                            *const AudioStreamPacketDescription,
                                        inStartingPacket: SInt64,
                                        ioNumPackets: *mut UInt32,
                                        inBuffer: *const ::libc::c_void)
                              -> OSStatus>;
pub type GetPropertyInfoFDF =
    ::std::option::Option<extern "C" fn(inComponentStorage:
                                            *mut ::libc::c_void,
                                        inPropertyID: AudioFilePropertyID,
                                        outDataSize: *mut UInt32,
                                        isWritable: *mut UInt32) -> OSStatus>;
pub type GetPropertyFDF =
    ::std::option::Option<extern "C" fn(inComponentStorage:
                                            *mut ::libc::c_void,
                                        inPropertyID: AudioFilePropertyID,
                                        ioDataSize: *mut UInt32,
                                        ioPropertyData: *mut ::libc::c_void)
                              -> OSStatus>;
pub type SetPropertyFDF =
    ::std::option::Option<extern "C" fn(inComponentStorage:
                                            *mut ::libc::c_void,
                                        inPropertyID: AudioFilePropertyID,
                                        inDataSize: UInt32,
                                        inPropertyData: *const ::libc::c_void)
                              -> OSStatus>;
pub type CountUserDataFDF =
    ::std::option::Option<extern "C" fn(inComponentStorage:
                                            *mut ::libc::c_void,
                                        inUserDataID: UInt32,
                                        outNumberItems: *mut UInt32)
                              -> OSStatus>;
pub type GetUserDataSizeFDF =
    ::std::option::Option<extern "C" fn(inComponentStorage:
                                            *mut ::libc::c_void,
                                        inUserDataID: UInt32, inIndex: UInt32,
                                        outDataSize: *mut UInt32)
                              -> OSStatus>;
pub type GetUserDataFDF =
    ::std::option::Option<extern "C" fn(inComponentStorage:
                                            *mut ::libc::c_void,
                                        inUserDataID: UInt32, inIndex: UInt32,
                                        ioUserDataSize: *mut UInt32,
                                        outUserData: *mut ::libc::c_void)
                              -> OSStatus>;
pub type SetUserDataFDF =
    ::std::option::Option<extern "C" fn(inComponentStorage:
                                            *mut ::libc::c_void,
                                        inUserDataID: UInt32, inIndex: UInt32,
                                        inUserDataSize: UInt32,
                                        inUserData: *const ::libc::c_void)
                              -> OSStatus>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioFileFDFTable {
    pub mComponentStorage: *mut ::libc::c_void,
    pub mReadBytesFDF: ReadBytesFDF,
    pub mWriteBytesFDF: WriteBytesFDF,
    pub mReadPacketsFDF: ReadPacketsFDF,
    pub mWritePacketsFDF: WritePacketsFDF,
    pub mGetPropertyInfoFDF: GetPropertyInfoFDF,
    pub mGetPropertyFDF: GetPropertyFDF,
    pub mSetPropertyFDF: SetPropertyFDF,
    pub mCountUserDataFDF: CountUserDataFDF,
    pub mGetUserDataSizeFDF: GetUserDataSizeFDF,
    pub mGetUserDataFDF: GetUserDataFDF,
    pub mSetUserDataFDF: SetUserDataFDF,
}
impl ::std::clone::Clone for Struct_AudioFileFDFTable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioFileFDFTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioFileFDFTable = Struct_AudioFileFDFTable;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioFileFDFTableExtended {
    pub mComponentStorage: *mut ::libc::c_void,
    pub mReadBytesFDF: ReadBytesFDF,
    pub mWriteBytesFDF: WriteBytesFDF,
    pub mReadPacketsFDF: ReadPacketsFDF,
    pub mWritePacketsFDF: WritePacketsFDF,
    pub mGetPropertyInfoFDF: GetPropertyInfoFDF,
    pub mGetPropertyFDF: GetPropertyFDF,
    pub mSetPropertyFDF: SetPropertyFDF,
    pub mCountUserDataFDF: CountUserDataFDF,
    pub mGetUserDataSizeFDF: GetUserDataSizeFDF,
    pub mGetUserDataFDF: GetUserDataFDF,
    pub mSetUserDataFDF: SetUserDataFDF,
    pub mReadPacketDataFDF: ReadPacketDataFDF,
}
impl ::std::clone::Clone for Struct_AudioFileFDFTableExtended {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioFileFDFTableExtended {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioFileFDFTableExtended = Struct_AudioFileFDFTableExtended;
pub type AudioFileComponentCreateURLProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inFileRef: CFURLRef,
                                        inFormat:
                                            *const AudioStreamBasicDescription,
                                        inFlags: UInt32) -> OSStatus>;
pub type AudioFileComponentOpenURLProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inFileRef: CFURLRef,
                                        inPermissions: SInt8,
                                        inFileDescriptor: ::libc::c_int)
                              -> OSStatus>;
pub type AudioFileComponentOpenWithCallbacksProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inClientData: *mut ::libc::c_void,
                                        inReadFunc: AudioFile_ReadProc,
                                        inWriteFunc: AudioFile_WriteProc,
                                        inGetSizeFunc: AudioFile_GetSizeProc,
                                        inSetSizeFunc: AudioFile_SetSizeProc)
                              -> OSStatus>;
pub type AudioFileComponentInitializeWithCallbacksProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inClientData: *mut ::libc::c_void,
                                        inReadFunc: AudioFile_ReadProc,
                                        inWriteFunc: AudioFile_WriteProc,
                                        inGetSizeFunc: AudioFile_GetSizeProc,
                                        inSetSizeFunc: AudioFile_SetSizeProc,
                                        inFileType: UInt32,
                                        inFormat:
                                            *const AudioStreamBasicDescription,
                                        inFlags: UInt32) -> OSStatus>;
pub type AudioFileComponentCloseProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioFileComponentOptimizeProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioFileComponentReadBytesProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inUseCache: Boolean,
                                        inStartingByte: SInt64,
                                        ioNumBytes: *mut UInt32,
                                        outBuffer: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioFileComponentWriteBytesProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inUseCache: Boolean,
                                        inStartingByte: SInt64,
                                        ioNumBytes: *mut UInt32,
                                        inBuffer: *const ::libc::c_void)
                              -> OSStatus>;
pub type AudioFileComponentReadPacketsProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inUseCache: Boolean,
                                        outNumBytes: *mut UInt32,
                                        outPacketDescriptions:
                                            *mut AudioStreamPacketDescription,
                                        inStartingPacket: SInt64,
                                        ioNumPackets: *mut UInt32,
                                        outBuffer: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioFileComponentReadPacketDataProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inUseCache: Boolean,
                                        ioNumBytes: *mut UInt32,
                                        outPacketDescriptions:
                                            *mut AudioStreamPacketDescription,
                                        inStartingPacket: SInt64,
                                        ioNumPackets: *mut UInt32,
                                        outBuffer: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioFileComponentWritePacketsProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inUseCache: Boolean,
                                        inNumBytes: UInt32,
                                        inPacketDescriptions:
                                            *const AudioStreamPacketDescription,
                                        inStartingPacket: SInt64,
                                        ioNumPackets: *mut UInt32,
                                        inBuffer: *const ::libc::c_void)
                              -> OSStatus>;
pub type AudioFileComponentGetPropertyInfoProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inPropertyID:
                                            AudioFileComponentPropertyID,
                                        outPropertySize: *mut UInt32,
                                        outWritable: *mut UInt32)
                              -> OSStatus>;
pub type AudioFileComponentGetPropertyProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inPropertyID:
                                            AudioFileComponentPropertyID,
                                        ioPropertyDataSize: *mut UInt32,
                                        outPropertyData: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioFileComponentSetPropertyProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inPropertyID:
                                            AudioFileComponentPropertyID,
                                        inPropertyDataSize: UInt32,
                                        inPropertyData: *const ::libc::c_void)
                              -> OSStatus>;
pub type AudioFileComponentCountUserDataProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inUserDataID: UInt32,
                                        outNumberItems: *mut UInt32)
                              -> OSStatus>;
pub type AudioFileComponentGetUserDataSizeProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inUserDataID: UInt32, inIndex: UInt32,
                                        outUserDataSize: *mut UInt32)
                              -> OSStatus>;
pub type AudioFileComponentGetUserDataProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inUserDataID: UInt32, inIndex: UInt32,
                                        ioUserDataSize: *mut UInt32,
                                        outUserData: *mut ::libc::c_void)
                              -> OSStatus>;
pub type AudioFileComponentSetUserDataProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inUserDataID: UInt32, inIndex: UInt32,
                                        inUserDataSize: UInt32,
                                        inUserData: *const ::libc::c_void)
                              -> OSStatus>;
pub type AudioFileComponentRemoveUserDataProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inUserDataID: UInt32, inIndex: UInt32)
                              -> OSStatus>;
pub type AudioFileComponentExtensionIsThisFormatProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inExtension: CFStringRef,
                                        outResult: *mut UInt32) -> OSStatus>;
pub type AudioFileComponentFileDataIsThisFormatProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inDataByteSize: UInt32,
                                        inData: *const ::libc::c_void,
                                        outResult: *mut UInt32) -> OSStatus>;
pub type AudioFileComponentGetGlobalInfoSizeProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inPropertyID:
                                            AudioFileComponentPropertyID,
                                        inSpecifierSize: UInt32,
                                        inSpecifier: *const ::libc::c_void,
                                        outPropertySize: *mut UInt32)
                              -> OSStatus>;
pub type AudioFileComponentGetGlobalInfoProc =
    ::std::option::Option<extern "C" fn(_self: *mut ::libc::c_void,
                                        inPropertyID:
                                            AudioFileComponentPropertyID,
                                        inSpecifierSize: UInt32,
                                        inSpecifier: *const ::libc::c_void,
                                        ioPropertyDataSize: *mut UInt32,
                                        outPropertyData: *mut ::libc::c_void)
                              -> OSStatus>;
pub type Enum_Unnamed427 = ::libc::c_uint;
pub const kAUParameterListener_AnyParameter: ::libc::c_uint = ::std::u32::MAX;
pub type Enum_Unnamed428 = ::libc::c_uint;
pub const kAudioUnitEvent_ParameterValueChange: ::libc::c_uint = 0;
pub const kAudioUnitEvent_BeginParameterChangeGesture: ::libc::c_uint = 1;
pub const kAudioUnitEvent_EndParameterChangeGesture: ::libc::c_uint = 2;
pub const kAudioUnitEvent_PropertyChange: ::libc::c_uint = 3;
pub type AudioUnitEventType = UInt32;
pub enum Struct_AUListenerBase { }
pub type AUParameterListenerRef = *mut Struct_AUListenerBase;
pub type AUEventListenerRef = AUParameterListenerRef;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AudioUnitEvent {
    pub mEventType: AudioUnitEventType,
    pub mArgument: Union_Unnamed429,
}
impl ::std::clone::Clone for Struct_AudioUnitEvent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AudioUnitEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed429 {
    pub _bindgen_data_: [u64; 3usize],
}
impl Union_Unnamed429 {
    pub unsafe fn mParameter(&mut self) -> *mut AudioUnitParameter {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mProperty(&mut self) -> *mut AudioUnitProperty {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed429 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed429 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AudioUnitEvent = Struct_AudioUnitEvent;
pub type AUParameterListenerBlock = ::libc::c_void;
pub type AUEventListenerBlock = ::libc::c_void;
pub type AUParameterListenerProc =
    ::std::option::Option<extern "C" fn(inUserData: *mut ::libc::c_void,
                                        inObject: *mut ::libc::c_void,
                                        inParameter:
                                            *const AudioUnitParameter,
                                        inValue: AudioUnitParameterValue)
                              -> ()>;
pub type AUEventListenerProc =
    ::std::option::Option<extern "C" fn(inUserData: *mut ::libc::c_void,
                                        inObject: *mut ::libc::c_void,
                                        inEvent: *const AudioUnitEvent,
                                        inEventHostTime: UInt64,
                                        inParameterValue:
                                            AudioUnitParameterValue) -> ()>;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "AudioUnit", kind = "framework")]
#[link(name = "AudioToolbox", kind = "framework")]
#[link(name = "CoreServices", kind = "framework")]
extern "C" {
    pub static mut _NSConcreteGlobalBlock: [*mut ::libc::c_void; 32usize];
    pub static mut _NSConcreteStackBlock: [*mut ::libc::c_void; 32usize];
    pub static mut kCFCoreFoundationVersionNumber: ::libc::c_double;
    pub static kCFNull: CFNullRef;
    pub static kCFAllocatorDefault: CFAllocatorRef;
    pub static kCFAllocatorSystemDefault: CFAllocatorRef;
    pub static kCFAllocatorMalloc: CFAllocatorRef;
    pub static kCFAllocatorMallocZone: CFAllocatorRef;
    pub static kCFAllocatorNull: CFAllocatorRef;
    pub static kCFAllocatorUseContext: CFAllocatorRef;
    pub static mut _DefaultRuneLocale: _RuneLocale;
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
    pub static mut signgam: ::libc::c_int;
    pub static mut sys_signame: [*const ::libc::c_char; 32usize];
    pub static mut sys_siglist: [*const ::libc::c_char; 32usize];
    pub static mut __stdinp: *mut FILE;
    pub static mut __stdoutp: *mut FILE;
    pub static mut __stderrp: *mut FILE;
    pub static sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
    pub static mut __mb_cur_max: ::libc::c_int;
    pub static mut suboptarg: *mut ::libc::c_char;
    pub static mut tzname: *mut *mut ::libc::c_char;
    pub static mut getdate_err: ::libc::c_int;
    pub static mut timezone: ::libc::c_long;
    pub static mut daylight: ::libc::c_int;
    pub static kCFTypeArrayCallBacks: CFArrayCallBacks;
    pub static kCFTypeBagCallBacks: CFBagCallBacks;
    pub static kCFCopyStringBagCallBacks: CFBagCallBacks;
    pub static kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks;
    pub static kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
    pub static kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
    pub static kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
    pub static kCFLocaleCurrentLocaleDidChangeNotification: CFStringRef;
    pub static kCFLocaleIdentifier: CFStringRef;
    pub static kCFLocaleLanguageCode: CFStringRef;
    pub static kCFLocaleCountryCode: CFStringRef;
    pub static kCFLocaleScriptCode: CFStringRef;
    pub static kCFLocaleVariantCode: CFStringRef;
    pub static kCFLocaleExemplarCharacterSet: CFStringRef;
    pub static kCFLocaleCalendarIdentifier: CFStringRef;
    pub static kCFLocaleCalendar: CFStringRef;
    pub static kCFLocaleCollationIdentifier: CFStringRef;
    pub static kCFLocaleUsesMetricSystem: CFStringRef;
    pub static kCFLocaleMeasurementSystem: CFStringRef;
    pub static kCFLocaleDecimalSeparator: CFStringRef;
    pub static kCFLocaleGroupingSeparator: CFStringRef;
    pub static kCFLocaleCurrencySymbol: CFStringRef;
    pub static kCFLocaleCurrencyCode: CFStringRef;
    pub static kCFLocaleCollatorIdentifier: CFStringRef;
    pub static kCFLocaleQuotationBeginDelimiterKey: CFStringRef;
    pub static kCFLocaleQuotationEndDelimiterKey: CFStringRef;
    pub static kCFLocaleAlternateQuotationBeginDelimiterKey: CFStringRef;
    pub static kCFLocaleAlternateQuotationEndDelimiterKey: CFStringRef;
    pub static kCFGregorianCalendar: CFStringRef;
    pub static kCFBuddhistCalendar: CFStringRef;
    pub static kCFChineseCalendar: CFStringRef;
    pub static kCFHebrewCalendar: CFStringRef;
    pub static kCFIslamicCalendar: CFStringRef;
    pub static kCFIslamicCivilCalendar: CFStringRef;
    pub static kCFJapaneseCalendar: CFStringRef;
    pub static kCFRepublicOfChinaCalendar: CFStringRef;
    pub static kCFPersianCalendar: CFStringRef;
    pub static kCFIndianCalendar: CFStringRef;
    pub static kCFISO8601Calendar: CFStringRef;
    pub static kCFIslamicTabularCalendar: CFStringRef;
    pub static kCFIslamicUmmAlQuraCalendar: CFStringRef;
    pub static kCFAbsoluteTimeIntervalSince1970: CFTimeInterval;
    pub static kCFAbsoluteTimeIntervalSince1904: CFTimeInterval;
    pub static kCFStringTransformStripCombiningMarks: CFStringRef;
    pub static kCFStringTransformToLatin: CFStringRef;
    pub static kCFStringTransformFullwidthHalfwidth: CFStringRef;
    pub static kCFStringTransformLatinKatakana: CFStringRef;
    pub static kCFStringTransformLatinHiragana: CFStringRef;
    pub static kCFStringTransformHiraganaKatakana: CFStringRef;
    pub static kCFStringTransformMandarinLatin: CFStringRef;
    pub static kCFStringTransformLatinHangul: CFStringRef;
    pub static kCFStringTransformLatinArabic: CFStringRef;
    pub static kCFStringTransformLatinHebrew: CFStringRef;
    pub static kCFStringTransformLatinThai: CFStringRef;
    pub static kCFStringTransformLatinCyrillic: CFStringRef;
    pub static kCFStringTransformLatinGreek: CFStringRef;
    pub static kCFStringTransformToXMLHex: CFStringRef;
    pub static kCFStringTransformToUnicodeName: CFStringRef;
    pub static kCFStringTransformStripDiacritics: CFStringRef;
    pub static kCFTimeZoneSystemTimeZoneDidChangeNotification: CFStringRef;
    pub static kCFDateFormatterIsLenient: CFStringRef;
    pub static kCFDateFormatterTimeZone: CFStringRef;
    pub static kCFDateFormatterCalendarName: CFStringRef;
    pub static kCFDateFormatterDefaultFormat: CFStringRef;
    pub static kCFDateFormatterTwoDigitStartDate: CFStringRef;
    pub static kCFDateFormatterDefaultDate: CFStringRef;
    pub static kCFDateFormatterCalendar: CFStringRef;
    pub static kCFDateFormatterEraSymbols: CFStringRef;
    pub static kCFDateFormatterMonthSymbols: CFStringRef;
    pub static kCFDateFormatterShortMonthSymbols: CFStringRef;
    pub static kCFDateFormatterWeekdaySymbols: CFStringRef;
    pub static kCFDateFormatterShortWeekdaySymbols: CFStringRef;
    pub static kCFDateFormatterAMSymbol: CFStringRef;
    pub static kCFDateFormatterPMSymbol: CFStringRef;
    pub static kCFDateFormatterLongEraSymbols: CFStringRef;
    pub static kCFDateFormatterVeryShortMonthSymbols: CFStringRef;
    pub static kCFDateFormatterStandaloneMonthSymbols: CFStringRef;
    pub static kCFDateFormatterShortStandaloneMonthSymbols: CFStringRef;
    pub static kCFDateFormatterVeryShortStandaloneMonthSymbols: CFStringRef;
    pub static kCFDateFormatterVeryShortWeekdaySymbols: CFStringRef;
    pub static kCFDateFormatterStandaloneWeekdaySymbols: CFStringRef;
    pub static kCFDateFormatterShortStandaloneWeekdaySymbols: CFStringRef;
    pub static kCFDateFormatterVeryShortStandaloneWeekdaySymbols: CFStringRef;
    pub static kCFDateFormatterQuarterSymbols: CFStringRef;
    pub static kCFDateFormatterShortQuarterSymbols: CFStringRef;
    pub static kCFDateFormatterStandaloneQuarterSymbols: CFStringRef;
    pub static kCFDateFormatterShortStandaloneQuarterSymbols: CFStringRef;
    pub static kCFDateFormatterGregorianStartDate: CFStringRef;
    pub static kCFDateFormatterDoesRelativeDateFormattingKey: CFStringRef;
    pub static kCFErrorDomainPOSIX: CFStringRef;
    pub static kCFErrorDomainOSStatus: CFStringRef;
    pub static kCFErrorDomainMach: CFStringRef;
    pub static kCFErrorDomainCocoa: CFStringRef;
    pub static kCFErrorLocalizedDescriptionKey: CFStringRef;
    pub static kCFErrorLocalizedFailureReasonKey: CFStringRef;
    pub static kCFErrorLocalizedRecoverySuggestionKey: CFStringRef;
    pub static kCFErrorDescriptionKey: CFStringRef;
    pub static kCFErrorUnderlyingErrorKey: CFStringRef;
    pub static kCFErrorURLKey: CFStringRef;
    pub static kCFErrorFilePathKey: CFStringRef;
    pub static kCFBooleanTrue: CFBooleanRef;
    pub static kCFBooleanFalse: CFBooleanRef;
    pub static kCFNumberPositiveInfinity: CFNumberRef;
    pub static kCFNumberNegativeInfinity: CFNumberRef;
    pub static kCFNumberNaN: CFNumberRef;
    pub static kCFNumberFormatterCurrencyCode: CFStringRef;
    pub static kCFNumberFormatterDecimalSeparator: CFStringRef;
    pub static kCFNumberFormatterCurrencyDecimalSeparator: CFStringRef;
    pub static kCFNumberFormatterAlwaysShowDecimalSeparator: CFStringRef;
    pub static kCFNumberFormatterGroupingSeparator: CFStringRef;
    pub static kCFNumberFormatterUseGroupingSeparator: CFStringRef;
    pub static kCFNumberFormatterPercentSymbol: CFStringRef;
    pub static kCFNumberFormatterZeroSymbol: CFStringRef;
    pub static kCFNumberFormatterNaNSymbol: CFStringRef;
    pub static kCFNumberFormatterInfinitySymbol: CFStringRef;
    pub static kCFNumberFormatterMinusSign: CFStringRef;
    pub static kCFNumberFormatterPlusSign: CFStringRef;
    pub static kCFNumberFormatterCurrencySymbol: CFStringRef;
    pub static kCFNumberFormatterExponentSymbol: CFStringRef;
    pub static kCFNumberFormatterMinIntegerDigits: CFStringRef;
    pub static kCFNumberFormatterMaxIntegerDigits: CFStringRef;
    pub static kCFNumberFormatterMinFractionDigits: CFStringRef;
    pub static kCFNumberFormatterMaxFractionDigits: CFStringRef;
    pub static kCFNumberFormatterGroupingSize: CFStringRef;
    pub static kCFNumberFormatterSecondaryGroupingSize: CFStringRef;
    pub static kCFNumberFormatterRoundingMode: CFStringRef;
    pub static kCFNumberFormatterRoundingIncrement: CFStringRef;
    pub static kCFNumberFormatterFormatWidth: CFStringRef;
    pub static kCFNumberFormatterPaddingPosition: CFStringRef;
    pub static kCFNumberFormatterPaddingCharacter: CFStringRef;
    pub static kCFNumberFormatterDefaultFormat: CFStringRef;
    pub static kCFNumberFormatterMultiplier: CFStringRef;
    pub static kCFNumberFormatterPositivePrefix: CFStringRef;
    pub static kCFNumberFormatterPositiveSuffix: CFStringRef;
    pub static kCFNumberFormatterNegativePrefix: CFStringRef;
    pub static kCFNumberFormatterNegativeSuffix: CFStringRef;
    pub static kCFNumberFormatterPerMillSymbol: CFStringRef;
    pub static kCFNumberFormatterInternationalCurrencySymbol: CFStringRef;
    pub static kCFNumberFormatterCurrencyGroupingSeparator: CFStringRef;
    pub static kCFNumberFormatterIsLenient: CFStringRef;
    pub static kCFNumberFormatterUseSignificantDigits: CFStringRef;
    pub static kCFNumberFormatterMinSignificantDigits: CFStringRef;
    pub static kCFNumberFormatterMaxSignificantDigits: CFStringRef;
    pub static kCFPreferencesAnyApplication: CFStringRef;
    pub static kCFPreferencesCurrentApplication: CFStringRef;
    pub static kCFPreferencesAnyHost: CFStringRef;
    pub static kCFPreferencesCurrentHost: CFStringRef;
    pub static kCFPreferencesAnyUser: CFStringRef;
    pub static kCFPreferencesCurrentUser: CFStringRef;
    pub static kCFURLKeysOfUnsetValuesKey: CFStringRef;
    pub static kCFURLNameKey: CFStringRef;
    pub static kCFURLLocalizedNameKey: CFStringRef;
    pub static kCFURLIsRegularFileKey: CFStringRef;
    pub static kCFURLIsDirectoryKey: CFStringRef;
    pub static kCFURLIsSymbolicLinkKey: CFStringRef;
    pub static kCFURLIsVolumeKey: CFStringRef;
    pub static kCFURLIsPackageKey: CFStringRef;
    pub static kCFURLIsSystemImmutableKey: CFStringRef;
    pub static kCFURLIsUserImmutableKey: CFStringRef;
    pub static kCFURLIsHiddenKey: CFStringRef;
    pub static kCFURLHasHiddenExtensionKey: CFStringRef;
    pub static kCFURLCreationDateKey: CFStringRef;
    pub static kCFURLContentAccessDateKey: CFStringRef;
    pub static kCFURLContentModificationDateKey: CFStringRef;
    pub static kCFURLAttributeModificationDateKey: CFStringRef;
    pub static kCFURLLinkCountKey: CFStringRef;
    pub static kCFURLParentDirectoryURLKey: CFStringRef;
    pub static kCFURLVolumeURLKey: CFStringRef;
    pub static kCFURLTypeIdentifierKey: CFStringRef;
    pub static kCFURLLocalizedTypeDescriptionKey: CFStringRef;
    pub static kCFURLLabelNumberKey: CFStringRef;
    pub static kCFURLLabelColorKey: CFStringRef;
    pub static kCFURLLocalizedLabelKey: CFStringRef;
    pub static kCFURLEffectiveIconKey: CFStringRef;
    pub static kCFURLCustomIconKey: CFStringRef;
    pub static kCFURLFileResourceIdentifierKey: CFStringRef;
    pub static kCFURLVolumeIdentifierKey: CFStringRef;
    pub static kCFURLPreferredIOBlockSizeKey: CFStringRef;
    pub static kCFURLIsReadableKey: CFStringRef;
    pub static kCFURLIsWritableKey: CFStringRef;
    pub static kCFURLIsExecutableKey: CFStringRef;
    pub static kCFURLFileSecurityKey: CFStringRef;
    pub static kCFURLIsExcludedFromBackupKey: CFStringRef;
    pub static kCFURLTagNamesKey: CFStringRef;
    pub static kCFURLPathKey: CFStringRef;
    pub static kCFURLIsMountTriggerKey: CFStringRef;
    pub static kCFURLGenerationIdentifierKey: CFStringRef;
    pub static kCFURLDocumentIdentifierKey: CFStringRef;
    pub static kCFURLAddedToDirectoryDateKey: CFStringRef;
    pub static kCFURLQuarantinePropertiesKey: CFStringRef;
    pub static kCFURLFileResourceTypeKey: CFStringRef;
    pub static kCFURLFileResourceTypeNamedPipe: CFStringRef;
    pub static kCFURLFileResourceTypeCharacterSpecial: CFStringRef;
    pub static kCFURLFileResourceTypeDirectory: CFStringRef;
    pub static kCFURLFileResourceTypeBlockSpecial: CFStringRef;
    pub static kCFURLFileResourceTypeRegular: CFStringRef;
    pub static kCFURLFileResourceTypeSymbolicLink: CFStringRef;
    pub static kCFURLFileResourceTypeSocket: CFStringRef;
    pub static kCFURLFileResourceTypeUnknown: CFStringRef;
    pub static kCFURLFileSizeKey: CFStringRef;
    pub static kCFURLFileAllocatedSizeKey: CFStringRef;
    pub static kCFURLTotalFileSizeKey: CFStringRef;
    pub static kCFURLTotalFileAllocatedSizeKey: CFStringRef;
    pub static kCFURLIsAliasFileKey: CFStringRef;
    pub static kCFURLVolumeLocalizedFormatDescriptionKey: CFStringRef;
    pub static kCFURLVolumeTotalCapacityKey: CFStringRef;
    pub static kCFURLVolumeAvailableCapacityKey: CFStringRef;
    pub static kCFURLVolumeResourceCountKey: CFStringRef;
    pub static kCFURLVolumeSupportsPersistentIDsKey: CFStringRef;
    pub static kCFURLVolumeSupportsSymbolicLinksKey: CFStringRef;
    pub static kCFURLVolumeSupportsHardLinksKey: CFStringRef;
    pub static kCFURLVolumeSupportsJournalingKey: CFStringRef;
    pub static kCFURLVolumeIsJournalingKey: CFStringRef;
    pub static kCFURLVolumeSupportsSparseFilesKey: CFStringRef;
    pub static kCFURLVolumeSupportsZeroRunsKey: CFStringRef;
    pub static kCFURLVolumeSupportsCaseSensitiveNamesKey: CFStringRef;
    pub static kCFURLVolumeSupportsCasePreservedNamesKey: CFStringRef;
    pub static kCFURLVolumeSupportsRootDirectoryDatesKey: CFStringRef;
    pub static kCFURLVolumeSupportsVolumeSizesKey: CFStringRef;
    pub static kCFURLVolumeSupportsRenamingKey: CFStringRef;
    pub static kCFURLVolumeSupportsAdvisoryFileLockingKey: CFStringRef;
    pub static kCFURLVolumeSupportsExtendedSecurityKey: CFStringRef;
    pub static kCFURLVolumeIsBrowsableKey: CFStringRef;
    pub static kCFURLVolumeMaximumFileSizeKey: CFStringRef;
    pub static kCFURLVolumeIsEjectableKey: CFStringRef;
    pub static kCFURLVolumeIsRemovableKey: CFStringRef;
    pub static kCFURLVolumeIsInternalKey: CFStringRef;
    pub static kCFURLVolumeIsAutomountedKey: CFStringRef;
    pub static kCFURLVolumeIsLocalKey: CFStringRef;
    pub static kCFURLVolumeIsReadOnlyKey: CFStringRef;
    pub static kCFURLVolumeCreationDateKey: CFStringRef;
    pub static kCFURLVolumeURLForRemountingKey: CFStringRef;
    pub static kCFURLVolumeUUIDStringKey: CFStringRef;
    pub static kCFURLVolumeNameKey: CFStringRef;
    pub static kCFURLVolumeLocalizedNameKey: CFStringRef;
    pub static kCFURLIsUbiquitousItemKey: CFStringRef;
    pub static kCFURLUbiquitousItemHasUnresolvedConflictsKey: CFStringRef;
    pub static kCFURLUbiquitousItemIsDownloadedKey: CFStringRef;
    pub static kCFURLUbiquitousItemIsDownloadingKey: CFStringRef;
    pub static kCFURLUbiquitousItemIsUploadedKey: CFStringRef;
    pub static kCFURLUbiquitousItemIsUploadingKey: CFStringRef;
    pub static kCFURLUbiquitousItemPercentDownloadedKey: CFStringRef;
    pub static kCFURLUbiquitousItemPercentUploadedKey: CFStringRef;
    pub static kCFURLUbiquitousItemDownloadingStatusKey: CFStringRef;
    pub static kCFURLUbiquitousItemDownloadingErrorKey: CFStringRef;
    pub static kCFURLUbiquitousItemUploadingErrorKey: CFStringRef;
    pub static kCFURLUbiquitousItemDownloadingStatusNotDownloaded:
               CFStringRef;
    pub static kCFURLUbiquitousItemDownloadingStatusDownloaded: CFStringRef;
    pub static kCFURLUbiquitousItemDownloadingStatusCurrent: CFStringRef;
    pub static kCFRunLoopDefaultMode: CFStringRef;
    pub static kCFRunLoopCommonModes: CFStringRef;
    pub static kCFSocketCommandKey: CFStringRef;
    pub static kCFSocketNameKey: CFStringRef;
    pub static kCFSocketValueKey: CFStringRef;
    pub static kCFSocketResultKey: CFStringRef;
    pub static kCFSocketErrorKey: CFStringRef;
    pub static kCFSocketRegisterCommand: CFStringRef;
    pub static kCFSocketRetrieveCommand: CFStringRef;
    pub static mut optarg: *mut ::libc::c_char;
    pub static mut optind: ::libc::c_int;
    pub static mut opterr: ::libc::c_int;
    pub static mut optopt: ::libc::c_int;
    pub static mut optreset: ::libc::c_int;
    pub static mut _dispatch_main_q: Struct_dispatch_queue_s;
    pub static mut _dispatch_queue_attr_concurrent:
               Struct_dispatch_queue_attr_s;
    pub static mut KERNEL_SECURITY_TOKEN: security_token_t;
    pub static mut KERNEL_AUDIT_TOKEN: audit_token_t;
    pub static _dispatch_source_type_data_add: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_data_or: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_mach_send: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_mach_recv: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_memorypressure:
               Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_proc: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_read: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_signal: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_timer: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_vnode: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_write: Struct_dispatch_source_type_s;
    pub static mut _dispatch_data_empty: Struct_dispatch_data_s;
    pub static _dispatch_data_destructor_free: dispatch_block_t;
    pub static _dispatch_data_destructor_munmap: dispatch_block_t;
    pub static kCFStreamPropertyDataWritten: CFStringRef;
    pub static kCFStreamPropertyAppendToFile: CFStringRef;
    pub static kCFStreamPropertyFileCurrentOffset: CFStringRef;
    pub static kCFStreamPropertySocketNativeHandle: CFStringRef;
    pub static kCFStreamPropertySocketRemoteHostName: CFStringRef;
    pub static kCFStreamPropertySocketRemotePortNumber: CFStringRef;
    pub static kCFTypeSetCallBacks: CFSetCallBacks;
    pub static kCFCopyStringSetCallBacks: CFSetCallBacks;
    pub static kCFURLFileExists: CFStringRef;
    pub static kCFURLFileDirectoryContents: CFStringRef;
    pub static kCFURLFileLength: CFStringRef;
    pub static kCFURLFileLastModificationTime: CFStringRef;
    pub static kCFURLFilePOSIXMode: CFStringRef;
    pub static kCFURLFileOwnerID: CFStringRef;
    pub static kCFURLHTTPStatusCode: CFStringRef;
    pub static kCFURLHTTPStatusLine: CFStringRef;
    pub static kCFBundleInfoDictionaryVersionKey: CFStringRef;
    pub static kCFBundleExecutableKey: CFStringRef;
    pub static kCFBundleIdentifierKey: CFStringRef;
    pub static kCFBundleVersionKey: CFStringRef;
    pub static kCFBundleDevelopmentRegionKey: CFStringRef;
    pub static kCFBundleNameKey: CFStringRef;
    pub static kCFBundleLocalizationsKey: CFStringRef;
    pub static kCFPlugInDynamicRegistrationKey: CFStringRef;
    pub static kCFPlugInDynamicRegisterFunctionKey: CFStringRef;
    pub static kCFPlugInUnloadFunctionKey: CFStringRef;
    pub static kCFPlugInFactoriesKey: CFStringRef;
    pub static kCFPlugInTypesKey: CFStringRef;
    pub static kCFUserNotificationIconURLKey: CFStringRef;
    pub static kCFUserNotificationSoundURLKey: CFStringRef;
    pub static kCFUserNotificationLocalizationURLKey: CFStringRef;
    pub static kCFUserNotificationAlertHeaderKey: CFStringRef;
    pub static kCFUserNotificationAlertMessageKey: CFStringRef;
    pub static kCFUserNotificationDefaultButtonTitleKey: CFStringRef;
    pub static kCFUserNotificationAlternateButtonTitleKey: CFStringRef;
    pub static kCFUserNotificationOtherButtonTitleKey: CFStringRef;
    pub static kCFUserNotificationProgressIndicatorValueKey: CFStringRef;
    pub static kCFUserNotificationPopUpTitlesKey: CFStringRef;
    pub static kCFUserNotificationTextFieldTitlesKey: CFStringRef;
    pub static kCFUserNotificationCheckBoxTitlesKey: CFStringRef;
    pub static kCFUserNotificationTextFieldValuesKey: CFStringRef;
    pub static kCFUserNotificationPopUpSelectionKey: CFStringRef;
    pub static kCFXMLTreeErrorDescription: CFStringRef;
    pub static kCFXMLTreeErrorLineNumber: CFStringRef;
    pub static kCFXMLTreeErrorLocation: CFStringRef;
    pub static kCFXMLTreeErrorStatusCode: CFStringRef;
    pub static kMIDIPropertyName: CFStringRef;
    pub static kMIDIPropertyManufacturer: CFStringRef;
    pub static kMIDIPropertyModel: CFStringRef;
    pub static kMIDIPropertyUniqueID: CFStringRef;
    pub static kMIDIPropertyDeviceID: CFStringRef;
    pub static kMIDIPropertyReceiveChannels: CFStringRef;
    pub static kMIDIPropertyTransmitChannels: CFStringRef;
    pub static kMIDIPropertyMaxSysExSpeed: CFStringRef;
    pub static kMIDIPropertyAdvanceScheduleTimeMuSec: CFStringRef;
    pub static kMIDIPropertyIsEmbeddedEntity: CFStringRef;
    pub static kMIDIPropertyIsBroadcast: CFStringRef;
    pub static kMIDIPropertySingleRealtimeEntity: CFStringRef;
    pub static kMIDIPropertyConnectionUniqueID: CFStringRef;
    pub static kMIDIPropertyOffline: CFStringRef;
    pub static kMIDIPropertyPrivate: CFStringRef;
    pub static kMIDIPropertyDriverOwner: CFStringRef;
    pub static kMIDIPropertyFactoryPatchNameFile: CFStringRef;
    pub static kMIDIPropertyUserPatchNameFile: CFStringRef;
    pub static kMIDIPropertyNameConfiguration: CFStringRef;
    pub static kMIDIPropertyImage: CFStringRef;
    pub static kMIDIPropertyDriverVersion: CFStringRef;
    pub static kMIDIPropertySupportsGeneralMIDI: CFStringRef;
    pub static kMIDIPropertySupportsMMC: CFStringRef;
    pub static kMIDIPropertyCanRoute: CFStringRef;
    pub static kMIDIPropertyReceivesClock: CFStringRef;
    pub static kMIDIPropertyReceivesMTC: CFStringRef;
    pub static kMIDIPropertyReceivesNotes: CFStringRef;
    pub static kMIDIPropertyReceivesProgramChanges: CFStringRef;
    pub static kMIDIPropertyReceivesBankSelectMSB: CFStringRef;
    pub static kMIDIPropertyReceivesBankSelectLSB: CFStringRef;
    pub static kMIDIPropertyTransmitsClock: CFStringRef;
    pub static kMIDIPropertyTransmitsMTC: CFStringRef;
    pub static kMIDIPropertyTransmitsNotes: CFStringRef;
    pub static kMIDIPropertyTransmitsProgramChanges: CFStringRef;
    pub static kMIDIPropertyTransmitsBankSelectMSB: CFStringRef;
    pub static kMIDIPropertyTransmitsBankSelectLSB: CFStringRef;
    pub static kMIDIPropertyPanDisruptsStereo: CFStringRef;
    pub static kMIDIPropertyIsSampler: CFStringRef;
    pub static kMIDIPropertyIsDrumMachine: CFStringRef;
    pub static kMIDIPropertyIsMixer: CFStringRef;
    pub static kMIDIPropertyIsEffectUnit: CFStringRef;
    pub static kMIDIPropertyMaxReceiveChannels: CFStringRef;
    pub static kMIDIPropertyMaxTransmitChannels: CFStringRef;
    pub static kMIDIPropertyDriverDeviceEditorApp: CFStringRef;
    pub static kMIDIPropertySupportsShowControl: CFStringRef;
    pub static kMIDIPropertyDisplayName: CFStringRef;
}
#[link(name = "AudioUnit", kind = "framework")]
#[link(name = "AudioToolbox", kind = "framework")]
#[link(name = "CoreServices", kind = "framework")]
extern "C" {
    pub fn _Block_copy(aBlock: *const ::libc::c_void) -> *mut ::libc::c_void;
    pub fn _Block_release(aBlock: *const ::libc::c_void) -> ();
    pub fn _Block_object_assign(arg1: *mut ::libc::c_void,
                                arg2: *const ::libc::c_void,
                                arg3: ::libc::c_int) -> ();
    pub fn _Block_object_dispose(arg1: *const ::libc::c_void,
                                 arg2: ::libc::c_int) -> ();
    pub fn Debugger() -> ();
    pub fn DebugStr(debuggerMsg: ConstStr255Param) -> ();
    pub fn SysBreak() -> ();
    pub fn SysBreakStr(debuggerMsg: ConstStr255Param) -> ();
    pub fn SysBreakFunc(debuggerMsg: ConstStr255Param) -> ();
    pub fn __CFRangeMake(loc: CFIndex, len: CFIndex) -> CFRange;
    pub fn CFNullGetTypeID() -> CFTypeID;
    pub fn CFAllocatorGetTypeID() -> CFTypeID;
    pub fn CFAllocatorSetDefault(allocator: CFAllocatorRef) -> ();
    pub fn CFAllocatorGetDefault() -> CFAllocatorRef;
    pub fn CFAllocatorCreate(allocator: CFAllocatorRef,
                             context: *mut CFAllocatorContext)
     -> CFAllocatorRef;
    pub fn CFAllocatorAllocate(allocator: CFAllocatorRef, size: CFIndex,
                               hint: CFOptionFlags) -> *mut ::libc::c_void;
    pub fn CFAllocatorReallocate(allocator: CFAllocatorRef,
                                 ptr: *mut ::libc::c_void, newsize: CFIndex,
                                 hint: CFOptionFlags) -> *mut ::libc::c_void;
    pub fn CFAllocatorDeallocate(allocator: CFAllocatorRef,
                                 ptr: *mut ::libc::c_void) -> ();
    pub fn CFAllocatorGetPreferredSizeForSize(allocator: CFAllocatorRef,
                                              size: CFIndex,
                                              hint: CFOptionFlags) -> CFIndex;
    pub fn CFAllocatorGetContext(allocator: CFAllocatorRef,
                                 context: *mut CFAllocatorContext) -> ();
    pub fn CFGetTypeID(cf: CFTypeRef) -> CFTypeID;
    pub fn CFCopyTypeIDDescription(type_id: CFTypeID) -> CFStringRef;
    pub fn CFRetain(cf: CFTypeRef) -> CFTypeRef;
    pub fn CFRelease(cf: CFTypeRef) -> ();
    pub fn CFAutorelease(arg: CFTypeRef) -> CFTypeRef;
    pub fn CFGetRetainCount(cf: CFTypeRef) -> CFIndex;
    pub fn CFEqual(cf1: CFTypeRef, cf2: CFTypeRef) -> Boolean;
    pub fn CFHash(cf: CFTypeRef) -> CFHashCode;
    pub fn CFCopyDescription(cf: CFTypeRef) -> CFStringRef;
    pub fn CFGetAllocator(cf: CFTypeRef) -> CFAllocatorRef;
    pub fn CFMakeCollectable(cf: CFTypeRef) -> CFTypeRef;
    pub fn __assert_rtn(arg1: *const ::libc::c_char,
                        arg2: *const ::libc::c_char, arg3: ::libc::c_int,
                        arg4: *const ::libc::c_char) -> ();
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::libc::c_ulong;
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    pub fn isascii(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn __maskrune(arg1: __darwin_ct_rune_t, arg2: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn __istype(_c: __darwin_ct_rune_t, _f: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn __isctype(_c: __darwin_ct_rune_t, _f: ::libc::c_ulong)
     -> __darwin_ct_rune_t;
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    pub fn __wcwidth(_c: __darwin_ct_rune_t) -> ::libc::c_int;
    pub fn isalnum(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isalpha(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isblank(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn iscntrl(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isdigit(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isgraph(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn islower(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isprint(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn ispunct(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isspace(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isupper(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isxdigit(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn toascii(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn tolower(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn toupper(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn digittoint(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn ishexnumber(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isideogram(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isnumber(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isphonogram(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isrune(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isspecial(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn __error() -> *mut ::libc::c_int;
    pub fn localeconv() -> *mut Struct_lconv;
    pub fn setlocale(arg1: ::libc::c_int, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __math_errhandling() -> ::libc::c_int;
    pub fn __fpclassifyf(arg1: ::libc::c_float) -> ::libc::c_int;
    pub fn __fpclassifyd(arg1: ::libc::c_double) -> ::libc::c_int;
    pub fn __fpclassifyl(arg1: ::libc::c_double) -> ::libc::c_int;
    pub fn __inline_isfinitef(__x: ::libc::c_float) -> ::libc::c_int;
    pub fn __inline_isfinited(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn __inline_isfinitel(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn __inline_isinff(__x: ::libc::c_float) -> ::libc::c_int;
    pub fn __inline_isinfd(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn __inline_isinfl(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn __inline_isnanf(__x: ::libc::c_float) -> ::libc::c_int;
    pub fn __inline_isnand(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn __inline_isnanl(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn __inline_isnormalf(__x: ::libc::c_float) -> ::libc::c_int;
    pub fn __inline_isnormald(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn __inline_isnormall(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn __inline_signbitf(__x: ::libc::c_float) -> ::libc::c_int;
    pub fn __inline_signbitd(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn __inline_signbitl(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn acosf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn acos(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn acosl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn asinf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn asin(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn asinl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn atanf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn atan(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn atanl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn atan2f(arg1: ::libc::c_float, arg2: ::libc::c_float)
     -> ::libc::c_float;
    pub fn atan2(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn atan2l(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn cosf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn cos(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn cosl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn sinf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn sin(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn sinl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn tanf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn tan(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn tanl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn acoshf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn acosh(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn acoshl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn asinhf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn asinh(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn asinhl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn atanhf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn atanh(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn atanhl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn coshf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn cosh(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn coshl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn sinhf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn sinh(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn sinhl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn tanhf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn tanh(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn tanhl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn expf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn exp(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn expl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn exp2f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn exp2(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn exp2l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn expm1f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn expm1(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn expm1l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn logf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn log(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn logl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn log10f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn log10(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn log10l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn log2f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn log2(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn log2l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn log1pf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn log1p(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn log1pl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn logbf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn logb(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn logbl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn modff(arg1: ::libc::c_float, arg2: *mut ::libc::c_float)
     -> ::libc::c_float;
    pub fn modf(arg1: ::libc::c_double, arg2: *mut ::libc::c_double)
     -> ::libc::c_double;
    pub fn modfl(arg1: ::libc::c_double, arg2: *mut ::libc::c_double)
     -> ::libc::c_double;
    pub fn ldexpf(arg1: ::libc::c_float, arg2: ::libc::c_int)
     -> ::libc::c_float;
    pub fn ldexp(arg1: ::libc::c_double, arg2: ::libc::c_int)
     -> ::libc::c_double;
    pub fn ldexpl(arg1: ::libc::c_double, arg2: ::libc::c_int)
     -> ::libc::c_double;
    pub fn frexpf(arg1: ::libc::c_float, arg2: *mut ::libc::c_int)
     -> ::libc::c_float;
    pub fn frexp(arg1: ::libc::c_double, arg2: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn frexpl(arg1: ::libc::c_double, arg2: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn ilogbf(arg1: ::libc::c_float) -> ::libc::c_int;
    pub fn ilogb(arg1: ::libc::c_double) -> ::libc::c_int;
    pub fn ilogbl(arg1: ::libc::c_double) -> ::libc::c_int;
    pub fn scalbnf(arg1: ::libc::c_float, arg2: ::libc::c_int)
     -> ::libc::c_float;
    pub fn scalbn(arg1: ::libc::c_double, arg2: ::libc::c_int)
     -> ::libc::c_double;
    pub fn scalbnl(arg1: ::libc::c_double, arg2: ::libc::c_int)
     -> ::libc::c_double;
    pub fn scalblnf(arg1: ::libc::c_float, arg2: ::libc::c_long)
     -> ::libc::c_float;
    pub fn scalbln(arg1: ::libc::c_double, arg2: ::libc::c_long)
     -> ::libc::c_double;
    pub fn scalblnl(arg1: ::libc::c_double, arg2: ::libc::c_long)
     -> ::libc::c_double;
    pub fn fabsf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn fabs(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn fabsl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn cbrtf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn cbrt(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn cbrtl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn hypotf(arg1: ::libc::c_float, arg2: ::libc::c_float)
     -> ::libc::c_float;
    pub fn hypot(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn hypotl(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn powf(arg1: ::libc::c_float, arg2: ::libc::c_float)
     -> ::libc::c_float;
    pub fn pow(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn powl(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn sqrtf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn sqrt(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn sqrtl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn erff(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn erf(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn erfl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn erfcf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn erfc(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn erfcl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn lgammaf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn lgamma(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn lgammal(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn tgammaf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn tgamma(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn tgammal(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn ceilf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn ceil(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn ceill(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn floorf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn floor(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn floorl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn nearbyintf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn nearbyint(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn nearbyintl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn rintf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn rint(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn rintl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn lrintf(arg1: ::libc::c_float) -> ::libc::c_long;
    pub fn lrint(arg1: ::libc::c_double) -> ::libc::c_long;
    pub fn lrintl(arg1: ::libc::c_double) -> ::libc::c_long;
    pub fn roundf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn round(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn roundl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn lroundf(arg1: ::libc::c_float) -> ::libc::c_long;
    pub fn lround(arg1: ::libc::c_double) -> ::libc::c_long;
    pub fn lroundl(arg1: ::libc::c_double) -> ::libc::c_long;
    pub fn llrintf(arg1: ::libc::c_float) -> ::libc::c_longlong;
    pub fn llrint(arg1: ::libc::c_double) -> ::libc::c_longlong;
    pub fn llrintl(arg1: ::libc::c_double) -> ::libc::c_longlong;
    pub fn llroundf(arg1: ::libc::c_float) -> ::libc::c_longlong;
    pub fn llround(arg1: ::libc::c_double) -> ::libc::c_longlong;
    pub fn llroundl(arg1: ::libc::c_double) -> ::libc::c_longlong;
    pub fn truncf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn trunc(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn truncl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn fmodf(arg1: ::libc::c_float, arg2: ::libc::c_float)
     -> ::libc::c_float;
    pub fn fmod(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn fmodl(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn remainderf(arg1: ::libc::c_float, arg2: ::libc::c_float)
     -> ::libc::c_float;
    pub fn remainder(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn remainderl(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn remquof(arg1: ::libc::c_float, arg2: ::libc::c_float,
                   arg3: *mut ::libc::c_int) -> ::libc::c_float;
    pub fn remquo(arg1: ::libc::c_double, arg2: ::libc::c_double,
                  arg3: *mut ::libc::c_int) -> ::libc::c_double;
    pub fn remquol(arg1: ::libc::c_double, arg2: ::libc::c_double,
                   arg3: *mut ::libc::c_int) -> ::libc::c_double;
    pub fn copysignf(arg1: ::libc::c_float, arg2: ::libc::c_float)
     -> ::libc::c_float;
    pub fn copysign(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn copysignl(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn nanf(arg1: *const ::libc::c_char) -> ::libc::c_float;
    pub fn nan(arg1: *const ::libc::c_char) -> ::libc::c_double;
    pub fn nanl(arg1: *const ::libc::c_char) -> ::libc::c_double;
    pub fn nextafterf(arg1: ::libc::c_float, arg2: ::libc::c_float)
     -> ::libc::c_float;
    pub fn nextafter(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn nextafterl(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn nexttoward(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn nexttowardf(arg1: ::libc::c_float, arg2: ::libc::c_double)
     -> ::libc::c_float;
    pub fn nexttowardl(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn fdimf(arg1: ::libc::c_float, arg2: ::libc::c_float)
     -> ::libc::c_float;
    pub fn fdim(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn fdiml(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn fmaxf(arg1: ::libc::c_float, arg2: ::libc::c_float)
     -> ::libc::c_float;
    pub fn fmax(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn fmaxl(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn fminf(arg1: ::libc::c_float, arg2: ::libc::c_float)
     -> ::libc::c_float;
    pub fn fmin(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn fminl(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn fmaf(arg1: ::libc::c_float, arg2: ::libc::c_float,
                arg3: ::libc::c_float) -> ::libc::c_float;
    pub fn fma(arg1: ::libc::c_double, arg2: ::libc::c_double,
               arg3: ::libc::c_double) -> ::libc::c_double;
    pub fn fmal(arg1: ::libc::c_double, arg2: ::libc::c_double,
                arg3: ::libc::c_double) -> ::libc::c_double;
    pub fn __inff() -> ::libc::c_float;
    pub fn __inf() -> ::libc::c_double;
    pub fn __infl() -> ::libc::c_double;
    pub fn __nan() -> ::libc::c_float;
    pub fn __exp10f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __exp10(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __sincosf(__x: ::libc::c_float, __sinp: *mut ::libc::c_float,
                     __cosp: *mut ::libc::c_float) -> ();
    pub fn __sincos(__x: ::libc::c_double, __sinp: *mut ::libc::c_double,
                    __cosp: *mut ::libc::c_double) -> ();
    pub fn __cospif(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __cospi(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __sinpif(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __sinpi(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __tanpif(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __tanpi(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __sincospif(__x: ::libc::c_float, __sinp: *mut ::libc::c_float,
                       __cosp: *mut ::libc::c_float) -> ();
    pub fn __sincospi(__x: ::libc::c_double, __sinp: *mut ::libc::c_double,
                      __cosp: *mut ::libc::c_double) -> ();
    pub fn __sincosf_stret(arg1: ::libc::c_float) -> Struct___float2;
    pub fn __sincos_stret(arg1: ::libc::c_double) -> Struct___double2;
    pub fn __sincospif_stret(arg1: ::libc::c_float) -> Struct___float2;
    pub fn __sincospi_stret(arg1: ::libc::c_double) -> Struct___double2;
    pub fn j0(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn j1(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn jn(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn y0(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn y1(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn yn(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn scalb(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn rinttol(arg1: ::libc::c_double) -> ::libc::c_long;
    pub fn roundtol(arg1: ::libc::c_double) -> ::libc::c_long;
    pub fn drem(arg1: ::libc::c_double, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn finite(arg1: ::libc::c_double) -> ::libc::c_int;
    pub fn gamma(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn significand(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn matherr(arg1: *mut Struct_exception) -> ::libc::c_int;
    pub fn setjmp(arg1: jmp_buf) -> ::libc::c_int;
    pub fn longjmp(arg1: jmp_buf, arg2: ::libc::c_int) -> ();
    pub fn _setjmp(arg1: jmp_buf) -> ::libc::c_int;
    pub fn _longjmp(arg1: jmp_buf, arg2: ::libc::c_int) -> ();
    pub fn sigsetjmp(arg1: sigjmp_buf, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn siglongjmp(arg1: sigjmp_buf, arg2: ::libc::c_int) -> ();
    pub fn longjmperror() -> ();
    pub fn signal(arg1: ::libc::c_int,
                  arg2:
                      ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)
                                                -> ()>)
     ->
         ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                             arg2:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         ::libc::c_int)
                                                                           ->
                                                                               ()>)
                                   -> ()>;
    pub fn raise(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn bsd_signal(arg1: ::libc::c_int,
                      arg2:
                          ::std::option::Option<extern "C" fn(arg1:
                                                                  ::libc::c_int)
                                                    -> ()>)
     ->
         ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                             arg2:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         ::libc::c_int)
                                                                           ->
                                                                               ()>)
                                   -> ()>;
    pub fn kill(arg1: pid_t, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn killpg(arg1: pid_t, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_kill(arg1: pthread_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_sigmask(arg1: ::libc::c_int, arg2: *const sigset_t,
                           arg3: *mut sigset_t) -> ::libc::c_int;
    pub fn sigaction(arg1: ::libc::c_int, arg2: *const Struct_sigaction,
                     arg3: *mut Struct_sigaction) -> ::libc::c_int;
    pub fn sigaddset(arg1: *mut sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t)
     -> ::libc::c_int;
    pub fn sigdelset(arg1: *mut sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigemptyset(arg1: *mut sigset_t) -> ::libc::c_int;
    pub fn sigfillset(arg1: *mut sigset_t) -> ::libc::c_int;
    pub fn sighold(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn sigignore(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn siginterrupt(arg1: ::libc::c_int, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigismember(arg1: *const sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigpause(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn sigpending(arg1: *mut sigset_t) -> ::libc::c_int;
    pub fn sigprocmask(arg1: ::libc::c_int, arg2: *const sigset_t,
                       arg3: *mut sigset_t) -> ::libc::c_int;
    pub fn sigrelse(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn sigset(arg1: ::libc::c_int,
                  arg2:
                      ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)
                                                -> ()>)
     ->
         ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                             arg2:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         ::libc::c_int)
                                                                           ->
                                                                               ()>)
                                   -> ()>;
    pub fn sigsuspend(arg1: *const sigset_t) -> ::libc::c_int;
    pub fn sigwait(arg1: *const sigset_t, arg2: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn psignal(arg1: ::libc::c_uint, arg2: *const ::libc::c_char) -> ();
    pub fn sigblock(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn sigsetmask(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn sigvec(arg1: ::libc::c_int, arg2: *mut Struct_sigvec,
                  arg3: *mut Struct_sigvec) -> ::libc::c_int;
    pub fn __sigbits(__signo: ::libc::c_int) -> ::libc::c_int;
    pub fn renameat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                    arg3: ::libc::c_int, arg4: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn clearerr(arg1: *mut FILE) -> ();
    pub fn fclose(arg1: *mut FILE) -> ::libc::c_int;
    pub fn feof(arg1: *mut FILE) -> ::libc::c_int;
    pub fn ferror(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fflush(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fgetc(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::libc::c_int;
    pub fn fgets(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                 arg3: *mut FILE) -> *mut ::libc::c_char;
    pub fn fopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fputc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn fputs(arg1: *const ::libc::c_char, arg2: *mut FILE)
     -> ::libc::c_int;
    pub fn fread(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                 arg4: *mut FILE) -> size_t;
    pub fn freopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: *mut FILE) -> *mut FILE;
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fseek(arg1: *mut FILE, arg2: ::libc::c_long, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::libc::c_int;
    pub fn ftell(arg1: *mut FILE) -> ::libc::c_long;
    pub fn fwrite(arg1: *const ::libc::c_void, arg2: size_t, arg3: size_t,
                  arg4: *mut FILE) -> size_t;
    pub fn getc(arg1: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn gets(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn perror(arg1: *const ::libc::c_char) -> ();
    pub fn printf(arg1: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn putc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn putchar(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn puts(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn remove(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rewind(arg1: *mut FILE) -> ();
    pub fn scanf(arg1: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::libc::c_char) -> ();
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut ::libc::c_char,
                   arg3: ::libc::c_int, arg4: size_t) -> ::libc::c_int;
    pub fn sprintf(arg1: *mut ::libc::c_char,
                   arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(arg1: *const ::libc::c_char,
                  arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn ungetc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn vfprintf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                    arg3: va_list) -> ::libc::c_int;
    pub fn vprintf(arg1: *const ::libc::c_char, arg2: va_list)
     -> ::libc::c_int;
    pub fn vsprintf(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: va_list) -> ::libc::c_int;
    pub fn ctermid(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn fdopen(arg1: ::libc::c_int, arg2: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fileno(arg1: *mut FILE) -> ::libc::c_int;
    pub fn pclose(arg1: *mut FILE) -> ::libc::c_int;
    pub fn popen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut FILE;
    pub fn __srget(arg1: *mut FILE) -> ::libc::c_int;
    pub fn __svfscanf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                      arg3: va_list) -> ::libc::c_int;
    pub fn __swbuf(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn __sputc(_c: ::libc::c_int, _p: *mut FILE) -> ::libc::c_int;
    pub fn flockfile(arg1: *mut FILE) -> ();
    pub fn ftrylockfile(arg1: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(arg1: *mut FILE) -> ();
    pub fn getc_unlocked(arg1: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn putc_unlocked(arg1: ::libc::c_int, arg2: *mut FILE)
     -> ::libc::c_int;
    pub fn putchar_unlocked(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(arg1: *mut FILE) -> ::libc::c_int;
    pub fn putw(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn tempnam(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn fseeko(arg1: *mut FILE, arg2: off_t, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn ftello(arg1: *mut FILE) -> off_t;
    pub fn snprintf(arg1: *mut ::libc::c_char, arg2: size_t,
                    arg3: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfscanf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                   arg3: va_list) -> ::libc::c_int;
    pub fn vscanf(arg1: *const ::libc::c_char, arg2: va_list)
     -> ::libc::c_int;
    pub fn vsnprintf(arg1: *mut ::libc::c_char, arg2: size_t,
                     arg3: *const ::libc::c_char, arg4: va_list)
     -> ::libc::c_int;
    pub fn vsscanf(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: va_list) -> ::libc::c_int;
    pub fn dprintf(arg1: ::libc::c_int, arg2: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn vdprintf(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                    arg3: va_list) -> ::libc::c_int;
    pub fn getdelim(arg1: *mut *mut ::libc::c_char, arg2: *mut size_t,
                    arg3: ::libc::c_int, arg4: *mut FILE) -> ssize_t;
    pub fn getline(arg1: *mut *mut ::libc::c_char, arg2: *mut size_t,
                   arg3: *mut FILE) -> ssize_t;
    pub fn asprintf(arg1: *mut *mut ::libc::c_char,
                    arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn ctermid_r(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t) -> *mut ::libc::c_char;
    pub fn fmtcheck(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn fpurge(arg1: *mut FILE) -> ::libc::c_int;
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::libc::c_char,
                     arg3: ::libc::c_int) -> ();
    pub fn setlinebuf(arg1: *mut FILE) -> ::libc::c_int;
    pub fn vasprintf(arg1: *mut *mut ::libc::c_char,
                     arg2: *const ::libc::c_char, arg3: va_list)
     -> ::libc::c_int;
    pub fn zopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                 arg3: ::libc::c_int) -> *mut FILE;
    pub fn funopen(arg1: *const ::libc::c_void,
                   arg2:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2:
                                                               *mut ::libc::c_char,
                                                           arg3:
                                                               ::libc::c_int)
                                                 -> ::libc::c_int>,
                   arg3:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2:
                                                               *const ::libc::c_char,
                                                           arg3:
                                                               ::libc::c_int)
                                                 -> ::libc::c_int>,
                   arg4:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2: fpos_t,
                                                           arg3:
                                                               ::libc::c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void)
                                                 -> ::libc::c_int>)
     -> *mut FILE;
    pub fn __sprintf_chk(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                         arg3: size_t, arg4: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn __snprintf_chk(arg1: *mut ::libc::c_char, arg2: size_t,
                          arg3: ::libc::c_int, arg4: size_t,
                          arg5: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn __vsprintf_chk(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                          arg3: size_t, arg4: *const ::libc::c_char,
                          arg5: va_list) -> ::libc::c_int;
    pub fn __vsnprintf_chk(arg1: *mut ::libc::c_char, arg2: size_t,
                           arg3: ::libc::c_int, arg4: size_t,
                           arg5: *const ::libc::c_char, arg6: va_list)
     -> ::libc::c_int;
    pub fn getpriority(arg1: ::libc::c_int, arg2: id_t) -> ::libc::c_int;
    pub fn getiopolicy_np(arg1: ::libc::c_int, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn getrlimit(arg1: ::libc::c_int, arg2: *mut Struct_rlimit)
     -> ::libc::c_int;
    pub fn getrusage(arg1: ::libc::c_int, arg2: *mut Struct_rusage)
     -> ::libc::c_int;
    pub fn setpriority(arg1: ::libc::c_int, arg2: id_t, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn setiopolicy_np(arg1: ::libc::c_int, arg2: ::libc::c_int,
                          arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn setrlimit(arg1: ::libc::c_int, arg2: *const Struct_rlimit)
     -> ::libc::c_int;
    pub fn wait(arg1: *mut ::libc::c_int) -> pid_t;
    pub fn waitpid(arg1: pid_t, arg2: *mut ::libc::c_int, arg3: ::libc::c_int)
     -> pid_t;
    pub fn waitid(arg1: idtype_t, arg2: id_t, arg3: *mut siginfo_t,
                  arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn wait3(arg1: *mut ::libc::c_int, arg2: ::libc::c_int,
                 arg3: *mut Struct_rusage) -> pid_t;
    pub fn wait4(arg1: pid_t, arg2: *mut ::libc::c_int, arg3: ::libc::c_int,
                 arg4: *mut Struct_rusage) -> pid_t;
    pub fn alloca(arg1: size_t) -> *mut ::libc::c_void;
    pub fn abort() -> ();
    pub fn abs(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn atexit(arg1: ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn atof(arg1: *const ::libc::c_char) -> ::libc::c_double;
    pub fn atoi(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn atol(arg1: *const ::libc::c_char) -> ::libc::c_long;
    pub fn atoll(arg1: *const ::libc::c_char) -> ::libc::c_longlong;
    pub fn bsearch(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: size_t, arg4: size_t,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *const ::libc::c_void,
                                                           arg2:
                                                               *const ::libc::c_void)
                                                 -> ::libc::c_int>)
     -> *mut ::libc::c_void;
    pub fn calloc(arg1: size_t, arg2: size_t) -> *mut ::libc::c_void;
    pub fn div(arg1: ::libc::c_int, arg2: ::libc::c_int) -> div_t;
    pub fn exit(arg1: ::libc::c_int) -> ();
    pub fn free(arg1: *mut ::libc::c_void) -> ();
    pub fn getenv(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn labs(arg1: ::libc::c_long) -> ::libc::c_long;
    pub fn ldiv(arg1: ::libc::c_long, arg2: ::libc::c_long) -> ldiv_t;
    pub fn llabs(arg1: ::libc::c_longlong) -> ::libc::c_longlong;
    pub fn lldiv(arg1: ::libc::c_longlong, arg2: ::libc::c_longlong)
     -> lldiv_t;
    pub fn malloc(arg1: size_t) -> *mut ::libc::c_void;
    pub fn mblen(arg1: *const ::libc::c_char, arg2: size_t) -> ::libc::c_int;
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::libc::c_char,
                    arg3: size_t) -> size_t;
    pub fn mbtowc(arg1: *mut wchar_t, arg2: *const ::libc::c_char,
                  arg3: size_t) -> ::libc::c_int;
    pub fn posix_memalign(arg1: *mut *mut ::libc::c_void, arg2: size_t,
                          arg3: size_t) -> ::libc::c_int;
    pub fn qsort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                 arg4:
                     ::std::option::Option<extern "C" fn(arg1:
                                                             *const ::libc::c_void,
                                                         arg2:
                                                             *const ::libc::c_void)
                                               -> ::libc::c_int>) -> ();
    pub fn rand() -> ::libc::c_int;
    pub fn realloc(arg1: *mut ::libc::c_void, arg2: size_t)
     -> *mut ::libc::c_void;
    pub fn srand(arg1: ::libc::c_uint) -> ();
    pub fn strtod(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char)
     -> ::libc::c_double;
    pub fn strtof(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char)
     -> ::libc::c_float;
    pub fn strtol(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char,
                  arg3: ::libc::c_int) -> ::libc::c_long;
    pub fn strtold(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtoll(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtoul(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_ulong;
    pub fn strtoull(arg1: *const ::libc::c_char,
                    arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn system(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn wcstombs(arg1: *mut ::libc::c_char, arg2: *const wchar_t,
                    arg3: size_t) -> size_t;
    pub fn wctomb(arg1: *mut ::libc::c_char, arg2: wchar_t) -> ::libc::c_int;
    pub fn _Exit(arg1: ::libc::c_int) -> ();
    pub fn a64l(arg1: *const ::libc::c_char) -> ::libc::c_long;
    pub fn drand48() -> ::libc::c_double;
    pub fn ecvt(arg1: ::libc::c_double, arg2: ::libc::c_int,
                arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn erand48(arg1: *mut ::libc::c_ushort) -> ::libc::c_double;
    pub fn fcvt(arg1: ::libc::c_double, arg2: ::libc::c_int,
                arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn gcvt(arg1: ::libc::c_double, arg2: ::libc::c_int,
                arg3: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn getsubopt(arg1: *mut *mut ::libc::c_char,
                     arg2: *const *mut ::libc::c_char,
                     arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn grantpt(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn initstate(arg1: ::libc::c_uint, arg2: *mut ::libc::c_char,
                     arg3: size_t) -> *mut ::libc::c_char;
    pub fn jrand48(arg1: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn l64a(arg1: ::libc::c_long) -> *mut ::libc::c_char;
    pub fn lcong48(arg1: *mut ::libc::c_ushort) -> ();
    pub fn lrand48() -> ::libc::c_long;
    pub fn mktemp(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn mkstemp(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn mrand48() -> ::libc::c_long;
    pub fn nrand48(arg1: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn posix_openpt(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn ptsname(arg1: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn putenv(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn random() -> ::libc::c_long;
    pub fn rand_r(arg1: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn realpath(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn seed48(arg1: *mut ::libc::c_ushort) -> *mut ::libc::c_ushort;
    pub fn setenv(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                  arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn setkey(arg1: *const ::libc::c_char) -> ();
    pub fn setstate(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn srand48(arg1: ::libc::c_long) -> ();
    pub fn srandom(arg1: ::libc::c_uint) -> ();
    pub fn unlockpt(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn unsetenv(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn arc4random() -> u_int32_t;
    pub fn arc4random_addrandom(arg1: *mut ::libc::c_uchar,
                                arg2: ::libc::c_int) -> ();
    pub fn arc4random_buf(arg1: *mut ::libc::c_void, arg2: size_t) -> ();
    pub fn arc4random_stir() -> ();
    pub fn arc4random_uniform(arg1: u_int32_t) -> u_int32_t;
    pub fn atexit_b(arg1: ::libc::c_void) -> ::libc::c_int;
    pub fn bsearch_b(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                     arg3: size_t, arg4: size_t, arg5: ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn cgetcap(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn cgetclose() -> ::libc::c_int;
    pub fn cgetent(arg1: *mut *mut ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char,
                   arg3: *const ::libc::c_char) -> ::libc::c_int;
    pub fn cgetfirst(arg1: *mut *mut ::libc::c_char,
                     arg2: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cgetmatch(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn cgetnext(arg1: *mut *mut ::libc::c_char,
                    arg2: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cgetnum(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn cgetset(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn cgetstr(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cgetustr(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn daemon(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::libc::c_char;
    pub fn devname_r(arg1: dev_t, arg2: mode_t, buf: *mut ::libc::c_char,
                     len: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn getbsize(arg1: *mut ::libc::c_int, arg2: *mut ::libc::c_long)
     -> *mut ::libc::c_char;
    pub fn getloadavg(arg1: *mut ::libc::c_double, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn getprogname() -> *const ::libc::c_char;
    pub fn heapsort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                    arg4:
                        ::std::option::Option<extern "C" fn(arg1:
                                                                *const ::libc::c_void,
                                                            arg2:
                                                                *const ::libc::c_void)
                                                  -> ::libc::c_int>)
     -> ::libc::c_int;
    pub fn heapsort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                      arg4: ::libc::c_void) -> ::libc::c_int;
    pub fn mergesort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                     arg4:
                         ::std::option::Option<extern "C" fn(arg1:
                                                                 *const ::libc::c_void,
                                                             arg2:
                                                                 *const ::libc::c_void)
                                                   -> ::libc::c_int>)
     -> ::libc::c_int;
    pub fn mergesort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                       arg4: ::libc::c_void) -> ::libc::c_int;
    pub fn psort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                 arg4:
                     ::std::option::Option<extern "C" fn(arg1:
                                                             *const ::libc::c_void,
                                                         arg2:
                                                             *const ::libc::c_void)
                                               -> ::libc::c_int>) -> ();
    pub fn psort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: ::libc::c_void) -> ();
    pub fn psort_r(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: *mut ::libc::c_void,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2:
                                                               *const ::libc::c_void,
                                                           arg3:
                                                               *const ::libc::c_void)
                                                 -> ::libc::c_int>) -> ();
    pub fn qsort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: ::libc::c_void) -> ();
    pub fn qsort_r(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: *mut ::libc::c_void,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2:
                                                               *const ::libc::c_void,
                                                           arg3:
                                                               *const ::libc::c_void)
                                                 -> ::libc::c_int>) -> ();
    pub fn radixsort(arg1: *mut *const ::libc::c_uchar, arg2: ::libc::c_int,
                     arg3: *const ::libc::c_uchar, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn setprogname(arg1: *const ::libc::c_char) -> ();
    pub fn sradixsort(arg1: *mut *const ::libc::c_uchar, arg2: ::libc::c_int,
                      arg3: *const ::libc::c_uchar, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sranddev() -> ();
    pub fn srandomdev() -> ();
    pub fn reallocf(arg1: *mut ::libc::c_void, arg2: size_t)
     -> *mut ::libc::c_void;
    pub fn strtoq(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char,
                  arg3: ::libc::c_int) -> ::libc::c_longlong;
    pub fn strtouq(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn valloc(arg1: size_t) -> *mut ::libc::c_void;
    pub fn memchr(arg1: *const ::libc::c_void, arg2: ::libc::c_int,
                  arg3: size_t) -> *mut ::libc::c_void;
    pub fn memcmp(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                  arg3: size_t) -> ::libc::c_int;
    pub fn memcpy(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                  arg3: size_t) -> *mut ::libc::c_void;
    pub fn memmove(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: size_t) -> *mut ::libc::c_void;
    pub fn memset(arg1: *mut ::libc::c_void, arg2: ::libc::c_int,
                  arg3: size_t) -> *mut ::libc::c_void;
    pub fn strcat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strchr(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strcmp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strcoll(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strcspn(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> size_t;
    pub fn strerror(arg1: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strlen(arg1: *const ::libc::c_char) -> size_t;
    pub fn strncat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strncmp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> ::libc::c_int;
    pub fn strncpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strpbrk(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strrchr(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strspn(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> size_t;
    pub fn strstr(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strtok(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strxfrm(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> size_t;
    pub fn strtok_r(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: *mut *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strerror_r(arg1: ::libc::c_int, arg2: *mut ::libc::c_char,
                      arg3: size_t) -> ::libc::c_int;
    pub fn strdup(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn memccpy(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: ::libc::c_int, arg4: size_t) -> *mut ::libc::c_void;
    pub fn stpcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn stpncpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strndup(arg1: *const ::libc::c_char, arg2: size_t)
     -> *mut ::libc::c_char;
    pub fn strnlen(arg1: *const ::libc::c_char, arg2: size_t) -> size_t;
    pub fn strsignal(sig: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn memset_s(arg1: *mut ::libc::c_void, arg2: rsize_t,
                    arg3: ::libc::c_int, arg4: rsize_t) -> errno_t;
    pub fn memmem(arg1: *const ::libc::c_void, arg2: size_t,
                  arg3: *const ::libc::c_void, arg4: size_t)
     -> *mut ::libc::c_void;
    pub fn memset_pattern4(arg1: *mut ::libc::c_void,
                           arg2: *const ::libc::c_void, arg3: size_t) -> ();
    pub fn memset_pattern8(arg1: *mut ::libc::c_void,
                           arg2: *const ::libc::c_void, arg3: size_t) -> ();
    pub fn memset_pattern16(arg1: *mut ::libc::c_void,
                            arg2: *const ::libc::c_void, arg3: size_t) -> ();
    pub fn strcasestr(arg1: *const ::libc::c_char,
                      arg2: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strnstr(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strlcat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> size_t;
    pub fn strlcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> size_t;
    pub fn strmode(arg1: ::libc::c_int, arg2: *mut ::libc::c_char) -> ();
    pub fn strsep(arg1: *mut *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn swab(arg1: *const ::libc::c_void, arg2: *mut ::libc::c_void,
                arg3: ssize_t) -> ();
    pub fn bcmp(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                arg3: size_t) -> ::libc::c_int;
    pub fn bcopy(arg1: *const ::libc::c_void, arg2: *mut ::libc::c_void,
                 arg3: size_t) -> ();
    pub fn bzero(arg1: *mut ::libc::c_void, arg2: size_t) -> ();
    pub fn index(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn rindex(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn ffs(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn strcasecmp(arg1: *const ::libc::c_char,
                      arg2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strncasecmp(arg1: *const ::libc::c_char,
                       arg2: *const ::libc::c_char, arg3: size_t)
     -> ::libc::c_int;
    pub fn ffsl(arg1: ::libc::c_long) -> ::libc::c_int;
    pub fn ffsll(arg1: ::libc::c_longlong) -> ::libc::c_int;
    pub fn fls(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn flsl(arg1: ::libc::c_long) -> ::libc::c_int;
    pub fn flsll(arg1: ::libc::c_longlong) -> ::libc::c_int;
    pub fn asctime(arg1: *const Struct_tm) -> *mut ::libc::c_char;
    pub fn clock() -> clock_t;
    pub fn ctime(arg1: *const time_t) -> *mut ::libc::c_char;
    pub fn difftime(arg1: time_t, arg2: time_t) -> ::libc::c_double;
    pub fn getdate(arg1: *const ::libc::c_char) -> *mut Struct_tm;
    pub fn gmtime(arg1: *const time_t) -> *mut Struct_tm;
    pub fn localtime(arg1: *const time_t) -> *mut Struct_tm;
    pub fn mktime(arg1: *mut Struct_tm) -> time_t;
    pub fn strftime(arg1: *mut ::libc::c_char, arg2: size_t,
                    arg3: *const ::libc::c_char, arg4: *const Struct_tm)
     -> size_t;
    pub fn strptime(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: *mut Struct_tm) -> *mut ::libc::c_char;
    pub fn time(arg1: *mut time_t) -> time_t;
    pub fn tzset() -> ();
    pub fn asctime_r(arg1: *const Struct_tm, arg2: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn ctime_r(arg1: *const time_t, arg2: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn localtime_r(arg1: *const time_t, arg2: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn posix2time(arg1: time_t) -> time_t;
    pub fn tzsetwall() -> ();
    pub fn time2posix(arg1: time_t) -> time_t;
    pub fn timelocal(arg1: *mut Struct_tm) -> time_t;
    pub fn timegm(arg1: *mut Struct_tm) -> time_t;
    pub fn nanosleep(arg1: *const Struct_timespec, arg2: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn imaxabs(j: intmax_t) -> intmax_t;
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
    pub fn strtoimax(__nptr: *const ::libc::c_char,
                     __endptr: *mut *mut ::libc::c_char,
                     __base: ::libc::c_int) -> intmax_t;
    pub fn strtoumax(__nptr: *const ::libc::c_char,
                     __endptr: *mut *mut ::libc::c_char,
                     __base: ::libc::c_int) -> uintmax_t;
    pub fn wcstoimax(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                     __base: ::libc::c_int) -> intmax_t;
    pub fn wcstoumax(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                     __base: ::libc::c_int) -> uintmax_t;
    pub fn CFArrayGetTypeID() -> CFTypeID;
    pub fn CFArrayCreate(allocator: CFAllocatorRef,
                         values: *mut *const ::libc::c_void,
                         numValues: CFIndex,
                         callBacks: *const CFArrayCallBacks) -> CFArrayRef;
    pub fn CFArrayCreateCopy(allocator: CFAllocatorRef, theArray: CFArrayRef)
     -> CFArrayRef;
    pub fn CFArrayCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex,
                                callBacks: *const CFArrayCallBacks)
     -> CFMutableArrayRef;
    pub fn CFArrayCreateMutableCopy(allocator: CFAllocatorRef,
                                    capacity: CFIndex, theArray: CFArrayRef)
     -> CFMutableArrayRef;
    pub fn CFArrayGetCount(theArray: CFArrayRef) -> CFIndex;
    pub fn CFArrayGetCountOfValue(theArray: CFArrayRef, range: CFRange,
                                  value: *const ::libc::c_void) -> CFIndex;
    pub fn CFArrayContainsValue(theArray: CFArrayRef, range: CFRange,
                                value: *const ::libc::c_void) -> Boolean;
    pub fn CFArrayGetValueAtIndex(theArray: CFArrayRef, idx: CFIndex)
     -> *const ::libc::c_void;
    pub fn CFArrayGetValues(theArray: CFArrayRef, range: CFRange,
                            values: *mut *const ::libc::c_void) -> ();
    pub fn CFArrayApplyFunction(theArray: CFArrayRef, range: CFRange,
                                applier: CFArrayApplierFunction,
                                context: *mut ::libc::c_void) -> ();
    pub fn CFArrayGetFirstIndexOfValue(theArray: CFArrayRef, range: CFRange,
                                       value: *const ::libc::c_void)
     -> CFIndex;
    pub fn CFArrayGetLastIndexOfValue(theArray: CFArrayRef, range: CFRange,
                                      value: *const ::libc::c_void)
     -> CFIndex;
    pub fn CFArrayBSearchValues(theArray: CFArrayRef, range: CFRange,
                                value: *const ::libc::c_void,
                                comparator: CFComparatorFunction,
                                context: *mut ::libc::c_void) -> CFIndex;
    pub fn CFArrayAppendValue(theArray: CFMutableArrayRef,
                              value: *const ::libc::c_void) -> ();
    pub fn CFArrayInsertValueAtIndex(theArray: CFMutableArrayRef,
                                     idx: CFIndex,
                                     value: *const ::libc::c_void) -> ();
    pub fn CFArraySetValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex,
                                  value: *const ::libc::c_void) -> ();
    pub fn CFArrayRemoveValueAtIndex(theArray: CFMutableArrayRef,
                                     idx: CFIndex) -> ();
    pub fn CFArrayRemoveAllValues(theArray: CFMutableArrayRef) -> ();
    pub fn CFArrayReplaceValues(theArray: CFMutableArrayRef, range: CFRange,
                                newValues: *mut *const ::libc::c_void,
                                newCount: CFIndex) -> ();
    pub fn CFArrayExchangeValuesAtIndices(theArray: CFMutableArrayRef,
                                          idx1: CFIndex, idx2: CFIndex) -> ();
    pub fn CFArraySortValues(theArray: CFMutableArrayRef, range: CFRange,
                             comparator: CFComparatorFunction,
                             context: *mut ::libc::c_void) -> ();
    pub fn CFArrayAppendArray(theArray: CFMutableArrayRef,
                              otherArray: CFArrayRef, otherRange: CFRange)
     -> ();
    pub fn CFBagGetTypeID() -> CFTypeID;
    pub fn CFBagCreate(allocator: CFAllocatorRef,
                       values: *mut *const ::libc::c_void, numValues: CFIndex,
                       callBacks: *const CFBagCallBacks) -> CFBagRef;
    pub fn CFBagCreateCopy(allocator: CFAllocatorRef, theBag: CFBagRef)
     -> CFBagRef;
    pub fn CFBagCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex,
                              callBacks: *const CFBagCallBacks)
     -> CFMutableBagRef;
    pub fn CFBagCreateMutableCopy(allocator: CFAllocatorRef,
                                  capacity: CFIndex, theBag: CFBagRef)
     -> CFMutableBagRef;
    pub fn CFBagGetCount(theBag: CFBagRef) -> CFIndex;
    pub fn CFBagGetCountOfValue(theBag: CFBagRef,
                                value: *const ::libc::c_void) -> CFIndex;
    pub fn CFBagContainsValue(theBag: CFBagRef, value: *const ::libc::c_void)
     -> Boolean;
    pub fn CFBagGetValue(theBag: CFBagRef, value: *const ::libc::c_void)
     -> *const ::libc::c_void;
    pub fn CFBagGetValueIfPresent(theBag: CFBagRef,
                                  candidate: *const ::libc::c_void,
                                  value: *mut *const ::libc::c_void)
     -> Boolean;
    pub fn CFBagGetValues(theBag: CFBagRef,
                          values: *mut *const ::libc::c_void) -> ();
    pub fn CFBagApplyFunction(theBag: CFBagRef, applier: CFBagApplierFunction,
                              context: *mut ::libc::c_void) -> ();
    pub fn CFBagAddValue(theBag: CFMutableBagRef,
                         value: *const ::libc::c_void) -> ();
    pub fn CFBagReplaceValue(theBag: CFMutableBagRef,
                             value: *const ::libc::c_void) -> ();
    pub fn CFBagSetValue(theBag: CFMutableBagRef,
                         value: *const ::libc::c_void) -> ();
    pub fn CFBagRemoveValue(theBag: CFMutableBagRef,
                            value: *const ::libc::c_void) -> ();
    pub fn CFBagRemoveAllValues(theBag: CFMutableBagRef) -> ();
    pub fn CFBinaryHeapGetTypeID() -> CFTypeID;
    pub fn CFBinaryHeapCreate(allocator: CFAllocatorRef, capacity: CFIndex,
                              callBacks: *const CFBinaryHeapCallBacks,
                              compareContext:
                                  *const CFBinaryHeapCompareContext)
     -> CFBinaryHeapRef;
    pub fn CFBinaryHeapCreateCopy(allocator: CFAllocatorRef,
                                  capacity: CFIndex, heap: CFBinaryHeapRef)
     -> CFBinaryHeapRef;
    pub fn CFBinaryHeapGetCount(heap: CFBinaryHeapRef) -> CFIndex;
    pub fn CFBinaryHeapGetCountOfValue(heap: CFBinaryHeapRef,
                                       value: *const ::libc::c_void)
     -> CFIndex;
    pub fn CFBinaryHeapContainsValue(heap: CFBinaryHeapRef,
                                     value: *const ::libc::c_void) -> Boolean;
    pub fn CFBinaryHeapGetMinimum(heap: CFBinaryHeapRef)
     -> *const ::libc::c_void;
    pub fn CFBinaryHeapGetMinimumIfPresent(heap: CFBinaryHeapRef,
                                           value: *mut *const ::libc::c_void)
     -> Boolean;
    pub fn CFBinaryHeapGetValues(heap: CFBinaryHeapRef,
                                 values: *mut *const ::libc::c_void) -> ();
    pub fn CFBinaryHeapApplyFunction(heap: CFBinaryHeapRef,
                                     applier: CFBinaryHeapApplierFunction,
                                     context: *mut ::libc::c_void) -> ();
    pub fn CFBinaryHeapAddValue(heap: CFBinaryHeapRef,
                                value: *const ::libc::c_void) -> ();
    pub fn CFBinaryHeapRemoveMinimumValue(heap: CFBinaryHeapRef) -> ();
    pub fn CFBinaryHeapRemoveAllValues(heap: CFBinaryHeapRef) -> ();
    pub fn CFBitVectorGetTypeID() -> CFTypeID;
    pub fn CFBitVectorCreate(allocator: CFAllocatorRef, bytes: *const UInt8,
                             numBits: CFIndex) -> CFBitVectorRef;
    pub fn CFBitVectorCreateCopy(allocator: CFAllocatorRef,
                                 bv: CFBitVectorRef) -> CFBitVectorRef;
    pub fn CFBitVectorCreateMutable(allocator: CFAllocatorRef,
                                    capacity: CFIndex)
     -> CFMutableBitVectorRef;
    pub fn CFBitVectorCreateMutableCopy(allocator: CFAllocatorRef,
                                        capacity: CFIndex, bv: CFBitVectorRef)
     -> CFMutableBitVectorRef;
    pub fn CFBitVectorGetCount(bv: CFBitVectorRef) -> CFIndex;
    pub fn CFBitVectorGetCountOfBit(bv: CFBitVectorRef, range: CFRange,
                                    value: CFBit) -> CFIndex;
    pub fn CFBitVectorContainsBit(bv: CFBitVectorRef, range: CFRange,
                                  value: CFBit) -> Boolean;
    pub fn CFBitVectorGetBitAtIndex(bv: CFBitVectorRef, idx: CFIndex)
     -> CFBit;
    pub fn CFBitVectorGetBits(bv: CFBitVectorRef, range: CFRange,
                              bytes: *mut UInt8) -> ();
    pub fn CFBitVectorGetFirstIndexOfBit(bv: CFBitVectorRef, range: CFRange,
                                         value: CFBit) -> CFIndex;
    pub fn CFBitVectorGetLastIndexOfBit(bv: CFBitVectorRef, range: CFRange,
                                        value: CFBit) -> CFIndex;
    pub fn CFBitVectorSetCount(bv: CFMutableBitVectorRef, count: CFIndex)
     -> ();
    pub fn CFBitVectorFlipBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex)
     -> ();
    pub fn CFBitVectorFlipBits(bv: CFMutableBitVectorRef, range: CFRange)
     -> ();
    pub fn CFBitVectorSetBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex,
                                    value: CFBit) -> ();
    pub fn CFBitVectorSetBits(bv: CFMutableBitVectorRef, range: CFRange,
                              value: CFBit) -> ();
    pub fn CFBitVectorSetAllBits(bv: CFMutableBitVectorRef, value: CFBit)
     -> ();
    pub fn CFDictionaryGetTypeID() -> CFTypeID;
    pub fn CFDictionaryCreate(allocator: CFAllocatorRef,
                              keys: *mut *const ::libc::c_void,
                              values: *mut *const ::libc::c_void,
                              numValues: CFIndex,
                              keyCallBacks: *const CFDictionaryKeyCallBacks,
                              valueCallBacks:
                                  *const CFDictionaryValueCallBacks)
     -> CFDictionaryRef;
    pub fn CFDictionaryCreateCopy(allocator: CFAllocatorRef,
                                  theDict: CFDictionaryRef)
     -> CFDictionaryRef;
    pub fn CFDictionaryCreateMutable(allocator: CFAllocatorRef,
                                     capacity: CFIndex,
                                     keyCallBacks:
                                         *const CFDictionaryKeyCallBacks,
                                     valueCallBacks:
                                         *const CFDictionaryValueCallBacks)
     -> CFMutableDictionaryRef;
    pub fn CFDictionaryCreateMutableCopy(allocator: CFAllocatorRef,
                                         capacity: CFIndex,
                                         theDict: CFDictionaryRef)
     -> CFMutableDictionaryRef;
    pub fn CFDictionaryGetCount(theDict: CFDictionaryRef) -> CFIndex;
    pub fn CFDictionaryGetCountOfKey(theDict: CFDictionaryRef,
                                     key: *const ::libc::c_void) -> CFIndex;
    pub fn CFDictionaryGetCountOfValue(theDict: CFDictionaryRef,
                                       value: *const ::libc::c_void)
     -> CFIndex;
    pub fn CFDictionaryContainsKey(theDict: CFDictionaryRef,
                                   key: *const ::libc::c_void) -> Boolean;
    pub fn CFDictionaryContainsValue(theDict: CFDictionaryRef,
                                     value: *const ::libc::c_void) -> Boolean;
    pub fn CFDictionaryGetValue(theDict: CFDictionaryRef,
                                key: *const ::libc::c_void)
     -> *const ::libc::c_void;
    pub fn CFDictionaryGetValueIfPresent(theDict: CFDictionaryRef,
                                         key: *const ::libc::c_void,
                                         value: *mut *const ::libc::c_void)
     -> Boolean;
    pub fn CFDictionaryGetKeysAndValues(theDict: CFDictionaryRef,
                                        keys: *mut *const ::libc::c_void,
                                        values: *mut *const ::libc::c_void)
     -> ();
    pub fn CFDictionaryApplyFunction(theDict: CFDictionaryRef,
                                     applier: CFDictionaryApplierFunction,
                                     context: *mut ::libc::c_void) -> ();
    pub fn CFDictionaryAddValue(theDict: CFMutableDictionaryRef,
                                key: *const ::libc::c_void,
                                value: *const ::libc::c_void) -> ();
    pub fn CFDictionarySetValue(theDict: CFMutableDictionaryRef,
                                key: *const ::libc::c_void,
                                value: *const ::libc::c_void) -> ();
    pub fn CFDictionaryReplaceValue(theDict: CFMutableDictionaryRef,
                                    key: *const ::libc::c_void,
                                    value: *const ::libc::c_void) -> ();
    pub fn CFDictionaryRemoveValue(theDict: CFMutableDictionaryRef,
                                   key: *const ::libc::c_void) -> ();
    pub fn CFDictionaryRemoveAllValues(theDict: CFMutableDictionaryRef) -> ();
    pub fn CFLocaleGetTypeID() -> CFTypeID;
    pub fn CFLocaleGetSystem() -> CFLocaleRef;
    pub fn CFLocaleCopyCurrent() -> CFLocaleRef;
    pub fn CFLocaleCopyAvailableLocaleIdentifiers() -> CFArrayRef;
    pub fn CFLocaleCopyISOLanguageCodes() -> CFArrayRef;
    pub fn CFLocaleCopyISOCountryCodes() -> CFArrayRef;
    pub fn CFLocaleCopyISOCurrencyCodes() -> CFArrayRef;
    pub fn CFLocaleCopyCommonISOCurrencyCodes() -> CFArrayRef;
    pub fn CFLocaleCopyPreferredLanguages() -> CFArrayRef;
    pub fn CFLocaleCreateCanonicalLanguageIdentifierFromString(allocator:
                                                                   CFAllocatorRef,
                                                               localeIdentifier:
                                                                   CFStringRef)
     -> CFStringRef;
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromString(allocator:
                                                                 CFAllocatorRef,
                                                             localeIdentifier:
                                                                 CFStringRef)
     -> CFStringRef;
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(allocator:
                                                                             CFAllocatorRef,
                                                                         lcode:
                                                                             LangCode,
                                                                         rcode:
                                                                             RegionCode)
     -> CFStringRef;
    pub fn CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(allocator:
                                                                   CFAllocatorRef,
                                                               lcid: uint32_t)
     -> CFStringRef;
    pub fn CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(localeIdentifier:
                                                                CFStringRef)
     -> uint32_t;
    pub fn CFLocaleGetLanguageCharacterDirection(isoLangCode: CFStringRef)
     -> CFLocaleLanguageDirection;
    pub fn CFLocaleGetLanguageLineDirection(isoLangCode: CFStringRef)
     -> CFLocaleLanguageDirection;
    pub fn CFLocaleCreateComponentsFromLocaleIdentifier(allocator:
                                                            CFAllocatorRef,
                                                        localeID: CFStringRef)
     -> CFDictionaryRef;
    pub fn CFLocaleCreateLocaleIdentifierFromComponents(allocator:
                                                            CFAllocatorRef,
                                                        dictionary:
                                                            CFDictionaryRef)
     -> CFStringRef;
    pub fn CFLocaleCreate(allocator: CFAllocatorRef,
                          localeIdentifier: CFStringRef) -> CFLocaleRef;
    pub fn CFLocaleCreateCopy(allocator: CFAllocatorRef, locale: CFLocaleRef)
     -> CFLocaleRef;
    pub fn CFLocaleGetIdentifier(locale: CFLocaleRef) -> CFStringRef;
    pub fn CFLocaleGetValue(locale: CFLocaleRef, key: CFStringRef)
     -> CFTypeRef;
    pub fn CFLocaleCopyDisplayNameForPropertyValue(displayLocale: CFLocaleRef,
                                                   key: CFStringRef,
                                                   value: CFStringRef)
     -> CFStringRef;
    pub fn CFAbsoluteTimeGetCurrent() -> CFAbsoluteTime;
    pub fn CFDateGetTypeID() -> CFTypeID;
    pub fn CFDateCreate(allocator: CFAllocatorRef, at: CFAbsoluteTime)
     -> CFDateRef;
    pub fn CFDateGetAbsoluteTime(theDate: CFDateRef) -> CFAbsoluteTime;
    pub fn CFDateGetTimeIntervalSinceDate(theDate: CFDateRef,
                                          otherDate: CFDateRef)
     -> CFTimeInterval;
    pub fn CFDateCompare(theDate: CFDateRef, otherDate: CFDateRef,
                         context: *mut ::libc::c_void) -> CFComparisonResult;
    pub fn CFGregorianDateIsValid(gdate: CFGregorianDate,
                                  unitFlags: CFOptionFlags) -> Boolean;
    pub fn CFGregorianDateGetAbsoluteTime(gdate: CFGregorianDate,
                                          tz: CFTimeZoneRef)
     -> CFAbsoluteTime;
    pub fn CFAbsoluteTimeGetGregorianDate(at: CFAbsoluteTime,
                                          tz: CFTimeZoneRef)
     -> CFGregorianDate;
    pub fn CFAbsoluteTimeAddGregorianUnits(at: CFAbsoluteTime,
                                           tz: CFTimeZoneRef,
                                           units: CFGregorianUnits)
     -> CFAbsoluteTime;
    pub fn CFAbsoluteTimeGetDifferenceAsGregorianUnits(at1: CFAbsoluteTime,
                                                       at2: CFAbsoluteTime,
                                                       tz: CFTimeZoneRef,
                                                       unitFlags:
                                                           CFOptionFlags)
     -> CFGregorianUnits;
    pub fn CFAbsoluteTimeGetDayOfWeek(at: CFAbsoluteTime, tz: CFTimeZoneRef)
     -> SInt32;
    pub fn CFAbsoluteTimeGetDayOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef)
     -> SInt32;
    pub fn CFAbsoluteTimeGetWeekOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef)
     -> SInt32;
    pub fn CFDataGetTypeID() -> CFTypeID;
    pub fn CFDataCreate(allocator: CFAllocatorRef, bytes: *const UInt8,
                        length: CFIndex) -> CFDataRef;
    pub fn CFDataCreateWithBytesNoCopy(allocator: CFAllocatorRef,
                                       bytes: *const UInt8, length: CFIndex,
                                       bytesDeallocator: CFAllocatorRef)
     -> CFDataRef;
    pub fn CFDataCreateCopy(allocator: CFAllocatorRef, theData: CFDataRef)
     -> CFDataRef;
    pub fn CFDataCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex)
     -> CFMutableDataRef;
    pub fn CFDataCreateMutableCopy(allocator: CFAllocatorRef,
                                   capacity: CFIndex, theData: CFDataRef)
     -> CFMutableDataRef;
    pub fn CFDataGetLength(theData: CFDataRef) -> CFIndex;
    pub fn CFDataGetBytePtr(theData: CFDataRef) -> *const UInt8;
    pub fn CFDataGetMutableBytePtr(theData: CFMutableDataRef) -> *mut UInt8;
    pub fn CFDataGetBytes(theData: CFDataRef, range: CFRange,
                          buffer: *mut UInt8) -> ();
    pub fn CFDataSetLength(theData: CFMutableDataRef, length: CFIndex) -> ();
    pub fn CFDataIncreaseLength(theData: CFMutableDataRef,
                                extraLength: CFIndex) -> ();
    pub fn CFDataAppendBytes(theData: CFMutableDataRef, bytes: *const UInt8,
                             length: CFIndex) -> ();
    pub fn CFDataReplaceBytes(theData: CFMutableDataRef, range: CFRange,
                              newBytes: *const UInt8, newLength: CFIndex)
     -> ();
    pub fn CFDataDeleteBytes(theData: CFMutableDataRef, range: CFRange) -> ();
    pub fn CFDataFind(theData: CFDataRef, dataToFind: CFDataRef,
                      searchRange: CFRange, compareOptions: CFDataSearchFlags)
     -> CFRange;
    pub fn CFCharacterSetGetTypeID() -> CFTypeID;
    pub fn CFCharacterSetGetPredefined(theSetIdentifier:
                                           CFCharacterSetPredefinedSet)
     -> CFCharacterSetRef;
    pub fn CFCharacterSetCreateWithCharactersInRange(alloc: CFAllocatorRef,
                                                     theRange: CFRange)
     -> CFCharacterSetRef;
    pub fn CFCharacterSetCreateWithCharactersInString(alloc: CFAllocatorRef,
                                                      theString: CFStringRef)
     -> CFCharacterSetRef;
    pub fn CFCharacterSetCreateWithBitmapRepresentation(alloc: CFAllocatorRef,
                                                        theData: CFDataRef)
     -> CFCharacterSetRef;
    pub fn CFCharacterSetCreateInvertedSet(alloc: CFAllocatorRef,
                                           theSet: CFCharacterSetRef)
     -> CFCharacterSetRef;
    pub fn CFCharacterSetIsSupersetOfSet(theSet: CFCharacterSetRef,
                                         theOtherset: CFCharacterSetRef)
     -> Boolean;
    pub fn CFCharacterSetHasMemberInPlane(theSet: CFCharacterSetRef,
                                          thePlane: CFIndex) -> Boolean;
    pub fn CFCharacterSetCreateMutable(alloc: CFAllocatorRef)
     -> CFMutableCharacterSetRef;
    pub fn CFCharacterSetCreateCopy(alloc: CFAllocatorRef,
                                    theSet: CFCharacterSetRef)
     -> CFCharacterSetRef;
    pub fn CFCharacterSetCreateMutableCopy(alloc: CFAllocatorRef,
                                           theSet: CFCharacterSetRef)
     -> CFMutableCharacterSetRef;
    pub fn CFCharacterSetIsCharacterMember(theSet: CFCharacterSetRef,
                                           theChar: UniChar) -> Boolean;
    pub fn CFCharacterSetIsLongCharacterMember(theSet: CFCharacterSetRef,
                                               theChar: UTF32Char) -> Boolean;
    pub fn CFCharacterSetCreateBitmapRepresentation(alloc: CFAllocatorRef,
                                                    theSet: CFCharacterSetRef)
     -> CFDataRef;
    pub fn CFCharacterSetAddCharactersInRange(theSet:
                                                  CFMutableCharacterSetRef,
                                              theRange: CFRange) -> ();
    pub fn CFCharacterSetRemoveCharactersInRange(theSet:
                                                     CFMutableCharacterSetRef,
                                                 theRange: CFRange) -> ();
    pub fn CFCharacterSetAddCharactersInString(theSet:
                                                   CFMutableCharacterSetRef,
                                               theString: CFStringRef) -> ();
    pub fn CFCharacterSetRemoveCharactersInString(theSet:
                                                      CFMutableCharacterSetRef,
                                                  theString: CFStringRef)
     -> ();
    pub fn CFCharacterSetUnion(theSet: CFMutableCharacterSetRef,
                               theOtherSet: CFCharacterSetRef) -> ();
    pub fn CFCharacterSetIntersect(theSet: CFMutableCharacterSetRef,
                                   theOtherSet: CFCharacterSetRef) -> ();
    pub fn CFCharacterSetInvert(theSet: CFMutableCharacterSetRef) -> ();
    pub fn CFStringGetTypeID() -> CFTypeID;
    pub fn CFStringCreateWithPascalString(alloc: CFAllocatorRef,
                                          pStr: ConstStr255Param,
                                          encoding: CFStringEncoding)
     -> CFStringRef;
    pub fn CFStringCreateWithCString(alloc: CFAllocatorRef,
                                     cStr: *const ::libc::c_char,
                                     encoding: CFStringEncoding)
     -> CFStringRef;
    pub fn CFStringCreateWithBytes(alloc: CFAllocatorRef, bytes: *const UInt8,
                                   numBytes: CFIndex,
                                   encoding: CFStringEncoding,
                                   isExternalRepresentation: Boolean)
     -> CFStringRef;
    pub fn CFStringCreateWithCharacters(alloc: CFAllocatorRef,
                                        chars: *const UniChar,
                                        numChars: CFIndex) -> CFStringRef;
    pub fn CFStringCreateWithPascalStringNoCopy(alloc: CFAllocatorRef,
                                                pStr: ConstStr255Param,
                                                encoding: CFStringEncoding,
                                                contentsDeallocator:
                                                    CFAllocatorRef)
     -> CFStringRef;
    pub fn CFStringCreateWithCStringNoCopy(alloc: CFAllocatorRef,
                                           cStr: *const ::libc::c_char,
                                           encoding: CFStringEncoding,
                                           contentsDeallocator:
                                               CFAllocatorRef) -> CFStringRef;
    pub fn CFStringCreateWithBytesNoCopy(alloc: CFAllocatorRef,
                                         bytes: *const UInt8,
                                         numBytes: CFIndex,
                                         encoding: CFStringEncoding,
                                         isExternalRepresentation: Boolean,
                                         contentsDeallocator: CFAllocatorRef)
     -> CFStringRef;
    pub fn CFStringCreateWithCharactersNoCopy(alloc: CFAllocatorRef,
                                              chars: *const UniChar,
                                              numChars: CFIndex,
                                              contentsDeallocator:
                                                  CFAllocatorRef)
     -> CFStringRef;
    pub fn CFStringCreateWithSubstring(alloc: CFAllocatorRef,
                                       str: CFStringRef, range: CFRange)
     -> CFStringRef;
    pub fn CFStringCreateCopy(alloc: CFAllocatorRef, theString: CFStringRef)
     -> CFStringRef;
    pub fn CFStringCreateWithFormat(alloc: CFAllocatorRef,
                                    formatOptions: CFDictionaryRef,
                                    format: CFStringRef, ...) -> CFStringRef;
    pub fn CFStringCreateWithFormatAndArguments(alloc: CFAllocatorRef,
                                                formatOptions:
                                                    CFDictionaryRef,
                                                format: CFStringRef,
                                                arguments: va_list)
     -> CFStringRef;
    pub fn CFStringCreateMutable(alloc: CFAllocatorRef, maxLength: CFIndex)
     -> CFMutableStringRef;
    pub fn CFStringCreateMutableCopy(alloc: CFAllocatorRef,
                                     maxLength: CFIndex,
                                     theString: CFStringRef)
     -> CFMutableStringRef;
    pub fn CFStringCreateMutableWithExternalCharactersNoCopy(alloc:
                                                                 CFAllocatorRef,
                                                             chars:
                                                                 *mut UniChar,
                                                             numChars:
                                                                 CFIndex,
                                                             capacity:
                                                                 CFIndex,
                                                             externalCharactersAllocator:
                                                                 CFAllocatorRef)
     -> CFMutableStringRef;
    pub fn CFStringGetLength(theString: CFStringRef) -> CFIndex;
    pub fn CFStringGetCharacterAtIndex(theString: CFStringRef, idx: CFIndex)
     -> UniChar;
    pub fn CFStringGetCharacters(theString: CFStringRef, range: CFRange,
                                 buffer: *mut UniChar) -> ();
    pub fn CFStringGetPascalString(theString: CFStringRef, buffer: StringPtr,
                                   bufferSize: CFIndex,
                                   encoding: CFStringEncoding) -> Boolean;
    pub fn CFStringGetCString(theString: CFStringRef,
                              buffer: *mut ::libc::c_char,
                              bufferSize: CFIndex, encoding: CFStringEncoding)
     -> Boolean;
    pub fn CFStringGetPascalStringPtr(theString: CFStringRef,
                                      encoding: CFStringEncoding)
     -> ConstStringPtr;
    pub fn CFStringGetCStringPtr(theString: CFStringRef,
                                 encoding: CFStringEncoding)
     -> *const ::libc::c_char;
    pub fn CFStringGetCharactersPtr(theString: CFStringRef) -> *const UniChar;
    pub fn CFStringGetBytes(theString: CFStringRef, range: CFRange,
                            encoding: CFStringEncoding, lossByte: UInt8,
                            isExternalRepresentation: Boolean,
                            buffer: *mut UInt8, maxBufLen: CFIndex,
                            usedBufLen: *mut CFIndex) -> CFIndex;
    pub fn CFStringCreateFromExternalRepresentation(alloc: CFAllocatorRef,
                                                    data: CFDataRef,
                                                    encoding:
                                                        CFStringEncoding)
     -> CFStringRef;
    pub fn CFStringCreateExternalRepresentation(alloc: CFAllocatorRef,
                                                theString: CFStringRef,
                                                encoding: CFStringEncoding,
                                                lossByte: UInt8) -> CFDataRef;
    pub fn CFStringGetSmallestEncoding(theString: CFStringRef)
     -> CFStringEncoding;
    pub fn CFStringGetFastestEncoding(theString: CFStringRef)
     -> CFStringEncoding;
    pub fn CFStringGetSystemEncoding() -> CFStringEncoding;
    pub fn CFStringGetMaximumSizeForEncoding(length: CFIndex,
                                             encoding: CFStringEncoding)
     -> CFIndex;
    pub fn CFStringGetFileSystemRepresentation(string: CFStringRef,
                                               buffer: *mut ::libc::c_char,
                                               maxBufLen: CFIndex) -> Boolean;
    pub fn CFStringGetMaximumSizeOfFileSystemRepresentation(string:
                                                                CFStringRef)
     -> CFIndex;
    pub fn CFStringCreateWithFileSystemRepresentation(alloc: CFAllocatorRef,
                                                      buffer:
                                                          *const ::libc::c_char)
     -> CFStringRef;
    pub fn CFStringCompareWithOptionsAndLocale(theString1: CFStringRef,
                                               theString2: CFStringRef,
                                               rangeToCompare: CFRange,
                                               compareOptions:
                                                   CFStringCompareFlags,
                                               locale: CFLocaleRef)
     -> CFComparisonResult;
    pub fn CFStringCompareWithOptions(theString1: CFStringRef,
                                      theString2: CFStringRef,
                                      rangeToCompare: CFRange,
                                      compareOptions: CFStringCompareFlags)
     -> CFComparisonResult;
    pub fn CFStringCompare(theString1: CFStringRef, theString2: CFStringRef,
                           compareOptions: CFStringCompareFlags)
     -> CFComparisonResult;
    pub fn CFStringFindWithOptionsAndLocale(theString: CFStringRef,
                                            stringToFind: CFStringRef,
                                            rangeToSearch: CFRange,
                                            searchOptions:
                                                CFStringCompareFlags,
                                            locale: CFLocaleRef,
                                            result: *mut CFRange) -> Boolean;
    pub fn CFStringFindWithOptions(theString: CFStringRef,
                                   stringToFind: CFStringRef,
                                   rangeToSearch: CFRange,
                                   searchOptions: CFStringCompareFlags,
                                   result: *mut CFRange) -> Boolean;
    pub fn CFStringCreateArrayWithFindResults(alloc: CFAllocatorRef,
                                              theString: CFStringRef,
                                              stringToFind: CFStringRef,
                                              rangeToSearch: CFRange,
                                              compareOptions:
                                                  CFStringCompareFlags)
     -> CFArrayRef;
    pub fn CFStringFind(theString: CFStringRef, stringToFind: CFStringRef,
                        compareOptions: CFStringCompareFlags) -> CFRange;
    pub fn CFStringHasPrefix(theString: CFStringRef, prefix: CFStringRef)
     -> Boolean;
    pub fn CFStringHasSuffix(theString: CFStringRef, suffix: CFStringRef)
     -> Boolean;
    pub fn CFStringGetRangeOfComposedCharactersAtIndex(theString: CFStringRef,
                                                       theIndex: CFIndex)
     -> CFRange;
    pub fn CFStringFindCharacterFromSet(theString: CFStringRef,
                                        theSet: CFCharacterSetRef,
                                        rangeToSearch: CFRange,
                                        searchOptions: CFStringCompareFlags,
                                        result: *mut CFRange) -> Boolean;
    pub fn CFStringGetLineBounds(theString: CFStringRef, range: CFRange,
                                 lineBeginIndex: *mut CFIndex,
                                 lineEndIndex: *mut CFIndex,
                                 contentsEndIndex: *mut CFIndex) -> ();
    pub fn CFStringGetParagraphBounds(string: CFStringRef, range: CFRange,
                                      parBeginIndex: *mut CFIndex,
                                      parEndIndex: *mut CFIndex,
                                      contentsEndIndex: *mut CFIndex) -> ();
    pub fn CFStringGetHyphenationLocationBeforeIndex(string: CFStringRef,
                                                     location: CFIndex,
                                                     limitRange: CFRange,
                                                     options: CFOptionFlags,
                                                     locale: CFLocaleRef,
                                                     character:
                                                         *mut UTF32Char)
     -> CFIndex;
    pub fn CFStringIsHyphenationAvailableForLocale(locale: CFLocaleRef)
     -> Boolean;
    pub fn CFStringCreateByCombiningStrings(alloc: CFAllocatorRef,
                                            theArray: CFArrayRef,
                                            separatorString: CFStringRef)
     -> CFStringRef;
    pub fn CFStringCreateArrayBySeparatingStrings(alloc: CFAllocatorRef,
                                                  theString: CFStringRef,
                                                  separatorString:
                                                      CFStringRef)
     -> CFArrayRef;
    pub fn CFStringGetIntValue(str: CFStringRef) -> SInt32;
    pub fn CFStringGetDoubleValue(str: CFStringRef) -> ::libc::c_double;
    pub fn CFStringAppend(theString: CFMutableStringRef,
                          appendedString: CFStringRef) -> ();
    pub fn CFStringAppendCharacters(theString: CFMutableStringRef,
                                    chars: *const UniChar, numChars: CFIndex)
     -> ();
    pub fn CFStringAppendPascalString(theString: CFMutableStringRef,
                                      pStr: ConstStr255Param,
                                      encoding: CFStringEncoding) -> ();
    pub fn CFStringAppendCString(theString: CFMutableStringRef,
                                 cStr: *const ::libc::c_char,
                                 encoding: CFStringEncoding) -> ();
    pub fn CFStringAppendFormat(theString: CFMutableStringRef,
                                formatOptions: CFDictionaryRef,
                                format: CFStringRef, ...) -> ();
    pub fn CFStringAppendFormatAndArguments(theString: CFMutableStringRef,
                                            formatOptions: CFDictionaryRef,
                                            format: CFStringRef,
                                            arguments: va_list) -> ();
    pub fn CFStringInsert(str: CFMutableStringRef, idx: CFIndex,
                          insertedStr: CFStringRef) -> ();
    pub fn CFStringDelete(theString: CFMutableStringRef, range: CFRange)
     -> ();
    pub fn CFStringReplace(theString: CFMutableStringRef, range: CFRange,
                           replacement: CFStringRef) -> ();
    pub fn CFStringReplaceAll(theString: CFMutableStringRef,
                              replacement: CFStringRef) -> ();
    pub fn CFStringFindAndReplace(theString: CFMutableStringRef,
                                  stringToFind: CFStringRef,
                                  replacementString: CFStringRef,
                                  rangeToSearch: CFRange,
                                  compareOptions: CFStringCompareFlags)
     -> CFIndex;
    pub fn CFStringSetExternalCharactersNoCopy(theString: CFMutableStringRef,
                                               chars: *mut UniChar,
                                               length: CFIndex,
                                               capacity: CFIndex) -> ();
    pub fn CFStringPad(theString: CFMutableStringRef, padString: CFStringRef,
                       length: CFIndex, indexIntoPad: CFIndex) -> ();
    pub fn CFStringTrim(theString: CFMutableStringRef,
                        trimString: CFStringRef) -> ();
    pub fn CFStringTrimWhitespace(theString: CFMutableStringRef) -> ();
    pub fn CFStringLowercase(theString: CFMutableStringRef,
                             locale: CFLocaleRef) -> ();
    pub fn CFStringUppercase(theString: CFMutableStringRef,
                             locale: CFLocaleRef) -> ();
    pub fn CFStringCapitalize(theString: CFMutableStringRef,
                              locale: CFLocaleRef) -> ();
    pub fn CFStringNormalize(theString: CFMutableStringRef,
                             theForm: CFStringNormalizationForm) -> ();
    pub fn CFStringFold(theString: CFMutableStringRef,
                        theFlags: CFStringCompareFlags,
                        theLocale: CFLocaleRef) -> ();
    pub fn CFStringTransform(string: CFMutableStringRef, range: *mut CFRange,
                             transform: CFStringRef, reverse: Boolean)
     -> Boolean;
    pub fn CFStringIsEncodingAvailable(encoding: CFStringEncoding) -> Boolean;
    pub fn CFStringGetListOfAvailableEncodings() -> *const CFStringEncoding;
    pub fn CFStringGetNameOfEncoding(encoding: CFStringEncoding)
     -> CFStringRef;
    pub fn CFStringConvertEncodingToNSStringEncoding(encoding:
                                                         CFStringEncoding)
     -> ::libc::c_ulong;
    pub fn CFStringConvertNSStringEncodingToEncoding(encoding:
                                                         ::libc::c_ulong)
     -> CFStringEncoding;
    pub fn CFStringConvertEncodingToWindowsCodepage(encoding:
                                                        CFStringEncoding)
     -> UInt32;
    pub fn CFStringConvertWindowsCodepageToEncoding(codepage: UInt32)
     -> CFStringEncoding;
    pub fn CFStringConvertIANACharSetNameToEncoding(theString: CFStringRef)
     -> CFStringEncoding;
    pub fn CFStringConvertEncodingToIANACharSetName(encoding:
                                                        CFStringEncoding)
     -> CFStringRef;
    pub fn CFStringGetMostCompatibleMacStringEncoding(encoding:
                                                          CFStringEncoding)
     -> CFStringEncoding;
    pub fn CFShow(obj: CFTypeRef) -> ();
    pub fn CFShowStr(str: CFStringRef) -> ();
    pub fn __CFStringMakeConstantString(cStr: *const ::libc::c_char)
     -> CFStringRef;
    pub fn CFTimeZoneGetTypeID() -> CFTypeID;
    pub fn CFTimeZoneCopySystem() -> CFTimeZoneRef;
    pub fn CFTimeZoneResetSystem() -> ();
    pub fn CFTimeZoneCopyDefault() -> CFTimeZoneRef;
    pub fn CFTimeZoneSetDefault(tz: CFTimeZoneRef) -> ();
    pub fn CFTimeZoneCopyKnownNames() -> CFArrayRef;
    pub fn CFTimeZoneCopyAbbreviationDictionary() -> CFDictionaryRef;
    pub fn CFTimeZoneSetAbbreviationDictionary(dict: CFDictionaryRef) -> ();
    pub fn CFTimeZoneCreate(allocator: CFAllocatorRef, name: CFStringRef,
                            data: CFDataRef) -> CFTimeZoneRef;
    pub fn CFTimeZoneCreateWithTimeIntervalFromGMT(allocator: CFAllocatorRef,
                                                   ti: CFTimeInterval)
     -> CFTimeZoneRef;
    pub fn CFTimeZoneCreateWithName(allocator: CFAllocatorRef,
                                    name: CFStringRef, tryAbbrev: Boolean)
     -> CFTimeZoneRef;
    pub fn CFTimeZoneGetName(tz: CFTimeZoneRef) -> CFStringRef;
    pub fn CFTimeZoneGetData(tz: CFTimeZoneRef) -> CFDataRef;
    pub fn CFTimeZoneGetSecondsFromGMT(tz: CFTimeZoneRef, at: CFAbsoluteTime)
     -> CFTimeInterval;
    pub fn CFTimeZoneCopyAbbreviation(tz: CFTimeZoneRef, at: CFAbsoluteTime)
     -> CFStringRef;
    pub fn CFTimeZoneIsDaylightSavingTime(tz: CFTimeZoneRef,
                                          at: CFAbsoluteTime) -> Boolean;
    pub fn CFTimeZoneGetDaylightSavingTimeOffset(tz: CFTimeZoneRef,
                                                 at: CFAbsoluteTime)
     -> CFTimeInterval;
    pub fn CFTimeZoneGetNextDaylightSavingTimeTransition(tz: CFTimeZoneRef,
                                                         at: CFAbsoluteTime)
     -> CFAbsoluteTime;
    pub fn CFTimeZoneCopyLocalizedName(tz: CFTimeZoneRef,
                                       style: CFTimeZoneNameStyle,
                                       locale: CFLocaleRef) -> CFStringRef;
    pub fn CFCalendarGetTypeID() -> CFTypeID;
    pub fn CFCalendarCopyCurrent() -> CFCalendarRef;
    pub fn CFCalendarCreateWithIdentifier(allocator: CFAllocatorRef,
                                          identifier: CFStringRef)
     -> CFCalendarRef;
    pub fn CFCalendarGetIdentifier(calendar: CFCalendarRef) -> CFStringRef;
    pub fn CFCalendarCopyLocale(calendar: CFCalendarRef) -> CFLocaleRef;
    pub fn CFCalendarSetLocale(calendar: CFCalendarRef, locale: CFLocaleRef)
     -> ();
    pub fn CFCalendarCopyTimeZone(calendar: CFCalendarRef) -> CFTimeZoneRef;
    pub fn CFCalendarSetTimeZone(calendar: CFCalendarRef, tz: CFTimeZoneRef)
     -> ();
    pub fn CFCalendarGetFirstWeekday(calendar: CFCalendarRef) -> CFIndex;
    pub fn CFCalendarSetFirstWeekday(calendar: CFCalendarRef, wkdy: CFIndex)
     -> ();
    pub fn CFCalendarGetMinimumDaysInFirstWeek(calendar: CFCalendarRef)
     -> CFIndex;
    pub fn CFCalendarSetMinimumDaysInFirstWeek(calendar: CFCalendarRef,
                                               mwd: CFIndex) -> ();
    pub fn CFCalendarGetMinimumRangeOfUnit(calendar: CFCalendarRef,
                                           unit: CFCalendarUnit) -> CFRange;
    pub fn CFCalendarGetMaximumRangeOfUnit(calendar: CFCalendarRef,
                                           unit: CFCalendarUnit) -> CFRange;
    pub fn CFCalendarGetRangeOfUnit(calendar: CFCalendarRef,
                                    smallerUnit: CFCalendarUnit,
                                    biggerUnit: CFCalendarUnit,
                                    at: CFAbsoluteTime) -> CFRange;
    pub fn CFCalendarGetOrdinalityOfUnit(calendar: CFCalendarRef,
                                         smallerUnit: CFCalendarUnit,
                                         biggerUnit: CFCalendarUnit,
                                         at: CFAbsoluteTime) -> CFIndex;
    pub fn CFCalendarGetTimeRangeOfUnit(calendar: CFCalendarRef,
                                        unit: CFCalendarUnit,
                                        at: CFAbsoluteTime,
                                        startp: *mut CFAbsoluteTime,
                                        tip: *mut CFTimeInterval) -> Boolean;
    pub fn CFCalendarComposeAbsoluteTime(calendar: CFCalendarRef,
                                         at: *mut CFAbsoluteTime,
                                         componentDesc:
                                             *const ::libc::c_char, ...)
     -> Boolean;
    pub fn CFCalendarDecomposeAbsoluteTime(calendar: CFCalendarRef,
                                           at: CFAbsoluteTime,
                                           componentDesc:
                                               *const ::libc::c_char, ...)
     -> Boolean;
    pub fn CFCalendarAddComponents(calendar: CFCalendarRef,
                                   at: *mut CFAbsoluteTime,
                                   options: CFOptionFlags,
                                   componentDesc: *const ::libc::c_char, ...)
     -> Boolean;
    pub fn CFCalendarGetComponentDifference(calendar: CFCalendarRef,
                                            startingAT: CFAbsoluteTime,
                                            resultAT: CFAbsoluteTime,
                                            options: CFOptionFlags,
                                            componentDesc:
                                                *const ::libc::c_char, ...)
     -> Boolean;
    pub fn CFDateFormatterCreateDateFormatFromTemplate(allocator:
                                                           CFAllocatorRef,
                                                       tmplate: CFStringRef,
                                                       options: CFOptionFlags,
                                                       locale: CFLocaleRef)
     -> CFStringRef;
    pub fn CFDateFormatterGetTypeID() -> CFTypeID;
    pub fn CFDateFormatterCreate(allocator: CFAllocatorRef,
                                 locale: CFLocaleRef,
                                 dateStyle: CFDateFormatterStyle,
                                 timeStyle: CFDateFormatterStyle)
     -> CFDateFormatterRef;
    pub fn CFDateFormatterGetLocale(formatter: CFDateFormatterRef)
     -> CFLocaleRef;
    pub fn CFDateFormatterGetDateStyle(formatter: CFDateFormatterRef)
     -> CFDateFormatterStyle;
    pub fn CFDateFormatterGetTimeStyle(formatter: CFDateFormatterRef)
     -> CFDateFormatterStyle;
    pub fn CFDateFormatterGetFormat(formatter: CFDateFormatterRef)
     -> CFStringRef;
    pub fn CFDateFormatterSetFormat(formatter: CFDateFormatterRef,
                                    formatString: CFStringRef) -> ();
    pub fn CFDateFormatterCreateStringWithDate(allocator: CFAllocatorRef,
                                               formatter: CFDateFormatterRef,
                                               date: CFDateRef)
     -> CFStringRef;
    pub fn CFDateFormatterCreateStringWithAbsoluteTime(allocator:
                                                           CFAllocatorRef,
                                                       formatter:
                                                           CFDateFormatterRef,
                                                       at: CFAbsoluteTime)
     -> CFStringRef;
    pub fn CFDateFormatterCreateDateFromString(allocator: CFAllocatorRef,
                                               formatter: CFDateFormatterRef,
                                               string: CFStringRef,
                                               rangep: *mut CFRange)
     -> CFDateRef;
    pub fn CFDateFormatterGetAbsoluteTimeFromString(formatter:
                                                        CFDateFormatterRef,
                                                    string: CFStringRef,
                                                    rangep: *mut CFRange,
                                                    atp: *mut CFAbsoluteTime)
     -> Boolean;
    pub fn CFDateFormatterSetProperty(formatter: CFDateFormatterRef,
                                      key: CFStringRef, value: CFTypeRef)
     -> ();
    pub fn CFDateFormatterCopyProperty(formatter: CFDateFormatterRef,
                                       key: CFStringRef) -> CFTypeRef;
    pub fn CFErrorGetTypeID() -> CFTypeID;
    pub fn CFErrorCreate(allocator: CFAllocatorRef, domain: CFStringRef,
                         code: CFIndex, userInfo: CFDictionaryRef)
     -> CFErrorRef;
    pub fn CFErrorCreateWithUserInfoKeysAndValues(allocator: CFAllocatorRef,
                                                  domain: CFStringRef,
                                                  code: CFIndex,
                                                  userInfoKeys:
                                                      *const *const ::libc::c_void,
                                                  userInfoValues:
                                                      *const *const ::libc::c_void,
                                                  numUserInfoValues: CFIndex)
     -> CFErrorRef;
    pub fn CFErrorGetDomain(err: CFErrorRef) -> CFStringRef;
    pub fn CFErrorGetCode(err: CFErrorRef) -> CFIndex;
    pub fn CFErrorCopyUserInfo(err: CFErrorRef) -> CFDictionaryRef;
    pub fn CFErrorCopyDescription(err: CFErrorRef) -> CFStringRef;
    pub fn CFErrorCopyFailureReason(err: CFErrorRef) -> CFStringRef;
    pub fn CFErrorCopyRecoverySuggestion(err: CFErrorRef) -> CFStringRef;
    pub fn CFBooleanGetTypeID() -> CFTypeID;
    pub fn CFBooleanGetValue(boolean: CFBooleanRef) -> Boolean;
    pub fn CFNumberGetTypeID() -> CFTypeID;
    pub fn CFNumberCreate(allocator: CFAllocatorRef, theType: CFNumberType,
                          valuePtr: *const ::libc::c_void) -> CFNumberRef;
    pub fn CFNumberGetType(number: CFNumberRef) -> CFNumberType;
    pub fn CFNumberGetByteSize(number: CFNumberRef) -> CFIndex;
    pub fn CFNumberIsFloatType(number: CFNumberRef) -> Boolean;
    pub fn CFNumberGetValue(number: CFNumberRef, theType: CFNumberType,
                            valuePtr: *mut ::libc::c_void) -> Boolean;
    pub fn CFNumberCompare(number: CFNumberRef, otherNumber: CFNumberRef,
                           context: *mut ::libc::c_void)
     -> CFComparisonResult;
    pub fn CFNumberFormatterGetTypeID() -> CFTypeID;
    pub fn CFNumberFormatterCreate(allocator: CFAllocatorRef,
                                   locale: CFLocaleRef,
                                   style: CFNumberFormatterStyle)
     -> CFNumberFormatterRef;
    pub fn CFNumberFormatterGetLocale(formatter: CFNumberFormatterRef)
     -> CFLocaleRef;
    pub fn CFNumberFormatterGetStyle(formatter: CFNumberFormatterRef)
     -> CFNumberFormatterStyle;
    pub fn CFNumberFormatterGetFormat(formatter: CFNumberFormatterRef)
     -> CFStringRef;
    pub fn CFNumberFormatterSetFormat(formatter: CFNumberFormatterRef,
                                      formatString: CFStringRef) -> ();
    pub fn CFNumberFormatterCreateStringWithNumber(allocator: CFAllocatorRef,
                                                   formatter:
                                                       CFNumberFormatterRef,
                                                   number: CFNumberRef)
     -> CFStringRef;
    pub fn CFNumberFormatterCreateStringWithValue(allocator: CFAllocatorRef,
                                                  formatter:
                                                      CFNumberFormatterRef,
                                                  numberType: CFNumberType,
                                                  valuePtr:
                                                      *const ::libc::c_void)
     -> CFStringRef;
    pub fn CFNumberFormatterCreateNumberFromString(allocator: CFAllocatorRef,
                                                   formatter:
                                                       CFNumberFormatterRef,
                                                   string: CFStringRef,
                                                   rangep: *mut CFRange,
                                                   options: CFOptionFlags)
     -> CFNumberRef;
    pub fn CFNumberFormatterGetValueFromString(formatter:
                                                   CFNumberFormatterRef,
                                               string: CFStringRef,
                                               rangep: *mut CFRange,
                                               numberType: CFNumberType,
                                               valuePtr: *mut ::libc::c_void)
     -> Boolean;
    pub fn CFNumberFormatterSetProperty(formatter: CFNumberFormatterRef,
                                        key: CFStringRef, value: CFTypeRef)
     -> ();
    pub fn CFNumberFormatterCopyProperty(formatter: CFNumberFormatterRef,
                                         key: CFStringRef) -> CFTypeRef;
    pub fn CFNumberFormatterGetDecimalInfoForCurrencyCode(currencyCode:
                                                              CFStringRef,
                                                          defaultFractionDigits:
                                                              *mut int32_t,
                                                          roundingIncrement:
                                                              *mut ::libc::c_double)
     -> Boolean;
    pub fn CFPreferencesCopyAppValue(key: CFStringRef,
                                     applicationID: CFStringRef)
     -> CFPropertyListRef;
    pub fn CFPreferencesGetAppBooleanValue(key: CFStringRef,
                                           applicationID: CFStringRef,
                                           keyExistsAndHasValidFormat:
                                               *mut Boolean) -> Boolean;
    pub fn CFPreferencesGetAppIntegerValue(key: CFStringRef,
                                           applicationID: CFStringRef,
                                           keyExistsAndHasValidFormat:
                                               *mut Boolean) -> CFIndex;
    pub fn CFPreferencesSetAppValue(key: CFStringRef,
                                    value: CFPropertyListRef,
                                    applicationID: CFStringRef) -> ();
    pub fn CFPreferencesAddSuitePreferencesToApp(applicationID: CFStringRef,
                                                 suiteID: CFStringRef) -> ();
    pub fn CFPreferencesRemoveSuitePreferencesFromApp(applicationID:
                                                          CFStringRef,
                                                      suiteID: CFStringRef)
     -> ();
    pub fn CFPreferencesAppSynchronize(applicationID: CFStringRef) -> Boolean;
    pub fn CFPreferencesCopyValue(key: CFStringRef,
                                  applicationID: CFStringRef,
                                  userName: CFStringRef,
                                  hostName: CFStringRef) -> CFPropertyListRef;
    pub fn CFPreferencesCopyMultiple(keysToFetch: CFArrayRef,
                                     applicationID: CFStringRef,
                                     userName: CFStringRef,
                                     hostName: CFStringRef)
     -> CFDictionaryRef;
    pub fn CFPreferencesSetValue(key: CFStringRef, value: CFPropertyListRef,
                                 applicationID: CFStringRef,
                                 userName: CFStringRef, hostName: CFStringRef)
     -> ();
    pub fn CFPreferencesSetMultiple(keysToSet: CFDictionaryRef,
                                    keysToRemove: CFArrayRef,
                                    applicationID: CFStringRef,
                                    userName: CFStringRef,
                                    hostName: CFStringRef) -> ();
    pub fn CFPreferencesSynchronize(applicationID: CFStringRef,
                                    userName: CFStringRef,
                                    hostName: CFStringRef) -> Boolean;
    pub fn CFPreferencesCopyApplicationList(userName: CFStringRef,
                                            hostName: CFStringRef)
     -> CFArrayRef;
    pub fn CFPreferencesCopyKeyList(applicationID: CFStringRef,
                                    userName: CFStringRef,
                                    hostName: CFStringRef) -> CFArrayRef;
    pub fn CFPreferencesAppValueIsForced(key: CFStringRef,
                                         applicationID: CFStringRef)
     -> Boolean;
    pub fn CFURLGetTypeID() -> CFTypeID;
    pub fn CFURLCreateWithBytes(allocator: CFAllocatorRef,
                                URLBytes: *const UInt8, length: CFIndex,
                                encoding: CFStringEncoding, baseURL: CFURLRef)
     -> CFURLRef;
    pub fn CFURLCreateData(allocator: CFAllocatorRef, url: CFURLRef,
                           encoding: CFStringEncoding,
                           escapeWhitespace: Boolean) -> CFDataRef;
    pub fn CFURLCreateWithString(allocator: CFAllocatorRef,
                                 URLString: CFStringRef, baseURL: CFURLRef)
     -> CFURLRef;
    pub fn CFURLCreateAbsoluteURLWithBytes(alloc: CFAllocatorRef,
                                           relativeURLBytes: *const UInt8,
                                           length: CFIndex,
                                           encoding: CFStringEncoding,
                                           baseURL: CFURLRef,
                                           useCompatibilityMode: Boolean)
     -> CFURLRef;
    pub fn CFURLCreateWithFileSystemPath(allocator: CFAllocatorRef,
                                         filePath: CFStringRef,
                                         pathStyle: CFURLPathStyle,
                                         isDirectory: Boolean) -> CFURLRef;
    pub fn CFURLCreateFromFileSystemRepresentation(allocator: CFAllocatorRef,
                                                   buffer: *const UInt8,
                                                   bufLen: CFIndex,
                                                   isDirectory: Boolean)
     -> CFURLRef;
    pub fn CFURLCreateWithFileSystemPathRelativeToBase(allocator:
                                                           CFAllocatorRef,
                                                       filePath: CFStringRef,
                                                       pathStyle:
                                                           CFURLPathStyle,
                                                       isDirectory: Boolean,
                                                       baseURL: CFURLRef)
     -> CFURLRef;
    pub fn CFURLCreateFromFileSystemRepresentationRelativeToBase(allocator:
                                                                     CFAllocatorRef,
                                                                 buffer:
                                                                     *const UInt8,
                                                                 bufLen:
                                                                     CFIndex,
                                                                 isDirectory:
                                                                     Boolean,
                                                                 baseURL:
                                                                     CFURLRef)
     -> CFURLRef;
    pub fn CFURLGetFileSystemRepresentation(url: CFURLRef,
                                            resolveAgainstBase: Boolean,
                                            buffer: *mut UInt8,
                                            maxBufLen: CFIndex) -> Boolean;
    pub fn CFURLCopyAbsoluteURL(relativeURL: CFURLRef) -> CFURLRef;
    pub fn CFURLGetString(anURL: CFURLRef) -> CFStringRef;
    pub fn CFURLGetBaseURL(anURL: CFURLRef) -> CFURLRef;
    pub fn CFURLCanBeDecomposed(anURL: CFURLRef) -> Boolean;
    pub fn CFURLCopyScheme(anURL: CFURLRef) -> CFStringRef;
    pub fn CFURLCopyNetLocation(anURL: CFURLRef) -> CFStringRef;
    pub fn CFURLCopyPath(anURL: CFURLRef) -> CFStringRef;
    pub fn CFURLCopyStrictPath(anURL: CFURLRef, isAbsolute: *mut Boolean)
     -> CFStringRef;
    pub fn CFURLCopyFileSystemPath(anURL: CFURLRef, pathStyle: CFURLPathStyle)
     -> CFStringRef;
    pub fn CFURLHasDirectoryPath(anURL: CFURLRef) -> Boolean;
    pub fn CFURLCopyResourceSpecifier(anURL: CFURLRef) -> CFStringRef;
    pub fn CFURLCopyHostName(anURL: CFURLRef) -> CFStringRef;
    pub fn CFURLGetPortNumber(anURL: CFURLRef) -> SInt32;
    pub fn CFURLCopyUserName(anURL: CFURLRef) -> CFStringRef;
    pub fn CFURLCopyPassword(anURL: CFURLRef) -> CFStringRef;
    pub fn CFURLCopyParameterString(anURL: CFURLRef,
                                    charactersToLeaveEscaped: CFStringRef)
     -> CFStringRef;
    pub fn CFURLCopyQueryString(anURL: CFURLRef,
                                charactersToLeaveEscaped: CFStringRef)
     -> CFStringRef;
    pub fn CFURLCopyFragment(anURL: CFURLRef,
                             charactersToLeaveEscaped: CFStringRef)
     -> CFStringRef;
    pub fn CFURLCopyLastPathComponent(url: CFURLRef) -> CFStringRef;
    pub fn CFURLCopyPathExtension(url: CFURLRef) -> CFStringRef;
    pub fn CFURLCreateCopyAppendingPathComponent(allocator: CFAllocatorRef,
                                                 url: CFURLRef,
                                                 pathComponent: CFStringRef,
                                                 isDirectory: Boolean)
     -> CFURLRef;
    pub fn CFURLCreateCopyDeletingLastPathComponent(allocator: CFAllocatorRef,
                                                    url: CFURLRef)
     -> CFURLRef;
    pub fn CFURLCreateCopyAppendingPathExtension(allocator: CFAllocatorRef,
                                                 url: CFURLRef,
                                                 extension: CFStringRef)
     -> CFURLRef;
    pub fn CFURLCreateCopyDeletingPathExtension(allocator: CFAllocatorRef,
                                                url: CFURLRef) -> CFURLRef;
    pub fn CFURLGetBytes(url: CFURLRef, buffer: *mut UInt8,
                         bufferLength: CFIndex) -> CFIndex;
    pub fn CFURLGetByteRangeForComponent(url: CFURLRef,
                                         component: CFURLComponentType,
                                         rangeIncludingSeparators:
                                             *mut CFRange) -> CFRange;
    pub fn CFURLCreateStringByReplacingPercentEscapes(allocator:
                                                          CFAllocatorRef,
                                                      originalString:
                                                          CFStringRef,
                                                      charactersToLeaveEscaped:
                                                          CFStringRef)
     -> CFStringRef;
    pub fn CFURLCreateStringByReplacingPercentEscapesUsingEncoding(allocator:
                                                                       CFAllocatorRef,
                                                                   origString:
                                                                       CFStringRef,
                                                                   charsToLeaveEscaped:
                                                                       CFStringRef,
                                                                   encoding:
                                                                       CFStringEncoding)
     -> CFStringRef;
    pub fn CFURLCreateStringByAddingPercentEscapes(allocator: CFAllocatorRef,
                                                   originalString:
                                                       CFStringRef,
                                                   charactersToLeaveUnescaped:
                                                       CFStringRef,
                                                   legalURLCharactersToBeEscaped:
                                                       CFStringRef,
                                                   encoding: CFStringEncoding)
     -> CFStringRef;
    pub fn CFURLIsFileReferenceURL(url: CFURLRef) -> Boolean;
    pub fn CFURLCreateFileReferenceURL(allocator: CFAllocatorRef,
                                       url: CFURLRef, error: *mut CFErrorRef)
     -> CFURLRef;
    pub fn CFURLCreateFilePathURL(allocator: CFAllocatorRef, url: CFURLRef,
                                  error: *mut CFErrorRef) -> CFURLRef;
    pub fn CFURLCreateFromFSRef(allocator: CFAllocatorRef,
                                fsRef: *const Struct_FSRef) -> CFURLRef;
    pub fn CFURLGetFSRef(url: CFURLRef, fsRef: *mut Struct_FSRef) -> Boolean;
    pub fn CFURLCopyResourcePropertyForKey(url: CFURLRef, key: CFStringRef,
                                           propertyValueTypeRefPtr:
                                               *mut ::libc::c_void,
                                           error: *mut CFErrorRef) -> Boolean;
    pub fn CFURLCopyResourcePropertiesForKeys(url: CFURLRef, keys: CFArrayRef,
                                              error: *mut CFErrorRef)
     -> CFDictionaryRef;
    pub fn CFURLSetResourcePropertyForKey(url: CFURLRef, key: CFStringRef,
                                          propertyValue: CFTypeRef,
                                          error: *mut CFErrorRef) -> Boolean;
    pub fn CFURLSetResourcePropertiesForKeys(url: CFURLRef,
                                             keyedPropertyValues:
                                                 CFDictionaryRef,
                                             error: *mut CFErrorRef)
     -> Boolean;
    pub fn CFURLClearResourcePropertyCacheForKey(url: CFURLRef,
                                                 key: CFStringRef) -> ();
    pub fn CFURLClearResourcePropertyCache(url: CFURLRef) -> ();
    pub fn CFURLSetTemporaryResourcePropertyForKey(url: CFURLRef,
                                                   key: CFStringRef,
                                                   propertyValue: CFTypeRef)
     -> ();
    pub fn CFURLResourceIsReachable(url: CFURLRef, error: *mut CFErrorRef)
     -> Boolean;
    pub fn CFURLCreateBookmarkData(allocator: CFAllocatorRef, url: CFURLRef,
                                   options: CFURLBookmarkCreationOptions,
                                   resourcePropertiesToInclude: CFArrayRef,
                                   relativeToURL: CFURLRef,
                                   error: *mut CFErrorRef) -> CFDataRef;
    pub fn CFURLCreateByResolvingBookmarkData(allocator: CFAllocatorRef,
                                              bookmark: CFDataRef,
                                              options:
                                                  CFURLBookmarkResolutionOptions,
                                              relativeToURL: CFURLRef,
                                              resourcePropertiesToInclude:
                                                  CFArrayRef,
                                              isStale: *mut Boolean,
                                              error: *mut CFErrorRef)
     -> CFURLRef;
    pub fn CFURLCreateResourcePropertiesForKeysFromBookmarkData(allocator:
                                                                    CFAllocatorRef,
                                                                resourcePropertiesToReturn:
                                                                    CFArrayRef,
                                                                bookmark:
                                                                    CFDataRef)
     -> CFDictionaryRef;
    pub fn CFURLCreateResourcePropertyForKeyFromBookmarkData(allocator:
                                                                 CFAllocatorRef,
                                                             resourcePropertyKey:
                                                                 CFStringRef,
                                                             bookmark:
                                                                 CFDataRef)
     -> CFTypeRef;
    pub fn CFURLCreateBookmarkDataFromFile(allocator: CFAllocatorRef,
                                           fileURL: CFURLRef,
                                           errorRef: *mut CFErrorRef)
     -> CFDataRef;
    pub fn CFURLWriteBookmarkDataToFile(bookmarkRef: CFDataRef,
                                        fileURL: CFURLRef,
                                        options:
                                            CFURLBookmarkFileCreationOptions,
                                        errorRef: *mut CFErrorRef) -> Boolean;
    pub fn CFURLCreateBookmarkDataFromAliasRecord(allocatorRef:
                                                      CFAllocatorRef,
                                                  aliasRecordDataRef:
                                                      CFDataRef) -> CFDataRef;
    pub fn CFURLStartAccessingSecurityScopedResource(url: CFURLRef)
     -> Boolean;
    pub fn CFURLStopAccessingSecurityScopedResource(url: CFURLRef) -> ();
    pub fn CFRunLoopGetTypeID() -> CFTypeID;
    pub fn CFRunLoopGetCurrent() -> CFRunLoopRef;
    pub fn CFRunLoopGetMain() -> CFRunLoopRef;
    pub fn CFRunLoopCopyCurrentMode(rl: CFRunLoopRef) -> CFStringRef;
    pub fn CFRunLoopCopyAllModes(rl: CFRunLoopRef) -> CFArrayRef;
    pub fn CFRunLoopAddCommonMode(rl: CFRunLoopRef, mode: CFStringRef) -> ();
    pub fn CFRunLoopGetNextTimerFireDate(rl: CFRunLoopRef, mode: CFStringRef)
     -> CFAbsoluteTime;
    pub fn CFRunLoopRun() -> ();
    pub fn CFRunLoopRunInMode(mode: CFStringRef, seconds: CFTimeInterval,
                              returnAfterSourceHandled: Boolean) -> SInt32;
    pub fn CFRunLoopIsWaiting(rl: CFRunLoopRef) -> Boolean;
    pub fn CFRunLoopWakeUp(rl: CFRunLoopRef) -> ();
    pub fn CFRunLoopStop(rl: CFRunLoopRef) -> ();
    pub fn CFRunLoopPerformBlock(rl: CFRunLoopRef, mode: CFTypeRef,
                                 block: ::libc::c_void) -> ();
    pub fn CFRunLoopContainsSource(rl: CFRunLoopRef,
                                   source: CFRunLoopSourceRef,
                                   mode: CFStringRef) -> Boolean;
    pub fn CFRunLoopAddSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef,
                              mode: CFStringRef) -> ();
    pub fn CFRunLoopRemoveSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef,
                                 mode: CFStringRef) -> ();
    pub fn CFRunLoopContainsObserver(rl: CFRunLoopRef,
                                     observer: CFRunLoopObserverRef,
                                     mode: CFStringRef) -> Boolean;
    pub fn CFRunLoopAddObserver(rl: CFRunLoopRef,
                                observer: CFRunLoopObserverRef,
                                mode: CFStringRef) -> ();
    pub fn CFRunLoopRemoveObserver(rl: CFRunLoopRef,
                                   observer: CFRunLoopObserverRef,
                                   mode: CFStringRef) -> ();
    pub fn CFRunLoopContainsTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef,
                                  mode: CFStringRef) -> Boolean;
    pub fn CFRunLoopAddTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef,
                             mode: CFStringRef) -> ();
    pub fn CFRunLoopRemoveTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef,
                                mode: CFStringRef) -> ();
    pub fn CFRunLoopSourceGetTypeID() -> CFTypeID;
    pub fn CFRunLoopSourceCreate(allocator: CFAllocatorRef, order: CFIndex,
                                 context: *mut CFRunLoopSourceContext)
     -> CFRunLoopSourceRef;
    pub fn CFRunLoopSourceGetOrder(source: CFRunLoopSourceRef) -> CFIndex;
    pub fn CFRunLoopSourceInvalidate(source: CFRunLoopSourceRef) -> ();
    pub fn CFRunLoopSourceIsValid(source: CFRunLoopSourceRef) -> Boolean;
    pub fn CFRunLoopSourceGetContext(source: CFRunLoopSourceRef,
                                     context: *mut CFRunLoopSourceContext)
     -> ();
    pub fn CFRunLoopSourceSignal(source: CFRunLoopSourceRef) -> ();
    pub fn CFRunLoopObserverGetTypeID() -> CFTypeID;
    pub fn CFRunLoopObserverCreate(allocator: CFAllocatorRef,
                                   activities: CFOptionFlags,
                                   repeats: Boolean, order: CFIndex,
                                   callout: CFRunLoopObserverCallBack,
                                   context: *mut CFRunLoopObserverContext)
     -> CFRunLoopObserverRef;
    pub fn CFRunLoopObserverCreateWithHandler(allocator: CFAllocatorRef,
                                              activities: CFOptionFlags,
                                              repeats: Boolean,
                                              order: CFIndex,
                                              block: ::libc::c_void)
     -> CFRunLoopObserverRef;
    pub fn CFRunLoopObserverGetActivities(observer: CFRunLoopObserverRef)
     -> CFOptionFlags;
    pub fn CFRunLoopObserverDoesRepeat(observer: CFRunLoopObserverRef)
     -> Boolean;
    pub fn CFRunLoopObserverGetOrder(observer: CFRunLoopObserverRef)
     -> CFIndex;
    pub fn CFRunLoopObserverInvalidate(observer: CFRunLoopObserverRef) -> ();
    pub fn CFRunLoopObserverIsValid(observer: CFRunLoopObserverRef)
     -> Boolean;
    pub fn CFRunLoopObserverGetContext(observer: CFRunLoopObserverRef,
                                       context: *mut CFRunLoopObserverContext)
     -> ();
    pub fn CFRunLoopTimerGetTypeID() -> CFTypeID;
    pub fn CFRunLoopTimerCreate(allocator: CFAllocatorRef,
                                fireDate: CFAbsoluteTime,
                                interval: CFTimeInterval,
                                flags: CFOptionFlags, order: CFIndex,
                                callout: CFRunLoopTimerCallBack,
                                context: *mut CFRunLoopTimerContext)
     -> CFRunLoopTimerRef;
    pub fn CFRunLoopTimerCreateWithHandler(allocator: CFAllocatorRef,
                                           fireDate: CFAbsoluteTime,
                                           interval: CFTimeInterval,
                                           flags: CFOptionFlags,
                                           order: CFIndex,
                                           block: ::libc::c_void)
     -> CFRunLoopTimerRef;
    pub fn CFRunLoopTimerGetNextFireDate(timer: CFRunLoopTimerRef)
     -> CFAbsoluteTime;
    pub fn CFRunLoopTimerSetNextFireDate(timer: CFRunLoopTimerRef,
                                         fireDate: CFAbsoluteTime) -> ();
    pub fn CFRunLoopTimerGetInterval(timer: CFRunLoopTimerRef)
     -> CFTimeInterval;
    pub fn CFRunLoopTimerDoesRepeat(timer: CFRunLoopTimerRef) -> Boolean;
    pub fn CFRunLoopTimerGetOrder(timer: CFRunLoopTimerRef) -> CFIndex;
    pub fn CFRunLoopTimerInvalidate(timer: CFRunLoopTimerRef) -> ();
    pub fn CFRunLoopTimerIsValid(timer: CFRunLoopTimerRef) -> Boolean;
    pub fn CFRunLoopTimerGetContext(timer: CFRunLoopTimerRef,
                                    context: *mut CFRunLoopTimerContext)
     -> ();
    pub fn CFRunLoopTimerGetTolerance(timer: CFRunLoopTimerRef)
     -> CFTimeInterval;
    pub fn CFRunLoopTimerSetTolerance(timer: CFRunLoopTimerRef,
                                      tolerance: CFTimeInterval) -> ();
    pub fn CFSocketGetTypeID() -> CFTypeID;
    pub fn CFSocketCreate(allocator: CFAllocatorRef, protocolFamily: SInt32,
                          socketType: SInt32, protocol: SInt32,
                          callBackTypes: CFOptionFlags,
                          callout: CFSocketCallBack,
                          context: *const CFSocketContext) -> CFSocketRef;
    pub fn CFSocketCreateWithNative(allocator: CFAllocatorRef,
                                    sock: CFSocketNativeHandle,
                                    callBackTypes: CFOptionFlags,
                                    callout: CFSocketCallBack,
                                    context: *const CFSocketContext)
     -> CFSocketRef;
    pub fn CFSocketCreateWithSocketSignature(allocator: CFAllocatorRef,
                                             signature:
                                                 *const CFSocketSignature,
                                             callBackTypes: CFOptionFlags,
                                             callout: CFSocketCallBack,
                                             context: *const CFSocketContext)
     -> CFSocketRef;
    pub fn CFSocketCreateConnectedToSocketSignature(allocator: CFAllocatorRef,
                                                    signature:
                                                        *const CFSocketSignature,
                                                    callBackTypes:
                                                        CFOptionFlags,
                                                    callout: CFSocketCallBack,
                                                    context:
                                                        *const CFSocketContext,
                                                    timeout: CFTimeInterval)
     -> CFSocketRef;
    pub fn CFSocketSetAddress(s: CFSocketRef, address: CFDataRef)
     -> CFSocketError;
    pub fn CFSocketConnectToAddress(s: CFSocketRef, address: CFDataRef,
                                    timeout: CFTimeInterval) -> CFSocketError;
    pub fn CFSocketInvalidate(s: CFSocketRef) -> ();
    pub fn CFSocketIsValid(s: CFSocketRef) -> Boolean;
    pub fn CFSocketCopyAddress(s: CFSocketRef) -> CFDataRef;
    pub fn CFSocketCopyPeerAddress(s: CFSocketRef) -> CFDataRef;
    pub fn CFSocketGetContext(s: CFSocketRef, context: *mut CFSocketContext)
     -> ();
    pub fn CFSocketGetNative(s: CFSocketRef) -> CFSocketNativeHandle;
    pub fn CFSocketCreateRunLoopSource(allocator: CFAllocatorRef,
                                       s: CFSocketRef, order: CFIndex)
     -> CFRunLoopSourceRef;
    pub fn CFSocketGetSocketFlags(s: CFSocketRef) -> CFOptionFlags;
    pub fn CFSocketSetSocketFlags(s: CFSocketRef, flags: CFOptionFlags) -> ();
    pub fn CFSocketDisableCallBacks(s: CFSocketRef,
                                    callBackTypes: CFOptionFlags) -> ();
    pub fn CFSocketEnableCallBacks(s: CFSocketRef,
                                   callBackTypes: CFOptionFlags) -> ();
    pub fn CFSocketSendData(s: CFSocketRef, address: CFDataRef,
                            data: CFDataRef, timeout: CFTimeInterval)
     -> CFSocketError;
    pub fn CFSocketRegisterValue(nameServerSignature:
                                     *const CFSocketSignature,
                                 timeout: CFTimeInterval, name: CFStringRef,
                                 value: CFPropertyListRef) -> CFSocketError;
    pub fn CFSocketCopyRegisteredValue(nameServerSignature:
                                           *const CFSocketSignature,
                                       timeout: CFTimeInterval,
                                       name: CFStringRef,
                                       value: *mut CFPropertyListRef,
                                       nameServerAddress: *mut CFDataRef)
     -> CFSocketError;
    pub fn CFSocketRegisterSocketSignature(nameServerSignature:
                                               *const CFSocketSignature,
                                           timeout: CFTimeInterval,
                                           name: CFStringRef,
                                           signature:
                                               *const CFSocketSignature)
     -> CFSocketError;
    pub fn CFSocketCopyRegisteredSocketSignature(nameServerSignature:
                                                     *const CFSocketSignature,
                                                 timeout: CFTimeInterval,
                                                 name: CFStringRef,
                                                 signature:
                                                     *mut CFSocketSignature,
                                                 nameServerAddress:
                                                     *mut CFDataRef)
     -> CFSocketError;
    pub fn CFSocketUnregister(nameServerSignature: *const CFSocketSignature,
                              timeout: CFTimeInterval, name: CFStringRef)
     -> CFSocketError;
    pub fn CFSocketSetDefaultNameRegistryPortNumber(port: UInt16) -> ();
    pub fn CFSocketGetDefaultNameRegistryPortNumber() -> UInt16;
    pub fn getattrlistbulk(arg1: ::libc::c_int, arg2: *mut ::libc::c_void,
                           arg3: *mut ::libc::c_void, arg4: size_t,
                           arg5: uint64_t) -> ::libc::c_int;
    pub fn faccessat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                     arg3: ::libc::c_int, arg4: ::libc::c_int)
     -> ::libc::c_int;
    pub fn fchownat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                    arg3: uid_t, arg4: gid_t, arg5: ::libc::c_int)
     -> ::libc::c_int;
    pub fn linkat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                  arg3: ::libc::c_int, arg4: *const ::libc::c_char,
                  arg5: ::libc::c_int) -> ::libc::c_int;
    pub fn readlinkat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                      arg3: *mut ::libc::c_char, arg4: size_t) -> ssize_t;
    pub fn symlinkat(arg1: *const ::libc::c_char, arg2: ::libc::c_int,
                     arg3: *const ::libc::c_char) -> ::libc::c_int;
    pub fn unlinkat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                    arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn getattrlistat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                         arg3: *mut ::libc::c_void, arg4: *mut ::libc::c_void,
                         arg5: size_t, arg6: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn _exit(arg1: ::libc::c_int) -> ();
    pub fn access(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn alarm(arg1: ::libc::c_uint) -> ::libc::c_uint;
    pub fn chdir(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn chown(arg1: *const ::libc::c_char, arg2: uid_t, arg3: gid_t)
     -> ::libc::c_int;
    pub fn close(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn dup(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn dup2(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn execl(arg1: *const ::libc::c_char,
                 arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn execle(arg1: *const ::libc::c_char,
                  arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn execlp(arg1: *const ::libc::c_char,
                  arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn execv(arg1: *const ::libc::c_char,
                 arg2: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn execve(arg1: *const ::libc::c_char,
                  arg2: *const *mut ::libc::c_char,
                  arg3: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn execvp(arg1: *const ::libc::c_char,
                  arg2: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn fork() -> pid_t;
    pub fn fpathconf(arg1: ::libc::c_int, arg2: ::libc::c_int)
     -> ::libc::c_long;
    pub fn getcwd(arg1: *mut ::libc::c_char, arg2: size_t)
     -> *mut ::libc::c_char;
    pub fn getegid() -> gid_t;
    pub fn geteuid() -> uid_t;
    pub fn getgid() -> gid_t;
    pub fn getgroups(arg1: ::libc::c_int, arg2: *mut gid_t) -> ::libc::c_int;
    pub fn getlogin() -> *mut ::libc::c_char;
    pub fn getpgrp() -> pid_t;
    pub fn getpid() -> pid_t;
    pub fn getppid() -> pid_t;
    pub fn getuid() -> uid_t;
    pub fn isatty(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn link(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn lseek(arg1: ::libc::c_int, arg2: off_t, arg3: ::libc::c_int)
     -> off_t;
    pub fn pathconf(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_long;
    pub fn pause() -> ::libc::c_int;
    pub fn pipe(arg1: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn read(arg1: ::libc::c_int, arg2: *mut ::libc::c_void, arg3: size_t)
     -> ssize_t;
    pub fn rmdir(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn setgid(arg1: gid_t) -> ::libc::c_int;
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::libc::c_int;
    pub fn setsid() -> pid_t;
    pub fn setuid(arg1: uid_t) -> ::libc::c_int;
    pub fn sleep(arg1: ::libc::c_uint) -> ::libc::c_uint;
    pub fn sysconf(arg1: ::libc::c_int) -> ::libc::c_long;
    pub fn tcgetpgrp(arg1: ::libc::c_int) -> pid_t;
    pub fn tcsetpgrp(arg1: ::libc::c_int, arg2: pid_t) -> ::libc::c_int;
    pub fn ttyname(arg1: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn ttyname_r(arg1: ::libc::c_int, arg2: *mut ::libc::c_char,
                     arg3: size_t) -> ::libc::c_int;
    pub fn unlink(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn write(arg1: ::libc::c_int, arg2: *const ::libc::c_void,
                 arg3: size_t) -> ssize_t;
    pub fn confstr(arg1: ::libc::c_int, arg2: *mut ::libc::c_char,
                   arg3: size_t) -> size_t;
    pub fn getopt(arg1: ::libc::c_int, arg2: *const *mut ::libc::c_char,
                  arg3: *const ::libc::c_char) -> ::libc::c_int;
    pub fn brk(arg1: *const ::libc::c_void) -> *mut ::libc::c_void;
    pub fn chroot(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn crypt(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn encrypt(arg1: *mut ::libc::c_char, arg2: ::libc::c_int) -> ();
    pub fn fchdir(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn gethostid() -> ::libc::c_long;
    pub fn getpgid(arg1: pid_t) -> pid_t;
    pub fn getsid(arg1: pid_t) -> pid_t;
    pub fn getdtablesize() -> ::libc::c_int;
    pub fn getpagesize() -> ::libc::c_int;
    pub fn getpass(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn getwd(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn lchown(arg1: *const ::libc::c_char, arg2: uid_t, arg3: gid_t)
     -> ::libc::c_int;
    pub fn lockf(arg1: ::libc::c_int, arg2: ::libc::c_int, arg3: off_t)
     -> ::libc::c_int;
    pub fn nice(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn pread(arg1: ::libc::c_int, arg2: *mut ::libc::c_void, arg3: size_t,
                 arg4: off_t) -> ssize_t;
    pub fn pwrite(arg1: ::libc::c_int, arg2: *const ::libc::c_void,
                  arg3: size_t, arg4: off_t) -> ssize_t;
    pub fn sbrk(arg1: ::libc::c_int) -> *mut ::libc::c_void;
    pub fn setpgrp() -> pid_t;
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::libc::c_int;
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::libc::c_int;
    pub fn sync() -> ();
    pub fn truncate(arg1: *const ::libc::c_char, arg2: off_t)
     -> ::libc::c_int;
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
    pub fn usleep(arg1: useconds_t) -> ::libc::c_int;
    pub fn vfork() -> pid_t;
    pub fn fsync(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn ftruncate(arg1: ::libc::c_int, arg2: off_t) -> ::libc::c_int;
    pub fn getlogin_r(arg1: *mut ::libc::c_char, arg2: size_t)
     -> ::libc::c_int;
    pub fn fchown(arg1: ::libc::c_int, arg2: uid_t, arg3: gid_t)
     -> ::libc::c_int;
    pub fn gethostname(arg1: *mut ::libc::c_char, arg2: size_t)
     -> ::libc::c_int;
    pub fn readlink(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_char,
                    arg3: size_t) -> ssize_t;
    pub fn setegid(arg1: gid_t) -> ::libc::c_int;
    pub fn seteuid(arg1: uid_t) -> ::libc::c_int;
    pub fn symlink(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pselect(arg1: ::libc::c_int, arg2: *mut fd_set, arg3: *mut fd_set,
                   arg4: *mut fd_set, arg5: *const Struct_timespec,
                   arg6: *const sigset_t) -> ::libc::c_int;
    pub fn select(arg1: ::libc::c_int, arg2: *mut fd_set, arg3: *mut fd_set,
                  arg4: *mut fd_set, arg5: *mut Struct_timeval)
     -> ::libc::c_int;
    pub fn accessx_np(arg1: *const Struct_accessx_descriptor, arg2: size_t,
                      arg3: *mut ::libc::c_int, arg4: uid_t) -> ::libc::c_int;
    pub fn acct(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn add_profil(arg1: *mut ::libc::c_char, arg2: size_t,
                      arg3: ::libc::c_ulong, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn endusershell() -> ();
    pub fn execvP(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                  arg3: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn fflagstostr(arg1: ::libc::c_ulong) -> *mut ::libc::c_char;
    pub fn getdomainname(arg1: *mut ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn getgrouplist(arg1: *const ::libc::c_char, arg2: ::libc::c_int,
                        arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn gethostuuid(arg1: uuid_t, arg2: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn getmode(arg1: *const ::libc::c_void, arg2: mode_t) -> mode_t;
    pub fn getpeereid(arg1: ::libc::c_int, arg2: *mut uid_t, arg3: *mut gid_t)
     -> ::libc::c_int;
    pub fn getsgroups_np(arg1: *mut ::libc::c_int, arg2: uuid_t)
     -> ::libc::c_int;
    pub fn getusershell() -> *mut ::libc::c_char;
    pub fn getwgroups_np(arg1: *mut ::libc::c_int, arg2: uuid_t)
     -> ::libc::c_int;
    pub fn initgroups(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn iruserok(arg1: ::libc::c_ulong, arg2: ::libc::c_int,
                    arg3: *const ::libc::c_char, arg4: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn iruserok_sa(arg1: *const ::libc::c_void, arg2: ::libc::c_int,
                       arg3: ::libc::c_int, arg4: *const ::libc::c_char,
                       arg5: *const ::libc::c_char) -> ::libc::c_int;
    pub fn issetugid() -> ::libc::c_int;
    pub fn mkdtemp(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn mknod(arg1: *const ::libc::c_char, arg2: mode_t, arg3: dev_t)
     -> ::libc::c_int;
    pub fn mkpath_np(path: *const ::libc::c_char, omode: mode_t)
     -> ::libc::c_int;
    pub fn mkstemps(arg1: *mut ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn nfssvc(arg1: ::libc::c_int, arg2: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn profil(arg1: *mut ::libc::c_char, arg2: size_t,
                  arg3: ::libc::c_ulong, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::libc::c_int;
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t)
     -> ::libc::c_int;
    pub fn rcmd(arg1: *mut *mut ::libc::c_char, arg2: ::libc::c_int,
                arg3: *const ::libc::c_char, arg4: *const ::libc::c_char,
                arg5: *const ::libc::c_char, arg6: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn rcmd_af(arg1: *mut *mut ::libc::c_char, arg2: ::libc::c_int,
                   arg3: *const ::libc::c_char, arg4: *const ::libc::c_char,
                   arg5: *const ::libc::c_char, arg6: *mut ::libc::c_int,
                   arg7: ::libc::c_int) -> ::libc::c_int;
    pub fn reboot(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn revoke(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rresvport(arg1: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn rresvport_af(arg1: *mut ::libc::c_int, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn ruserok(arg1: *const ::libc::c_char, arg2: ::libc::c_int,
                   arg3: *const ::libc::c_char, arg4: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn setdomainname(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn setgroups(arg1: ::libc::c_int, arg2: *const gid_t)
     -> ::libc::c_int;
    pub fn sethostid(arg1: ::libc::c_long) -> ();
    pub fn sethostname(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn setlogin(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn setmode(arg1: *const ::libc::c_char) -> *mut ::libc::c_void;
    pub fn setrgid(arg1: gid_t) -> ::libc::c_int;
    pub fn setruid(arg1: uid_t) -> ::libc::c_int;
    pub fn setsgroups_np(arg1: ::libc::c_int, arg2: uuid_t) -> ::libc::c_int;
    pub fn setusershell() -> ();
    pub fn setwgroups_np(arg1: ::libc::c_int, arg2: uuid_t) -> ::libc::c_int;
    pub fn strtofflags(arg1: *mut *mut ::libc::c_char,
                       arg2: *mut ::libc::c_ulong, arg3: *mut ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn swapon(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn syscall(arg1: ::libc::c_int, ...) -> ::libc::c_int;
    pub fn ttyslot() -> ::libc::c_int;
    pub fn undelete(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn unwhiteout(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn fgetattrlist(arg1: ::libc::c_int, arg2: *mut ::libc::c_void,
                        arg3: *mut ::libc::c_void, arg4: size_t,
                        arg5: ::libc::c_uint) -> ::libc::c_int;
    pub fn fsetattrlist(arg1: ::libc::c_int, arg2: *mut ::libc::c_void,
                        arg3: *mut ::libc::c_void, arg4: size_t,
                        arg5: ::libc::c_uint) -> ::libc::c_int;
    pub fn getattrlist(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_void,
                       arg3: *mut ::libc::c_void, arg4: size_t,
                       arg5: ::libc::c_uint) -> ::libc::c_int;
    pub fn setattrlist(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_void,
                       arg3: *mut ::libc::c_void, arg4: size_t,
                       arg5: ::libc::c_uint) -> ::libc::c_int;
    pub fn exchangedata(arg1: *const ::libc::c_char,
                        arg2: *const ::libc::c_char, arg3: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn getdirentriesattr(arg1: ::libc::c_int, arg2: *mut ::libc::c_void,
                             arg3: *mut ::libc::c_void, arg4: size_t,
                             arg5: *mut ::libc::c_uint,
                             arg6: *mut ::libc::c_uint,
                             arg7: *mut ::libc::c_uint, arg8: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn searchfs(arg1: *const ::libc::c_char,
                    arg2: *mut Struct_fssearchblock,
                    arg3: *mut ::libc::c_ulong, arg4: ::libc::c_uint,
                    arg5: ::libc::c_uint, arg6: *mut Struct_searchstate)
     -> ::libc::c_int;
    pub fn fsctl(arg1: *const ::libc::c_char, arg2: ::libc::c_ulong,
                 arg3: *mut ::libc::c_void, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn ffsctl(arg1: ::libc::c_int, arg2: ::libc::c_ulong,
                  arg3: *mut ::libc::c_void, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn fsync_volume_np(arg1: ::libc::c_int, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sync_volume_np(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn open(arg1: *const ::libc::c_char, arg2: ::libc::c_int, ...)
     -> ::libc::c_int;
    pub fn openat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                  arg3: ::libc::c_int, ...) -> ::libc::c_int;
    pub fn creat(arg1: *const ::libc::c_char, arg2: mode_t) -> ::libc::c_int;
    pub fn fcntl(arg1: ::libc::c_int, arg2: ::libc::c_int, ...)
     -> ::libc::c_int;
    pub fn openx_np(arg1: *const ::libc::c_char, arg2: ::libc::c_int,
                    arg3: filesec_t) -> ::libc::c_int;
    pub fn open_dprotected_np(arg1: *const ::libc::c_char,
                              arg2: ::libc::c_int, arg3: ::libc::c_int,
                              arg4: ::libc::c_int, ...) -> ::libc::c_int;
    pub fn flock(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn filesec_init() -> filesec_t;
    pub fn filesec_dup(arg1: filesec_t) -> filesec_t;
    pub fn filesec_free(arg1: filesec_t) -> ();
    pub fn filesec_get_property(arg1: filesec_t, arg2: filesec_property_t,
                                arg3: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn filesec_query_property(arg1: filesec_t, arg2: filesec_property_t,
                                  arg3: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn filesec_set_property(arg1: filesec_t, arg2: filesec_property_t,
                                arg3: *const ::libc::c_void) -> ::libc::c_int;
    pub fn filesec_unset_property(arg1: filesec_t, arg2: filesec_property_t)
     -> ::libc::c_int;
    pub fn os_retain(object: *mut ::libc::c_void) -> *mut ::libc::c_void;
    pub fn os_release(object: *mut ::libc::c_void) -> ();
    pub fn dispatch_time(when: dispatch_time_t, delta: int64_t)
     -> dispatch_time_t;
    pub fn dispatch_walltime(when: *const Struct_timespec, delta: int64_t)
     -> dispatch_time_t;
    pub fn dispatch_retain(object: dispatch_object_t) -> ();
    pub fn dispatch_release(object: dispatch_object_t) -> ();
    pub fn dispatch_get_context(object: dispatch_object_t)
     -> *mut ::libc::c_void;
    pub fn dispatch_set_context(object: dispatch_object_t,
                                context: *mut ::libc::c_void) -> ();
    pub fn dispatch_set_finalizer_f(object: dispatch_object_t,
                                    finalizer: dispatch_function_t) -> ();
    pub fn dispatch_suspend(object: dispatch_object_t) -> ();
    pub fn dispatch_resume(object: dispatch_object_t) -> ();
    pub fn dispatch_wait(object: *mut ::libc::c_void,
                         timeout: dispatch_time_t) -> ::libc::c_long;
    pub fn dispatch_notify(object: *mut ::libc::c_void,
                           queue: dispatch_object_t,
                           notification_block: dispatch_block_t) -> ();
    pub fn dispatch_cancel(object: *mut ::libc::c_void) -> ();
    pub fn dispatch_testcancel(object: *mut ::libc::c_void) -> ::libc::c_long;
    pub fn dispatch_debug(object: dispatch_object_t,
                          message: *const ::libc::c_char, ...) -> ();
    pub fn dispatch_debugv(object: dispatch_object_t,
                           message: *const ::libc::c_char, ap: va_list) -> ();
    pub fn dispatch_async(queue: dispatch_queue_t, block: dispatch_block_t)
     -> ();
    pub fn dispatch_async_f(queue: dispatch_queue_t,
                            context: *mut ::libc::c_void,
                            work: dispatch_function_t) -> ();
    pub fn dispatch_sync(queue: dispatch_queue_t, block: dispatch_block_t)
     -> ();
    pub fn dispatch_sync_f(queue: dispatch_queue_t,
                           context: *mut ::libc::c_void,
                           work: dispatch_function_t) -> ();
    pub fn dispatch_apply(iterations: size_t, queue: dispatch_queue_t,
                          block: ::libc::c_void) -> ();
    pub fn dispatch_apply_f(iterations: size_t, queue: dispatch_queue_t,
                            context: *mut ::libc::c_void,
                            work:
                                ::std::option::Option<extern "C" fn(arg1:
                                                                        *mut ::libc::c_void,
                                                                    arg2:
                                                                        size_t)
                                                          -> ()>) -> ();
    pub fn dispatch_get_current_queue() -> dispatch_queue_t;
    pub fn qos_class_self() -> qos_class_t;
    pub fn qos_class_main() -> qos_class_t;
    pub fn dispatch_get_global_queue(identifier: ::libc::c_long,
                                     flags: ::libc::c_ulong)
     -> dispatch_queue_t;
    pub fn dispatch_queue_attr_make_with_qos_class(attr:
                                                       dispatch_queue_attr_t,
                                                   qos_class:
                                                       dispatch_qos_class_t,
                                                   relative_priority:
                                                       ::libc::c_int)
     -> dispatch_queue_attr_t;
    pub fn dispatch_queue_create(label: *const ::libc::c_char,
                                 attr: dispatch_queue_attr_t)
     -> dispatch_queue_t;
    pub fn dispatch_queue_get_label(queue: dispatch_queue_t)
     -> *const ::libc::c_char;
    pub fn dispatch_queue_get_qos_class(queue: dispatch_queue_t,
                                        relative_priority_ptr:
                                            *mut ::libc::c_int)
     -> dispatch_qos_class_t;
    pub fn dispatch_set_target_queue(object: dispatch_object_t,
                                     queue: dispatch_queue_t) -> ();
    pub fn dispatch_main() -> ();
    pub fn dispatch_after(when: dispatch_time_t, queue: dispatch_queue_t,
                          block: dispatch_block_t) -> ();
    pub fn dispatch_after_f(when: dispatch_time_t, queue: dispatch_queue_t,
                            context: *mut ::libc::c_void,
                            work: dispatch_function_t) -> ();
    pub fn dispatch_barrier_async(queue: dispatch_queue_t,
                                  block: dispatch_block_t) -> ();
    pub fn dispatch_barrier_async_f(queue: dispatch_queue_t,
                                    context: *mut ::libc::c_void,
                                    work: dispatch_function_t) -> ();
    pub fn dispatch_barrier_sync(queue: dispatch_queue_t,
                                 block: dispatch_block_t) -> ();
    pub fn dispatch_barrier_sync_f(queue: dispatch_queue_t,
                                   context: *mut ::libc::c_void,
                                   work: dispatch_function_t) -> ();
    pub fn dispatch_queue_set_specific(queue: dispatch_queue_t,
                                       key: *const ::libc::c_void,
                                       context: *mut ::libc::c_void,
                                       destructor: dispatch_function_t) -> ();
    pub fn dispatch_queue_get_specific(queue: dispatch_queue_t,
                                       key: *const ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn dispatch_get_specific(key: *const ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn dispatch_block_create(flags: dispatch_block_flags_t,
                                 block: dispatch_block_t) -> dispatch_block_t;
    pub fn dispatch_block_create_with_qos_class(flags: dispatch_block_flags_t,
                                                qos_class:
                                                    dispatch_qos_class_t,
                                                relative_priority:
                                                    ::libc::c_int,
                                                block: dispatch_block_t)
     -> dispatch_block_t;
    pub fn dispatch_block_perform(flags: dispatch_block_flags_t,
                                  block: dispatch_block_t) -> ();
    pub fn dispatch_block_wait(block: dispatch_block_t,
                               timeout: dispatch_time_t) -> ::libc::c_long;
    pub fn dispatch_block_notify(block: dispatch_block_t,
                                 queue: dispatch_queue_t,
                                 notification_block: dispatch_block_t) -> ();
    pub fn dispatch_block_cancel(block: dispatch_block_t) -> ();
    pub fn dispatch_block_testcancel(block: dispatch_block_t)
     -> ::libc::c_long;
    pub fn mach_msg_overwrite(msg: *mut mach_msg_header_t,
                              option: mach_msg_option_t,
                              send_size: mach_msg_size_t,
                              rcv_size: mach_msg_size_t,
                              rcv_name: mach_port_name_t,
                              timeout: mach_msg_timeout_t,
                              notify: mach_port_name_t,
                              rcv_msg: *mut mach_msg_header_t,
                              rcv_limit: mach_msg_size_t)
     -> mach_msg_return_t;
    pub fn mach_msg(msg: *mut mach_msg_header_t, option: mach_msg_option_t,
                    send_size: mach_msg_size_t, rcv_size: mach_msg_size_t,
                    rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t,
                    notify: mach_port_name_t) -> mach_msg_return_t;
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t)
     -> kern_return_t;
    pub fn dispatch_source_create(_type: dispatch_source_type_t,
                                  handle: uintptr_t, mask: ::libc::c_ulong,
                                  queue: dispatch_queue_t)
     -> dispatch_source_t;
    pub fn dispatch_source_set_event_handler(source: dispatch_source_t,
                                             handler: dispatch_block_t) -> ();
    pub fn dispatch_source_set_event_handler_f(source: dispatch_source_t,
                                               handler: dispatch_function_t)
     -> ();
    pub fn dispatch_source_set_cancel_handler(source: dispatch_source_t,
                                              handler: dispatch_block_t)
     -> ();
    pub fn dispatch_source_set_cancel_handler_f(source: dispatch_source_t,
                                                handler: dispatch_function_t)
     -> ();
    pub fn dispatch_source_cancel(source: dispatch_source_t) -> ();
    pub fn dispatch_source_testcancel(source: dispatch_source_t)
     -> ::libc::c_long;
    pub fn dispatch_source_get_handle(source: dispatch_source_t) -> uintptr_t;
    pub fn dispatch_source_get_mask(source: dispatch_source_t)
     -> ::libc::c_ulong;
    pub fn dispatch_source_get_data(source: dispatch_source_t)
     -> ::libc::c_ulong;
    pub fn dispatch_source_merge_data(source: dispatch_source_t,
                                      value: ::libc::c_ulong) -> ();
    pub fn dispatch_source_set_timer(source: dispatch_source_t,
                                     start: dispatch_time_t,
                                     interval: uint64_t, leeway: uint64_t)
     -> ();
    pub fn dispatch_source_set_registration_handler(source: dispatch_source_t,
                                                    handler: dispatch_block_t)
     -> ();
    pub fn dispatch_source_set_registration_handler_f(source:
                                                          dispatch_source_t,
                                                      handler:
                                                          dispatch_function_t)
     -> ();
    pub fn dispatch_group_create() -> dispatch_group_t;
    pub fn dispatch_group_async(group: dispatch_group_t,
                                queue: dispatch_queue_t,
                                block: dispatch_block_t) -> ();
    pub fn dispatch_group_async_f(group: dispatch_group_t,
                                  queue: dispatch_queue_t,
                                  context: *mut ::libc::c_void,
                                  work: dispatch_function_t) -> ();
    pub fn dispatch_group_wait(group: dispatch_group_t,
                               timeout: dispatch_time_t) -> ::libc::c_long;
    pub fn dispatch_group_notify(group: dispatch_group_t,
                                 queue: dispatch_queue_t,
                                 block: dispatch_block_t) -> ();
    pub fn dispatch_group_notify_f(group: dispatch_group_t,
                                   queue: dispatch_queue_t,
                                   context: *mut ::libc::c_void,
                                   work: dispatch_function_t) -> ();
    pub fn dispatch_group_enter(group: dispatch_group_t) -> ();
    pub fn dispatch_group_leave(group: dispatch_group_t) -> ();
    pub fn dispatch_semaphore_create(value: ::libc::c_long)
     -> dispatch_semaphore_t;
    pub fn dispatch_semaphore_wait(dsema: dispatch_semaphore_t,
                                   timeout: dispatch_time_t)
     -> ::libc::c_long;
    pub fn dispatch_semaphore_signal(dsema: dispatch_semaphore_t)
     -> ::libc::c_long;
    pub fn dispatch_once(predicate: *mut dispatch_once_t,
                         block: dispatch_block_t) -> ();
    pub fn dispatch_once_f(predicate: *mut dispatch_once_t,
                           context: *mut ::libc::c_void,
                           function: dispatch_function_t) -> ();
    pub fn dispatch_data_create(buffer: *const ::libc::c_void, size: size_t,
                                queue: dispatch_queue_t,
                                destructor: dispatch_block_t)
     -> dispatch_data_t;
    pub fn dispatch_data_get_size(data: dispatch_data_t) -> size_t;
    pub fn dispatch_data_create_map(data: dispatch_data_t,
                                    buffer_ptr: *mut *const ::libc::c_void,
                                    size_ptr: *mut size_t) -> dispatch_data_t;
    pub fn dispatch_data_create_concat(data1: dispatch_data_t,
                                       data2: dispatch_data_t)
     -> dispatch_data_t;
    pub fn dispatch_data_create_subrange(data: dispatch_data_t,
                                         offset: size_t, length: size_t)
     -> dispatch_data_t;
    pub fn dispatch_data_apply(data: dispatch_data_t,
                               applier: dispatch_data_applier_t) -> u8;
    pub fn dispatch_data_copy_region(data: dispatch_data_t, location: size_t,
                                     offset_ptr: *mut size_t)
     -> dispatch_data_t;
    pub fn dispatch_read(fd: dispatch_fd_t, length: size_t,
                         queue: dispatch_queue_t, handler: ::libc::c_void)
     -> ();
    pub fn dispatch_write(fd: dispatch_fd_t, data: dispatch_data_t,
                          queue: dispatch_queue_t, handler: ::libc::c_void)
     -> ();
    pub fn dispatch_io_create(_type: dispatch_io_type_t, fd: dispatch_fd_t,
                              queue: dispatch_queue_t,
                              cleanup_handler: ::libc::c_void)
     -> dispatch_io_t;
    pub fn dispatch_io_create_with_path(_type: dispatch_io_type_t,
                                        path: *const ::libc::c_char,
                                        oflag: ::libc::c_int, mode: mode_t,
                                        queue: dispatch_queue_t,
                                        cleanup_handler: ::libc::c_void)
     -> dispatch_io_t;
    pub fn dispatch_io_create_with_io(_type: dispatch_io_type_t,
                                      io: dispatch_io_t,
                                      queue: dispatch_queue_t,
                                      cleanup_handler: ::libc::c_void)
     -> dispatch_io_t;
    pub fn dispatch_io_read(channel: dispatch_io_t, offset: off_t,
                            length: size_t, queue: dispatch_queue_t,
                            io_handler: dispatch_io_handler_t) -> ();
    pub fn dispatch_io_write(channel: dispatch_io_t, offset: off_t,
                             data: dispatch_data_t, queue: dispatch_queue_t,
                             io_handler: dispatch_io_handler_t) -> ();
    pub fn dispatch_io_close(channel: dispatch_io_t,
                             flags: dispatch_io_close_flags_t) -> ();
    pub fn dispatch_io_barrier(channel: dispatch_io_t,
                               barrier: dispatch_block_t) -> ();
    pub fn dispatch_io_get_descriptor(channel: dispatch_io_t)
     -> dispatch_fd_t;
    pub fn dispatch_io_set_high_water(channel: dispatch_io_t,
                                      high_water: size_t) -> ();
    pub fn dispatch_io_set_low_water(channel: dispatch_io_t,
                                     low_water: size_t) -> ();
    pub fn dispatch_io_set_interval(channel: dispatch_io_t,
                                    interval: uint64_t,
                                    flags: dispatch_io_interval_flags_t)
     -> ();
    pub fn CFReadStreamGetTypeID() -> CFTypeID;
    pub fn CFWriteStreamGetTypeID() -> CFTypeID;
    pub fn CFReadStreamCreateWithBytesNoCopy(alloc: CFAllocatorRef,
                                             bytes: *const UInt8,
                                             length: CFIndex,
                                             bytesDeallocator: CFAllocatorRef)
     -> CFReadStreamRef;
    pub fn CFWriteStreamCreateWithBuffer(alloc: CFAllocatorRef,
                                         buffer: *mut UInt8,
                                         bufferCapacity: CFIndex)
     -> CFWriteStreamRef;
    pub fn CFWriteStreamCreateWithAllocatedBuffers(alloc: CFAllocatorRef,
                                                   bufferAllocator:
                                                       CFAllocatorRef)
     -> CFWriteStreamRef;
    pub fn CFReadStreamCreateWithFile(alloc: CFAllocatorRef,
                                      fileURL: CFURLRef) -> CFReadStreamRef;
    pub fn CFWriteStreamCreateWithFile(alloc: CFAllocatorRef,
                                       fileURL: CFURLRef) -> CFWriteStreamRef;
    pub fn CFStreamCreateBoundPair(alloc: CFAllocatorRef,
                                   readStream: *mut CFReadStreamRef,
                                   writeStream: *mut CFWriteStreamRef,
                                   transferBufferSize: CFIndex) -> ();
    pub fn CFStreamCreatePairWithSocket(alloc: CFAllocatorRef,
                                        sock: CFSocketNativeHandle,
                                        readStream: *mut CFReadStreamRef,
                                        writeStream: *mut CFWriteStreamRef)
     -> ();
    pub fn CFStreamCreatePairWithSocketToHost(alloc: CFAllocatorRef,
                                              host: CFStringRef, port: UInt32,
                                              readStream:
                                                  *mut CFReadStreamRef,
                                              writeStream:
                                                  *mut CFWriteStreamRef)
     -> ();
    pub fn CFStreamCreatePairWithPeerSocketSignature(alloc: CFAllocatorRef,
                                                     signature:
                                                         *const CFSocketSignature,
                                                     readStream:
                                                         *mut CFReadStreamRef,
                                                     writeStream:
                                                         *mut CFWriteStreamRef)
     -> ();
    pub fn CFReadStreamGetStatus(stream: CFReadStreamRef) -> CFStreamStatus;
    pub fn CFWriteStreamGetStatus(stream: CFWriteStreamRef) -> CFStreamStatus;
    pub fn CFReadStreamCopyError(stream: CFReadStreamRef) -> CFErrorRef;
    pub fn CFWriteStreamCopyError(stream: CFWriteStreamRef) -> CFErrorRef;
    pub fn CFReadStreamOpen(stream: CFReadStreamRef) -> Boolean;
    pub fn CFWriteStreamOpen(stream: CFWriteStreamRef) -> Boolean;
    pub fn CFReadStreamClose(stream: CFReadStreamRef) -> ();
    pub fn CFWriteStreamClose(stream: CFWriteStreamRef) -> ();
    pub fn CFReadStreamHasBytesAvailable(stream: CFReadStreamRef) -> Boolean;
    pub fn CFReadStreamRead(stream: CFReadStreamRef, buffer: *mut UInt8,
                            bufferLength: CFIndex) -> CFIndex;
    pub fn CFReadStreamGetBuffer(stream: CFReadStreamRef,
                                 maxBytesToRead: CFIndex,
                                 numBytesRead: *mut CFIndex) -> *const UInt8;
    pub fn CFWriteStreamCanAcceptBytes(stream: CFWriteStreamRef) -> Boolean;
    pub fn CFWriteStreamWrite(stream: CFWriteStreamRef, buffer: *const UInt8,
                              bufferLength: CFIndex) -> CFIndex;
    pub fn CFReadStreamCopyProperty(stream: CFReadStreamRef,
                                    propertyName: CFStringRef) -> CFTypeRef;
    pub fn CFWriteStreamCopyProperty(stream: CFWriteStreamRef,
                                     propertyName: CFStringRef) -> CFTypeRef;
    pub fn CFReadStreamSetProperty(stream: CFReadStreamRef,
                                   propertyName: CFStringRef,
                                   propertyValue: CFTypeRef) -> Boolean;
    pub fn CFWriteStreamSetProperty(stream: CFWriteStreamRef,
                                    propertyName: CFStringRef,
                                    propertyValue: CFTypeRef) -> Boolean;
    pub fn CFReadStreamSetClient(stream: CFReadStreamRef,
                                 streamEvents: CFOptionFlags,
                                 clientCB: CFReadStreamClientCallBack,
                                 clientContext: *mut CFStreamClientContext)
     -> Boolean;
    pub fn CFWriteStreamSetClient(stream: CFWriteStreamRef,
                                  streamEvents: CFOptionFlags,
                                  clientCB: CFWriteStreamClientCallBack,
                                  clientContext: *mut CFStreamClientContext)
     -> Boolean;
    pub fn CFReadStreamScheduleWithRunLoop(stream: CFReadStreamRef,
                                           runLoop: CFRunLoopRef,
                                           runLoopMode: CFStringRef) -> ();
    pub fn CFWriteStreamScheduleWithRunLoop(stream: CFWriteStreamRef,
                                            runLoop: CFRunLoopRef,
                                            runLoopMode: CFStringRef) -> ();
    pub fn CFReadStreamUnscheduleFromRunLoop(stream: CFReadStreamRef,
                                             runLoop: CFRunLoopRef,
                                             runLoopMode: CFStringRef) -> ();
    pub fn CFWriteStreamUnscheduleFromRunLoop(stream: CFWriteStreamRef,
                                              runLoop: CFRunLoopRef,
                                              runLoopMode: CFStringRef) -> ();
    pub fn CFReadStreamSetDispatchQueue(stream: CFReadStreamRef,
                                        q: dispatch_queue_t) -> ();
    pub fn CFWriteStreamSetDispatchQueue(stream: CFWriteStreamRef,
                                         q: dispatch_queue_t) -> ();
    pub fn CFReadStreamCopyDispatchQueue(stream: CFReadStreamRef)
     -> dispatch_queue_t;
    pub fn CFWriteStreamCopyDispatchQueue(stream: CFWriteStreamRef)
     -> dispatch_queue_t;
    pub fn CFReadStreamGetError(stream: CFReadStreamRef) -> CFStreamError;
    pub fn CFWriteStreamGetError(stream: CFWriteStreamRef) -> CFStreamError;
    pub fn CFPropertyListCreateFromXMLData(allocator: CFAllocatorRef,
                                           xmlData: CFDataRef,
                                           mutabilityOption: CFOptionFlags,
                                           errorString: *mut CFStringRef)
     -> CFPropertyListRef;
    pub fn CFPropertyListCreateXMLData(allocator: CFAllocatorRef,
                                       propertyList: CFPropertyListRef)
     -> CFDataRef;
    pub fn CFPropertyListCreateDeepCopy(allocator: CFAllocatorRef,
                                        propertyList: CFPropertyListRef,
                                        mutabilityOption: CFOptionFlags)
     -> CFPropertyListRef;
    pub fn CFPropertyListIsValid(plist: CFPropertyListRef,
                                 format: CFPropertyListFormat) -> Boolean;
    pub fn CFPropertyListWriteToStream(propertyList: CFPropertyListRef,
                                       stream: CFWriteStreamRef,
                                       format: CFPropertyListFormat,
                                       errorString: *mut CFStringRef)
     -> CFIndex;
    pub fn CFPropertyListCreateFromStream(allocator: CFAllocatorRef,
                                          stream: CFReadStreamRef,
                                          streamLength: CFIndex,
                                          mutabilityOption: CFOptionFlags,
                                          format: *mut CFPropertyListFormat,
                                          errorString: *mut CFStringRef)
     -> CFPropertyListRef;
    pub fn CFPropertyListCreateWithData(allocator: CFAllocatorRef,
                                        data: CFDataRef,
                                        options: CFOptionFlags,
                                        format: *mut CFPropertyListFormat,
                                        error: *mut CFErrorRef)
     -> CFPropertyListRef;
    pub fn CFPropertyListCreateWithStream(allocator: CFAllocatorRef,
                                          stream: CFReadStreamRef,
                                          streamLength: CFIndex,
                                          options: CFOptionFlags,
                                          format: *mut CFPropertyListFormat,
                                          error: *mut CFErrorRef)
     -> CFPropertyListRef;
    pub fn CFPropertyListWrite(propertyList: CFPropertyListRef,
                               stream: CFWriteStreamRef,
                               format: CFPropertyListFormat,
                               options: CFOptionFlags, error: *mut CFErrorRef)
     -> CFIndex;
    pub fn CFPropertyListCreateData(allocator: CFAllocatorRef,
                                    propertyList: CFPropertyListRef,
                                    format: CFPropertyListFormat,
                                    options: CFOptionFlags,
                                    error: *mut CFErrorRef) -> CFDataRef;
    pub fn CFSetGetTypeID() -> CFTypeID;
    pub fn CFSetCreate(allocator: CFAllocatorRef,
                       values: *mut *const ::libc::c_void, numValues: CFIndex,
                       callBacks: *const CFSetCallBacks) -> CFSetRef;
    pub fn CFSetCreateCopy(allocator: CFAllocatorRef, theSet: CFSetRef)
     -> CFSetRef;
    pub fn CFSetCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex,
                              callBacks: *const CFSetCallBacks)
     -> CFMutableSetRef;
    pub fn CFSetCreateMutableCopy(allocator: CFAllocatorRef,
                                  capacity: CFIndex, theSet: CFSetRef)
     -> CFMutableSetRef;
    pub fn CFSetGetCount(theSet: CFSetRef) -> CFIndex;
    pub fn CFSetGetCountOfValue(theSet: CFSetRef,
                                value: *const ::libc::c_void) -> CFIndex;
    pub fn CFSetContainsValue(theSet: CFSetRef, value: *const ::libc::c_void)
     -> Boolean;
    pub fn CFSetGetValue(theSet: CFSetRef, value: *const ::libc::c_void)
     -> *const ::libc::c_void;
    pub fn CFSetGetValueIfPresent(theSet: CFSetRef,
                                  candidate: *const ::libc::c_void,
                                  value: *mut *const ::libc::c_void)
     -> Boolean;
    pub fn CFSetGetValues(theSet: CFSetRef,
                          values: *mut *const ::libc::c_void) -> ();
    pub fn CFSetApplyFunction(theSet: CFSetRef, applier: CFSetApplierFunction,
                              context: *mut ::libc::c_void) -> ();
    pub fn CFSetAddValue(theSet: CFMutableSetRef,
                         value: *const ::libc::c_void) -> ();
    pub fn CFSetReplaceValue(theSet: CFMutableSetRef,
                             value: *const ::libc::c_void) -> ();
    pub fn CFSetSetValue(theSet: CFMutableSetRef,
                         value: *const ::libc::c_void) -> ();
    pub fn CFSetRemoveValue(theSet: CFMutableSetRef,
                            value: *const ::libc::c_void) -> ();
    pub fn CFSetRemoveAllValues(theSet: CFMutableSetRef) -> ();
    pub fn CFTreeGetTypeID() -> CFTypeID;
    pub fn CFTreeCreate(allocator: CFAllocatorRef,
                        context: *const CFTreeContext) -> CFTreeRef;
    pub fn CFTreeGetParent(tree: CFTreeRef) -> CFTreeRef;
    pub fn CFTreeGetNextSibling(tree: CFTreeRef) -> CFTreeRef;
    pub fn CFTreeGetFirstChild(tree: CFTreeRef) -> CFTreeRef;
    pub fn CFTreeGetContext(tree: CFTreeRef, context: *mut CFTreeContext)
     -> ();
    pub fn CFTreeGetChildCount(tree: CFTreeRef) -> CFIndex;
    pub fn CFTreeGetChildAtIndex(tree: CFTreeRef, idx: CFIndex) -> CFTreeRef;
    pub fn CFTreeGetChildren(tree: CFTreeRef, children: *mut CFTreeRef) -> ();
    pub fn CFTreeApplyFunctionToChildren(tree: CFTreeRef,
                                         applier: CFTreeApplierFunction,
                                         context: *mut ::libc::c_void) -> ();
    pub fn CFTreeFindRoot(tree: CFTreeRef) -> CFTreeRef;
    pub fn CFTreeSetContext(tree: CFTreeRef, context: *const CFTreeContext)
     -> ();
    pub fn CFTreePrependChild(tree: CFTreeRef, newChild: CFTreeRef) -> ();
    pub fn CFTreeAppendChild(tree: CFTreeRef, newChild: CFTreeRef) -> ();
    pub fn CFTreeInsertSibling(tree: CFTreeRef, newSibling: CFTreeRef) -> ();
    pub fn CFTreeRemove(tree: CFTreeRef) -> ();
    pub fn CFTreeRemoveAllChildren(tree: CFTreeRef) -> ();
    pub fn CFTreeSortChildren(tree: CFTreeRef,
                              comparator: CFComparatorFunction,
                              context: *mut ::libc::c_void) -> ();
    pub fn CFURLCreateDataAndPropertiesFromResource(alloc: CFAllocatorRef,
                                                    url: CFURLRef,
                                                    resourceData:
                                                        *mut CFDataRef,
                                                    properties:
                                                        *mut CFDictionaryRef,
                                                    desiredProperties:
                                                        CFArrayRef,
                                                    errorCode: *mut SInt32)
     -> Boolean;
    pub fn CFURLWriteDataAndPropertiesToResource(url: CFURLRef,
                                                 dataToWrite: CFDataRef,
                                                 propertiesToWrite:
                                                     CFDictionaryRef,
                                                 errorCode: *mut SInt32)
     -> Boolean;
    pub fn CFURLDestroyResource(url: CFURLRef, errorCode: *mut SInt32)
     -> Boolean;
    pub fn CFURLCreatePropertyFromResource(alloc: CFAllocatorRef,
                                           url: CFURLRef,
                                           property: CFStringRef,
                                           errorCode: *mut SInt32)
     -> CFTypeRef;
    pub fn CFUUIDGetTypeID() -> CFTypeID;
    pub fn CFUUIDCreate(alloc: CFAllocatorRef) -> CFUUIDRef;
    pub fn CFUUIDCreateWithBytes(alloc: CFAllocatorRef, byte0: UInt8,
                                 byte1: UInt8, byte2: UInt8, byte3: UInt8,
                                 byte4: UInt8, byte5: UInt8, byte6: UInt8,
                                 byte7: UInt8, byte8: UInt8, byte9: UInt8,
                                 byte10: UInt8, byte11: UInt8, byte12: UInt8,
                                 byte13: UInt8, byte14: UInt8, byte15: UInt8)
     -> CFUUIDRef;
    pub fn CFUUIDCreateFromString(alloc: CFAllocatorRef, uuidStr: CFStringRef)
     -> CFUUIDRef;
    pub fn CFUUIDCreateString(alloc: CFAllocatorRef, uuid: CFUUIDRef)
     -> CFStringRef;
    pub fn CFUUIDGetConstantUUIDWithBytes(alloc: CFAllocatorRef, byte0: UInt8,
                                          byte1: UInt8, byte2: UInt8,
                                          byte3: UInt8, byte4: UInt8,
                                          byte5: UInt8, byte6: UInt8,
                                          byte7: UInt8, byte8: UInt8,
                                          byte9: UInt8, byte10: UInt8,
                                          byte11: UInt8, byte12: UInt8,
                                          byte13: UInt8, byte14: UInt8,
                                          byte15: UInt8) -> CFUUIDRef;
    pub fn CFUUIDGetUUIDBytes(uuid: CFUUIDRef) -> CFUUIDBytes;
    pub fn CFUUIDCreateFromUUIDBytes(alloc: CFAllocatorRef,
                                     bytes: CFUUIDBytes) -> CFUUIDRef;
    pub fn CFCopyHomeDirectoryURL() -> CFURLRef;
    pub fn CFBundleGetMainBundle() -> CFBundleRef;
    pub fn CFBundleGetBundleWithIdentifier(bundleID: CFStringRef)
     -> CFBundleRef;
    pub fn CFBundleGetAllBundles() -> CFArrayRef;
    pub fn CFBundleGetTypeID() -> CFTypeID;
    pub fn CFBundleCreate(allocator: CFAllocatorRef, bundleURL: CFURLRef)
     -> CFBundleRef;
    pub fn CFBundleCreateBundlesFromDirectory(allocator: CFAllocatorRef,
                                              directoryURL: CFURLRef,
                                              bundleType: CFStringRef)
     -> CFArrayRef;
    pub fn CFBundleCopyBundleURL(bundle: CFBundleRef) -> CFURLRef;
    pub fn CFBundleGetValueForInfoDictionaryKey(bundle: CFBundleRef,
                                                key: CFStringRef)
     -> CFTypeRef;
    pub fn CFBundleGetInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
    pub fn CFBundleGetLocalInfoDictionary(bundle: CFBundleRef)
     -> CFDictionaryRef;
    pub fn CFBundleGetPackageInfo(bundle: CFBundleRef,
                                  packageType: *mut UInt32,
                                  packageCreator: *mut UInt32) -> ();
    pub fn CFBundleGetIdentifier(bundle: CFBundleRef) -> CFStringRef;
    pub fn CFBundleGetVersionNumber(bundle: CFBundleRef) -> UInt32;
    pub fn CFBundleGetDevelopmentRegion(bundle: CFBundleRef) -> CFStringRef;
    pub fn CFBundleCopySupportFilesDirectoryURL(bundle: CFBundleRef)
     -> CFURLRef;
    pub fn CFBundleCopyResourcesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
    pub fn CFBundleCopyPrivateFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
    pub fn CFBundleCopySharedFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
    pub fn CFBundleCopySharedSupportURL(bundle: CFBundleRef) -> CFURLRef;
    pub fn CFBundleCopyBuiltInPlugInsURL(bundle: CFBundleRef) -> CFURLRef;
    pub fn CFBundleCopyInfoDictionaryInDirectory(bundleURL: CFURLRef)
     -> CFDictionaryRef;
    pub fn CFBundleGetPackageInfoInDirectory(url: CFURLRef,
                                             packageType: *mut UInt32,
                                             packageCreator: *mut UInt32)
     -> Boolean;
    pub fn CFBundleCopyResourceURL(bundle: CFBundleRef,
                                   resourceName: CFStringRef,
                                   resourceType: CFStringRef,
                                   subDirName: CFStringRef) -> CFURLRef;
    pub fn CFBundleCopyResourceURLsOfType(bundle: CFBundleRef,
                                          resourceType: CFStringRef,
                                          subDirName: CFStringRef)
     -> CFArrayRef;
    pub fn CFBundleCopyLocalizedString(bundle: CFBundleRef, key: CFStringRef,
                                       value: CFStringRef,
                                       tableName: CFStringRef) -> CFStringRef;
    pub fn CFBundleCopyResourceURLInDirectory(bundleURL: CFURLRef,
                                              resourceName: CFStringRef,
                                              resourceType: CFStringRef,
                                              subDirName: CFStringRef)
     -> CFURLRef;
    pub fn CFBundleCopyResourceURLsOfTypeInDirectory(bundleURL: CFURLRef,
                                                     resourceType:
                                                         CFStringRef,
                                                     subDirName: CFStringRef)
     -> CFArrayRef;
    pub fn CFBundleCopyBundleLocalizations(bundle: CFBundleRef) -> CFArrayRef;
    pub fn CFBundleCopyPreferredLocalizationsFromArray(locArray: CFArrayRef)
     -> CFArrayRef;
    pub fn CFBundleCopyLocalizationsForPreferences(locArray: CFArrayRef,
                                                   prefArray: CFArrayRef)
     -> CFArrayRef;
    pub fn CFBundleCopyResourceURLForLocalization(bundle: CFBundleRef,
                                                  resourceName: CFStringRef,
                                                  resourceType: CFStringRef,
                                                  subDirName: CFStringRef,
                                                  localizationName:
                                                      CFStringRef)
     -> CFURLRef;
    pub fn CFBundleCopyResourceURLsOfTypeForLocalization(bundle: CFBundleRef,
                                                         resourceType:
                                                             CFStringRef,
                                                         subDirName:
                                                             CFStringRef,
                                                         localizationName:
                                                             CFStringRef)
     -> CFArrayRef;
    pub fn CFBundleCopyInfoDictionaryForURL(url: CFURLRef) -> CFDictionaryRef;
    pub fn CFBundleCopyLocalizationsForURL(url: CFURLRef) -> CFArrayRef;
    pub fn CFBundleCopyExecutableArchitecturesForURL(url: CFURLRef)
     -> CFArrayRef;
    pub fn CFBundleCopyExecutableURL(bundle: CFBundleRef) -> CFURLRef;
    pub fn CFBundleCopyExecutableArchitectures(bundle: CFBundleRef)
     -> CFArrayRef;
    pub fn CFBundlePreflightExecutable(bundle: CFBundleRef,
                                       error: *mut CFErrorRef) -> Boolean;
    pub fn CFBundleLoadExecutableAndReturnError(bundle: CFBundleRef,
                                                error: *mut CFErrorRef)
     -> Boolean;
    pub fn CFBundleLoadExecutable(bundle: CFBundleRef) -> Boolean;
    pub fn CFBundleIsExecutableLoaded(bundle: CFBundleRef) -> Boolean;
    pub fn CFBundleUnloadExecutable(bundle: CFBundleRef) -> ();
    pub fn CFBundleGetFunctionPointerForName(bundle: CFBundleRef,
                                             functionName: CFStringRef)
     -> *mut ::libc::c_void;
    pub fn CFBundleGetFunctionPointersForNames(bundle: CFBundleRef,
                                               functionNames: CFArrayRef,
                                               ftbl: *mut *mut ::libc::c_void)
     -> ();
    pub fn CFBundleGetDataPointerForName(bundle: CFBundleRef,
                                         symbolName: CFStringRef)
     -> *mut ::libc::c_void;
    pub fn CFBundleGetDataPointersForNames(bundle: CFBundleRef,
                                           symbolNames: CFArrayRef,
                                           stbl: *mut *mut ::libc::c_void)
     -> ();
    pub fn CFBundleCopyAuxiliaryExecutableURL(bundle: CFBundleRef,
                                              executableName: CFStringRef)
     -> CFURLRef;
    pub fn CFBundleGetPlugIn(bundle: CFBundleRef) -> CFPlugInRef;
    pub fn CFBundleOpenBundleResourceMap(bundle: CFBundleRef)
     -> CFBundleRefNum;
    pub fn CFBundleOpenBundleResourceFiles(bundle: CFBundleRef,
                                           refNum: *mut CFBundleRefNum,
                                           localizedRefNum:
                                               *mut CFBundleRefNum) -> SInt32;
    pub fn CFBundleCloseBundleResourceMap(bundle: CFBundleRef,
                                          refNum: CFBundleRefNum) -> ();
    pub fn CFMessagePortGetTypeID() -> CFTypeID;
    pub fn CFMessagePortCreateLocal(allocator: CFAllocatorRef,
                                    name: CFStringRef,
                                    callout: CFMessagePortCallBack,
                                    context: *mut CFMessagePortContext,
                                    shouldFreeInfo: *mut Boolean)
     -> CFMessagePortRef;
    pub fn CFMessagePortCreateRemote(allocator: CFAllocatorRef,
                                     name: CFStringRef) -> CFMessagePortRef;
    pub fn CFMessagePortIsRemote(ms: CFMessagePortRef) -> Boolean;
    pub fn CFMessagePortGetName(ms: CFMessagePortRef) -> CFStringRef;
    pub fn CFMessagePortSetName(ms: CFMessagePortRef, newName: CFStringRef)
     -> Boolean;
    pub fn CFMessagePortGetContext(ms: CFMessagePortRef,
                                   context: *mut CFMessagePortContext) -> ();
    pub fn CFMessagePortInvalidate(ms: CFMessagePortRef) -> ();
    pub fn CFMessagePortIsValid(ms: CFMessagePortRef) -> Boolean;
    pub fn CFMessagePortGetInvalidationCallBack(ms: CFMessagePortRef)
     -> CFMessagePortInvalidationCallBack;
    pub fn CFMessagePortSetInvalidationCallBack(ms: CFMessagePortRef,
                                                callout:
                                                    CFMessagePortInvalidationCallBack)
     -> ();
    pub fn CFMessagePortSendRequest(remote: CFMessagePortRef, msgid: SInt32,
                                    data: CFDataRef,
                                    sendTimeout: CFTimeInterval,
                                    rcvTimeout: CFTimeInterval,
                                    replyMode: CFStringRef,
                                    returnData: *mut CFDataRef) -> SInt32;
    pub fn CFMessagePortCreateRunLoopSource(allocator: CFAllocatorRef,
                                            local: CFMessagePortRef,
                                            order: CFIndex)
     -> CFRunLoopSourceRef;
    pub fn CFMessagePortSetDispatchQueue(ms: CFMessagePortRef,
                                         queue: dispatch_queue_t) -> ();
    pub fn CFPlugInGetTypeID() -> CFTypeID;
    pub fn CFPlugInCreate(allocator: CFAllocatorRef, plugInURL: CFURLRef)
     -> CFPlugInRef;
    pub fn CFPlugInGetBundle(plugIn: CFPlugInRef) -> CFBundleRef;
    pub fn CFPlugInSetLoadOnDemand(plugIn: CFPlugInRef, flag: Boolean) -> ();
    pub fn CFPlugInIsLoadOnDemand(plugIn: CFPlugInRef) -> Boolean;
    pub fn CFPlugInFindFactoriesForPlugInType(typeUUID: CFUUIDRef)
     -> CFArrayRef;
    pub fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(typeUUID: CFUUIDRef,
                                                      plugIn: CFPlugInRef)
     -> CFArrayRef;
    pub fn CFPlugInInstanceCreate(allocator: CFAllocatorRef,
                                  factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef)
     -> *mut ::libc::c_void;
    pub fn CFPlugInRegisterFactoryFunction(factoryUUID: CFUUIDRef,
                                           func: CFPlugInFactoryFunction)
     -> Boolean;
    pub fn CFPlugInRegisterFactoryFunctionByName(factoryUUID: CFUUIDRef,
                                                 plugIn: CFPlugInRef,
                                                 functionName: CFStringRef)
     -> Boolean;
    pub fn CFPlugInUnregisterFactory(factoryUUID: CFUUIDRef) -> Boolean;
    pub fn CFPlugInRegisterPlugInType(factoryUUID: CFUUIDRef,
                                      typeUUID: CFUUIDRef) -> Boolean;
    pub fn CFPlugInUnregisterPlugInType(factoryUUID: CFUUIDRef,
                                        typeUUID: CFUUIDRef) -> Boolean;
    pub fn CFPlugInAddInstanceForFactory(factoryID: CFUUIDRef) -> ();
    pub fn CFPlugInRemoveInstanceForFactory(factoryID: CFUUIDRef) -> ();
    pub fn CFPlugInInstanceGetInterfaceFunctionTable(instance:
                                                         CFPlugInInstanceRef,
                                                     interfaceName:
                                                         CFStringRef,
                                                     ftbl:
                                                         *mut *mut ::libc::c_void)
     -> Boolean;
    pub fn CFPlugInInstanceGetFactoryName(instance: CFPlugInInstanceRef)
     -> CFStringRef;
    pub fn CFPlugInInstanceGetInstanceData(instance: CFPlugInInstanceRef)
     -> *mut ::libc::c_void;
    pub fn CFPlugInInstanceGetTypeID() -> CFTypeID;
    pub fn CFPlugInInstanceCreateWithInstanceDataSize(allocator:
                                                          CFAllocatorRef,
                                                      instanceDataSize:
                                                          CFIndex,
                                                      deallocateInstanceFunction:
                                                          CFPlugInInstanceDeallocateInstanceDataFunction,
                                                      factoryName:
                                                          CFStringRef,
                                                      getInterfaceFunction:
                                                          CFPlugInInstanceGetInterfaceFunction)
     -> CFPlugInInstanceRef;
    pub fn CFAttributedStringGetTypeID() -> CFTypeID;
    pub fn CFAttributedStringCreate(alloc: CFAllocatorRef, str: CFStringRef,
                                    attributes: CFDictionaryRef)
     -> CFAttributedStringRef;
    pub fn CFAttributedStringCreateWithSubstring(alloc: CFAllocatorRef,
                                                 aStr: CFAttributedStringRef,
                                                 range: CFRange)
     -> CFAttributedStringRef;
    pub fn CFAttributedStringCreateCopy(alloc: CFAllocatorRef,
                                        aStr: CFAttributedStringRef)
     -> CFAttributedStringRef;
    pub fn CFAttributedStringGetString(aStr: CFAttributedStringRef)
     -> CFStringRef;
    pub fn CFAttributedStringGetLength(aStr: CFAttributedStringRef)
     -> CFIndex;
    pub fn CFAttributedStringGetAttributes(aStr: CFAttributedStringRef,
                                           loc: CFIndex,
                                           effectiveRange: *mut CFRange)
     -> CFDictionaryRef;
    pub fn CFAttributedStringGetAttribute(aStr: CFAttributedStringRef,
                                          loc: CFIndex, attrName: CFStringRef,
                                          effectiveRange: *mut CFRange)
     -> CFTypeRef;
    pub fn CFAttributedStringGetAttributesAndLongestEffectiveRange(aStr:
                                                                       CFAttributedStringRef,
                                                                   loc:
                                                                       CFIndex,
                                                                   inRange:
                                                                       CFRange,
                                                                   longestEffectiveRange:
                                                                       *mut CFRange)
     -> CFDictionaryRef;
    pub fn CFAttributedStringGetAttributeAndLongestEffectiveRange(aStr:
                                                                      CFAttributedStringRef,
                                                                  loc:
                                                                      CFIndex,
                                                                  attrName:
                                                                      CFStringRef,
                                                                  inRange:
                                                                      CFRange,
                                                                  longestEffectiveRange:
                                                                      *mut CFRange)
     -> CFTypeRef;
    pub fn CFAttributedStringCreateMutableCopy(alloc: CFAllocatorRef,
                                               maxLength: CFIndex,
                                               aStr: CFAttributedStringRef)
     -> CFMutableAttributedStringRef;
    pub fn CFAttributedStringCreateMutable(alloc: CFAllocatorRef,
                                           maxLength: CFIndex)
     -> CFMutableAttributedStringRef;
    pub fn CFAttributedStringReplaceString(aStr: CFMutableAttributedStringRef,
                                           range: CFRange,
                                           replacement: CFStringRef) -> ();
    pub fn CFAttributedStringGetMutableString(aStr:
                                                  CFMutableAttributedStringRef)
     -> CFMutableStringRef;
    pub fn CFAttributedStringSetAttributes(aStr: CFMutableAttributedStringRef,
                                           range: CFRange,
                                           replacement: CFDictionaryRef,
                                           clearOtherAttributes: Boolean)
     -> ();
    pub fn CFAttributedStringSetAttribute(aStr: CFMutableAttributedStringRef,
                                          range: CFRange,
                                          attrName: CFStringRef,
                                          value: CFTypeRef) -> ();
    pub fn CFAttributedStringRemoveAttribute(aStr:
                                                 CFMutableAttributedStringRef,
                                             range: CFRange,
                                             attrName: CFStringRef) -> ();
    pub fn CFAttributedStringReplaceAttributedString(aStr:
                                                         CFMutableAttributedStringRef,
                                                     range: CFRange,
                                                     replacement:
                                                         CFAttributedStringRef)
     -> ();
    pub fn CFAttributedStringBeginEditing(aStr: CFMutableAttributedStringRef)
     -> ();
    pub fn CFAttributedStringEndEditing(aStr: CFMutableAttributedStringRef)
     -> ();
    pub fn CFNotificationCenterGetTypeID() -> CFTypeID;
    pub fn CFNotificationCenterGetLocalCenter() -> CFNotificationCenterRef;
    pub fn CFNotificationCenterGetDistributedCenter()
     -> CFNotificationCenterRef;
    pub fn CFNotificationCenterGetDarwinNotifyCenter()
     -> CFNotificationCenterRef;
    pub fn CFNotificationCenterAddObserver(center: CFNotificationCenterRef,
                                           observer: *const ::libc::c_void,
                                           callBack: CFNotificationCallback,
                                           name: CFStringRef,
                                           object: *const ::libc::c_void,
                                           suspensionBehavior:
                                               CFNotificationSuspensionBehavior)
     -> ();
    pub fn CFNotificationCenterRemoveObserver(center: CFNotificationCenterRef,
                                              observer: *const ::libc::c_void,
                                              name: CFStringRef,
                                              object: *const ::libc::c_void)
     -> ();
    pub fn CFNotificationCenterRemoveEveryObserver(center:
                                                       CFNotificationCenterRef,
                                                   observer:
                                                       *const ::libc::c_void)
     -> ();
    pub fn CFNotificationCenterPostNotification(center:
                                                    CFNotificationCenterRef,
                                                name: CFStringRef,
                                                object: *const ::libc::c_void,
                                                userInfo: CFDictionaryRef,
                                                deliverImmediately: Boolean)
     -> ();
    pub fn CFNotificationCenterPostNotificationWithOptions(center:
                                                               CFNotificationCenterRef,
                                                           name: CFStringRef,
                                                           object:
                                                               *const ::libc::c_void,
                                                           userInfo:
                                                               CFDictionaryRef,
                                                           options:
                                                               CFOptionFlags)
     -> ();
    pub fn CFURLEnumeratorGetTypeID() -> CFTypeID;
    pub fn CFURLEnumeratorCreateForDirectoryURL(alloc: CFAllocatorRef,
                                                directoryURL: CFURLRef,
                                                option:
                                                    CFURLEnumeratorOptions,
                                                propertyKeys: CFArrayRef)
     -> CFURLEnumeratorRef;
    pub fn CFURLEnumeratorCreateForMountedVolumes(alloc: CFAllocatorRef,
                                                  option:
                                                      CFURLEnumeratorOptions,
                                                  propertyKeys: CFArrayRef)
     -> CFURLEnumeratorRef;
    pub fn CFURLEnumeratorGetNextURL(enumerator: CFURLEnumeratorRef,
                                     url: *mut CFURLRef,
                                     error: *mut CFErrorRef)
     -> CFURLEnumeratorResult;
    pub fn CFURLEnumeratorSkipDescendents(enumerator: CFURLEnumeratorRef)
     -> ();
    pub fn CFURLEnumeratorGetDescendentLevel(enumerator: CFURLEnumeratorRef)
     -> CFIndex;
    pub fn CFURLEnumeratorGetSourceDidChange(enumerator: CFURLEnumeratorRef)
     -> Boolean;
    pub fn acl_dup(acl: acl_t) -> acl_t;
    pub fn acl_free(obj_p: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn acl_init(count: ::libc::c_int) -> acl_t;
    pub fn acl_copy_entry(dest_d: acl_entry_t, src_d: acl_entry_t)
     -> ::libc::c_int;
    pub fn acl_create_entry(acl_p: *mut acl_t, entry_p: *mut acl_entry_t)
     -> ::libc::c_int;
    pub fn acl_create_entry_np(acl_p: *mut acl_t, entry_p: *mut acl_entry_t,
                               entry_index: ::libc::c_int) -> ::libc::c_int;
    pub fn acl_delete_entry(acl: acl_t, entry_d: acl_entry_t)
     -> ::libc::c_int;
    pub fn acl_get_entry(acl: acl_t, entry_id: ::libc::c_int,
                         entry_p: *mut acl_entry_t) -> ::libc::c_int;
    pub fn acl_valid(acl: acl_t) -> ::libc::c_int;
    pub fn acl_valid_fd_np(fd: ::libc::c_int, _type: acl_type_t, acl: acl_t)
     -> ::libc::c_int;
    pub fn acl_valid_file_np(path: *const ::libc::c_char, _type: acl_type_t,
                             acl: acl_t) -> ::libc::c_int;
    pub fn acl_valid_link_np(path: *const ::libc::c_char, _type: acl_type_t,
                             acl: acl_t) -> ::libc::c_int;
    pub fn acl_add_perm(permset_d: acl_permset_t, perm: acl_perm_t)
     -> ::libc::c_int;
    pub fn acl_calc_mask(acl_p: *mut acl_t) -> ::libc::c_int;
    pub fn acl_clear_perms(permset_d: acl_permset_t) -> ::libc::c_int;
    pub fn acl_delete_perm(permset_d: acl_permset_t, perm: acl_perm_t)
     -> ::libc::c_int;
    pub fn acl_get_perm_np(permset_d: acl_permset_t, perm: acl_perm_t)
     -> ::libc::c_int;
    pub fn acl_get_permset(entry_d: acl_entry_t,
                           permset_p: *mut acl_permset_t) -> ::libc::c_int;
    pub fn acl_set_permset(entry_d: acl_entry_t, permset_d: acl_permset_t)
     -> ::libc::c_int;
    pub fn acl_maximal_permset_mask_np(mask_p: *mut acl_permset_mask_t)
     -> ::libc::c_int;
    pub fn acl_get_permset_mask_np(entry_d: acl_entry_t,
                                   mask_p: *mut acl_permset_mask_t)
     -> ::libc::c_int;
    pub fn acl_set_permset_mask_np(entry_d: acl_entry_t,
                                   mask: acl_permset_mask_t) -> ::libc::c_int;
    pub fn acl_add_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t)
     -> ::libc::c_int;
    pub fn acl_clear_flags_np(flagset_d: acl_flagset_t) -> ::libc::c_int;
    pub fn acl_delete_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t)
     -> ::libc::c_int;
    pub fn acl_get_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t)
     -> ::libc::c_int;
    pub fn acl_get_flagset_np(obj_p: *mut ::libc::c_void,
                              flagset_p: *mut acl_flagset_t) -> ::libc::c_int;
    pub fn acl_set_flagset_np(obj_p: *mut ::libc::c_void,
                              flagset_d: acl_flagset_t) -> ::libc::c_int;
    pub fn acl_get_qualifier(entry_d: acl_entry_t) -> *mut ::libc::c_void;
    pub fn acl_get_tag_type(entry_d: acl_entry_t, tag_type_p: *mut acl_tag_t)
     -> ::libc::c_int;
    pub fn acl_set_qualifier(entry_d: acl_entry_t,
                             tag_qualifier_p: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn acl_set_tag_type(entry_d: acl_entry_t, tag_type: acl_tag_t)
     -> ::libc::c_int;
    pub fn acl_delete_def_file(path_p: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn acl_get_fd(fd: ::libc::c_int) -> acl_t;
    pub fn acl_get_fd_np(fd: ::libc::c_int, _type: acl_type_t) -> acl_t;
    pub fn acl_get_file(path_p: *const ::libc::c_char, _type: acl_type_t)
     -> acl_t;
    pub fn acl_get_link_np(path_p: *const ::libc::c_char, _type: acl_type_t)
     -> acl_t;
    pub fn acl_set_fd(fd: ::libc::c_int, acl: acl_t) -> ::libc::c_int;
    pub fn acl_set_fd_np(fd: ::libc::c_int, acl: acl_t, acl_type: acl_type_t)
     -> ::libc::c_int;
    pub fn acl_set_file(path_p: *const ::libc::c_char, _type: acl_type_t,
                        acl: acl_t) -> ::libc::c_int;
    pub fn acl_set_link_np(path_p: *const ::libc::c_char, _type: acl_type_t,
                           acl: acl_t) -> ::libc::c_int;
    pub fn acl_copy_ext(buf_p: *mut ::libc::c_void, acl: acl_t, size: ssize_t)
     -> ssize_t;
    pub fn acl_copy_ext_native(buf_p: *mut ::libc::c_void, acl: acl_t,
                               size: ssize_t) -> ssize_t;
    pub fn acl_copy_int(buf_p: *const ::libc::c_void) -> acl_t;
    pub fn acl_copy_int_native(buf_p: *const ::libc::c_void) -> acl_t;
    pub fn acl_from_text(buf_p: *const ::libc::c_char) -> acl_t;
    pub fn acl_size(acl: acl_t) -> ssize_t;
    pub fn acl_to_text(acl: acl_t, len_p: *mut ssize_t)
     -> *mut ::libc::c_char;
    pub fn CFFileSecurityGetTypeID() -> CFTypeID;
    pub fn CFFileSecurityCreate(allocator: CFAllocatorRef)
     -> CFFileSecurityRef;
    pub fn CFFileSecurityCreateCopy(allocator: CFAllocatorRef,
                                    fileSec: CFFileSecurityRef)
     -> CFFileSecurityRef;
    pub fn CFFileSecurityCopyOwnerUUID(fileSec: CFFileSecurityRef,
                                       ownerUUID: *mut CFUUIDRef) -> Boolean;
    pub fn CFFileSecuritySetOwnerUUID(fileSec: CFFileSecurityRef,
                                      ownerUUID: CFUUIDRef) -> Boolean;
    pub fn CFFileSecurityCopyGroupUUID(fileSec: CFFileSecurityRef,
                                       groupUUID: *mut CFUUIDRef) -> Boolean;
    pub fn CFFileSecuritySetGroupUUID(fileSec: CFFileSecurityRef,
                                      groupUUID: CFUUIDRef) -> Boolean;
    pub fn CFFileSecurityCopyAccessControlList(fileSec: CFFileSecurityRef,
                                               accessControlList: *mut acl_t)
     -> Boolean;
    pub fn CFFileSecuritySetAccessControlList(fileSec: CFFileSecurityRef,
                                              accessControlList: acl_t)
     -> Boolean;
    pub fn CFFileSecurityGetOwner(fileSec: CFFileSecurityRef,
                                  owner: *mut uid_t) -> Boolean;
    pub fn CFFileSecuritySetOwner(fileSec: CFFileSecurityRef, owner: uid_t)
     -> Boolean;
    pub fn CFFileSecurityGetGroup(fileSec: CFFileSecurityRef,
                                  group: *mut gid_t) -> Boolean;
    pub fn CFFileSecuritySetGroup(fileSec: CFFileSecurityRef, group: gid_t)
     -> Boolean;
    pub fn CFFileSecurityGetMode(fileSec: CFFileSecurityRef,
                                 mode: *mut mode_t) -> Boolean;
    pub fn CFFileSecuritySetMode(fileSec: CFFileSecurityRef, mode: mode_t)
     -> Boolean;
    pub fn CFFileSecurityClearProperties(fileSec: CFFileSecurityRef,
                                         clearPropertyMask:
                                             CFFileSecurityClearOptions)
     -> Boolean;
    pub fn CFMachPortGetTypeID() -> CFTypeID;
    pub fn CFMachPortCreate(allocator: CFAllocatorRef,
                            callout: CFMachPortCallBack,
                            context: *mut CFMachPortContext,
                            shouldFreeInfo: *mut Boolean) -> CFMachPortRef;
    pub fn CFMachPortCreateWithPort(allocator: CFAllocatorRef,
                                    portNum: mach_port_t,
                                    callout: CFMachPortCallBack,
                                    context: *mut CFMachPortContext,
                                    shouldFreeInfo: *mut Boolean)
     -> CFMachPortRef;
    pub fn CFMachPortGetPort(port: CFMachPortRef) -> mach_port_t;
    pub fn CFMachPortGetContext(port: CFMachPortRef,
                                context: *mut CFMachPortContext) -> ();
    pub fn CFMachPortInvalidate(port: CFMachPortRef) -> ();
    pub fn CFMachPortIsValid(port: CFMachPortRef) -> Boolean;
    pub fn CFMachPortGetInvalidationCallBack(port: CFMachPortRef)
     -> CFMachPortInvalidationCallBack;
    pub fn CFMachPortSetInvalidationCallBack(port: CFMachPortRef,
                                             callout:
                                                 CFMachPortInvalidationCallBack)
     -> ();
    pub fn CFMachPortCreateRunLoopSource(allocator: CFAllocatorRef,
                                         port: CFMachPortRef, order: CFIndex)
     -> CFRunLoopSourceRef;
    pub fn CFStringTokenizerCopyBestStringLanguage(string: CFStringRef,
                                                   range: CFRange)
     -> CFStringRef;
    pub fn CFStringTokenizerGetTypeID() -> CFTypeID;
    pub fn CFStringTokenizerCreate(alloc: CFAllocatorRef, string: CFStringRef,
                                   range: CFRange, options: CFOptionFlags,
                                   locale: CFLocaleRef)
     -> CFStringTokenizerRef;
    pub fn CFStringTokenizerSetString(tokenizer: CFStringTokenizerRef,
                                      string: CFStringRef, range: CFRange)
     -> ();
    pub fn CFStringTokenizerGoToTokenAtIndex(tokenizer: CFStringTokenizerRef,
                                             index: CFIndex)
     -> CFStringTokenizerTokenType;
    pub fn CFStringTokenizerAdvanceToNextToken(tokenizer:
                                                   CFStringTokenizerRef)
     -> CFStringTokenizerTokenType;
    pub fn CFStringTokenizerGetCurrentTokenRange(tokenizer:
                                                     CFStringTokenizerRef)
     -> CFRange;
    pub fn CFStringTokenizerCopyCurrentTokenAttribute(tokenizer:
                                                          CFStringTokenizerRef,
                                                      attribute:
                                                          CFOptionFlags)
     -> CFTypeRef;
    pub fn CFStringTokenizerGetCurrentSubTokens(tokenizer:
                                                    CFStringTokenizerRef,
                                                ranges: *mut CFRange,
                                                maxRangeLength: CFIndex,
                                                derivedSubTokens:
                                                    CFMutableArrayRef)
     -> CFIndex;
    pub fn CFFileDescriptorGetTypeID() -> CFTypeID;
    pub fn CFFileDescriptorCreate(allocator: CFAllocatorRef,
                                  fd: CFFileDescriptorNativeDescriptor,
                                  closeOnInvalidate: Boolean,
                                  callout: CFFileDescriptorCallBack,
                                  context: *const CFFileDescriptorContext)
     -> CFFileDescriptorRef;
    pub fn CFFileDescriptorGetNativeDescriptor(f: CFFileDescriptorRef)
     -> CFFileDescriptorNativeDescriptor;
    pub fn CFFileDescriptorGetContext(f: CFFileDescriptorRef,
                                      context: *mut CFFileDescriptorContext)
     -> ();
    pub fn CFFileDescriptorEnableCallBacks(f: CFFileDescriptorRef,
                                           callBackTypes: CFOptionFlags)
     -> ();
    pub fn CFFileDescriptorDisableCallBacks(f: CFFileDescriptorRef,
                                            callBackTypes: CFOptionFlags)
     -> ();
    pub fn CFFileDescriptorInvalidate(f: CFFileDescriptorRef) -> ();
    pub fn CFFileDescriptorIsValid(f: CFFileDescriptorRef) -> Boolean;
    pub fn CFFileDescriptorCreateRunLoopSource(allocator: CFAllocatorRef,
                                               f: CFFileDescriptorRef,
                                               order: CFIndex)
     -> CFRunLoopSourceRef;
    pub fn CFUserNotificationGetTypeID() -> CFTypeID;
    pub fn CFUserNotificationCreate(allocator: CFAllocatorRef,
                                    timeout: CFTimeInterval,
                                    flags: CFOptionFlags, error: *mut SInt32,
                                    dictionary: CFDictionaryRef)
     -> CFUserNotificationRef;
    pub fn CFUserNotificationReceiveResponse(userNotification:
                                                 CFUserNotificationRef,
                                             timeout: CFTimeInterval,
                                             responseFlags:
                                                 *mut CFOptionFlags)
     -> SInt32;
    pub fn CFUserNotificationGetResponseValue(userNotification:
                                                  CFUserNotificationRef,
                                              key: CFStringRef, idx: CFIndex)
     -> CFStringRef;
    pub fn CFUserNotificationGetResponseDictionary(userNotification:
                                                       CFUserNotificationRef)
     -> CFDictionaryRef;
    pub fn CFUserNotificationUpdate(userNotification: CFUserNotificationRef,
                                    timeout: CFTimeInterval,
                                    flags: CFOptionFlags,
                                    dictionary: CFDictionaryRef) -> SInt32;
    pub fn CFUserNotificationCancel(userNotification: CFUserNotificationRef)
     -> SInt32;
    pub fn CFUserNotificationCreateRunLoopSource(allocator: CFAllocatorRef,
                                                 userNotification:
                                                     CFUserNotificationRef,
                                                 callout:
                                                     CFUserNotificationCallBack,
                                                 order: CFIndex)
     -> CFRunLoopSourceRef;
    pub fn CFUserNotificationDisplayNotice(timeout: CFTimeInterval,
                                           flags: CFOptionFlags,
                                           iconURL: CFURLRef,
                                           soundURL: CFURLRef,
                                           localizationURL: CFURLRef,
                                           alertHeader: CFStringRef,
                                           alertMessage: CFStringRef,
                                           defaultButtonTitle: CFStringRef)
     -> SInt32;
    pub fn CFUserNotificationDisplayAlert(timeout: CFTimeInterval,
                                          flags: CFOptionFlags,
                                          iconURL: CFURLRef,
                                          soundURL: CFURLRef,
                                          localizationURL: CFURLRef,
                                          alertHeader: CFStringRef,
                                          alertMessage: CFStringRef,
                                          defaultButtonTitle: CFStringRef,
                                          alternateButtonTitle: CFStringRef,
                                          otherButtonTitle: CFStringRef,
                                          responseFlags: *mut CFOptionFlags)
     -> SInt32;
    pub fn CFXMLNodeGetTypeID() -> CFTypeID;
    pub fn CFXMLNodeCreate(alloc: CFAllocatorRef, xmlType: CFXMLNodeTypeCode,
                           dataString: CFStringRef,
                           additionalInfoPtr: *const ::libc::c_void,
                           version: CFIndex) -> CFXMLNodeRef;
    pub fn CFXMLNodeCreateCopy(alloc: CFAllocatorRef, origNode: CFXMLNodeRef)
     -> CFXMLNodeRef;
    pub fn CFXMLNodeGetTypeCode(node: CFXMLNodeRef) -> CFXMLNodeTypeCode;
    pub fn CFXMLNodeGetString(node: CFXMLNodeRef) -> CFStringRef;
    pub fn CFXMLNodeGetInfoPtr(node: CFXMLNodeRef) -> *const ::libc::c_void;
    pub fn CFXMLNodeGetVersion(node: CFXMLNodeRef) -> CFIndex;
    pub fn CFXMLTreeCreateWithNode(allocator: CFAllocatorRef,
                                   node: CFXMLNodeRef) -> CFXMLTreeRef;
    pub fn CFXMLTreeGetNode(xmlTree: CFXMLTreeRef) -> CFXMLNodeRef;
    pub fn CFXMLParserGetTypeID() -> CFTypeID;
    pub fn CFXMLParserCreate(allocator: CFAllocatorRef, xmlData: CFDataRef,
                             dataSource: CFURLRef,
                             parseOptions: CFOptionFlags,
                             versionOfNodes: CFIndex,
                             callBacks: *mut CFXMLParserCallBacks,
                             context: *mut CFXMLParserContext)
     -> CFXMLParserRef;
    pub fn CFXMLParserCreateWithDataFromURL(allocator: CFAllocatorRef,
                                            dataSource: CFURLRef,
                                            parseOptions: CFOptionFlags,
                                            versionOfNodes: CFIndex,
                                            callBacks:
                                                *mut CFXMLParserCallBacks,
                                            context: *mut CFXMLParserContext)
     -> CFXMLParserRef;
    pub fn CFXMLParserGetContext(parser: CFXMLParserRef,
                                 context: *mut CFXMLParserContext) -> ();
    pub fn CFXMLParserGetCallBacks(parser: CFXMLParserRef,
                                   callBacks: *mut CFXMLParserCallBacks)
     -> ();
    pub fn CFXMLParserGetSourceURL(parser: CFXMLParserRef) -> CFURLRef;
    pub fn CFXMLParserGetLocation(parser: CFXMLParserRef) -> CFIndex;
    pub fn CFXMLParserGetLineNumber(parser: CFXMLParserRef) -> CFIndex;
    pub fn CFXMLParserGetDocument(parser: CFXMLParserRef)
     -> *mut ::libc::c_void;
    pub fn CFXMLParserGetStatusCode(parser: CFXMLParserRef)
     -> CFXMLParserStatusCode;
    pub fn CFXMLParserCopyErrorDescription(parser: CFXMLParserRef)
     -> CFStringRef;
    pub fn CFXMLParserAbort(parser: CFXMLParserRef,
                            errorCode: CFXMLParserStatusCode,
                            errorDescription: CFStringRef) -> ();
    pub fn CFXMLParserParse(parser: CFXMLParserRef) -> Boolean;
    pub fn CFXMLTreeCreateFromData(allocator: CFAllocatorRef,
                                   xmlData: CFDataRef, dataSource: CFURLRef,
                                   parseOptions: CFOptionFlags,
                                   versionOfNodes: CFIndex) -> CFXMLTreeRef;
    pub fn CFXMLTreeCreateFromDataWithError(allocator: CFAllocatorRef,
                                            xmlData: CFDataRef,
                                            dataSource: CFURLRef,
                                            parseOptions: CFOptionFlags,
                                            versionOfNodes: CFIndex,
                                            errorDict: *mut CFDictionaryRef)
     -> CFXMLTreeRef;
    pub fn CFXMLTreeCreateWithDataFromURL(allocator: CFAllocatorRef,
                                          dataSource: CFURLRef,
                                          parseOptions: CFOptionFlags,
                                          versionOfNodes: CFIndex)
     -> CFXMLTreeRef;
    pub fn CFXMLTreeCreateXMLData(allocator: CFAllocatorRef,
                                  xmlTree: CFXMLTreeRef) -> CFDataRef;
    pub fn CFXMLCreateStringByEscapingEntities(allocator: CFAllocatorRef,
                                               string: CFStringRef,
                                               entitiesDictionary:
                                                   CFDictionaryRef)
     -> CFStringRef;
    pub fn CFXMLCreateStringByUnescapingEntities(allocator: CFAllocatorRef,
                                                 string: CFStringRef,
                                                 entitiesDictionary:
                                                     CFDictionaryRef)
     -> CFStringRef;
    pub fn AudioComponentFindNext(inComponent: AudioComponent,
                                  inDesc: *const AudioComponentDescription)
     -> AudioComponent;
    pub fn AudioComponentCount(inDesc: *const AudioComponentDescription)
     -> UInt32;
    pub fn AudioComponentCopyName(inComponent: AudioComponent,
                                  outName: *mut CFStringRef) -> OSStatus;
    pub fn AudioComponentGetDescription(inComponent: AudioComponent,
                                        outDesc:
                                            *mut AudioComponentDescription)
     -> OSStatus;
    pub fn AudioComponentGetVersion(inComponent: AudioComponent,
                                    outVersion: *mut UInt32) -> OSStatus;
    pub fn AudioComponentInstanceNew(inComponent: AudioComponent,
                                     outInstance: *mut AudioComponentInstance)
     -> OSStatus;
    pub fn AudioComponentInstanceDispose(inInstance: AudioComponentInstance)
     -> OSStatus;
    pub fn AudioComponentInstanceGetComponent(inInstance:
                                                  AudioComponentInstance)
     -> AudioComponent;
    pub fn AudioComponentInstanceCanDo(inInstance: AudioComponentInstance,
                                       inSelectorID: SInt16) -> Boolean;
    pub fn AudioComponentRegister(inDesc: *const AudioComponentDescription,
                                  inName: CFStringRef, inVersion: UInt32,
                                  inFactory: AudioComponentFactoryFunction)
     -> AudioComponent;
    pub fn AudioComponentCopyConfigurationInfo(inComponent: AudioComponent,
                                               outConfigurationInfo:
                                                   *mut CFDictionaryRef)
     -> OSStatus;
    pub fn AudioUnitInitialize(inUnit: AudioUnit) -> OSStatus;
    pub fn AudioUnitUninitialize(inUnit: AudioUnit) -> OSStatus;
    pub fn AudioUnitGetPropertyInfo(inUnit: AudioUnit,
                                    inID: AudioUnitPropertyID,
                                    inScope: AudioUnitScope,
                                    inElement: AudioUnitElement,
                                    outDataSize: *mut UInt32,
                                    outWritable: *mut Boolean) -> OSStatus;
    pub fn AudioUnitGetProperty(inUnit: AudioUnit, inID: AudioUnitPropertyID,
                                inScope: AudioUnitScope,
                                inElement: AudioUnitElement,
                                outData: *mut ::libc::c_void,
                                ioDataSize: *mut UInt32) -> OSStatus;
    pub fn AudioUnitSetProperty(inUnit: AudioUnit, inID: AudioUnitPropertyID,
                                inScope: AudioUnitScope,
                                inElement: AudioUnitElement,
                                inData: *const ::libc::c_void,
                                inDataSize: UInt32) -> OSStatus;
    pub fn AudioUnitAddPropertyListener(inUnit: AudioUnit,
                                        inID: AudioUnitPropertyID,
                                        inProc: AudioUnitPropertyListenerProc,
                                        inProcUserData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioUnitRemovePropertyListenerWithUserData(inUnit: AudioUnit,
                                                       inID:
                                                           AudioUnitPropertyID,
                                                       inProc:
                                                           AudioUnitPropertyListenerProc,
                                                       inProcUserData:
                                                           *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioUnitAddRenderNotify(inUnit: AudioUnit,
                                    inProc: AURenderCallback,
                                    inProcUserData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioUnitRemoveRenderNotify(inUnit: AudioUnit,
                                       inProc: AURenderCallback,
                                       inProcUserData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioUnitGetParameter(inUnit: AudioUnit,
                                 inID: AudioUnitParameterID,
                                 inScope: AudioUnitScope,
                                 inElement: AudioUnitElement,
                                 outValue: *mut AudioUnitParameterValue)
     -> OSStatus;
    pub fn AudioUnitSetParameter(inUnit: AudioUnit,
                                 inID: AudioUnitParameterID,
                                 inScope: AudioUnitScope,
                                 inElement: AudioUnitElement,
                                 inValue: AudioUnitParameterValue,
                                 inBufferOffsetInFrames: UInt32) -> OSStatus;
    pub fn AudioUnitScheduleParameters(inUnit: AudioUnit,
                                       inParameterEvent:
                                           *const AudioUnitParameterEvent,
                                       inNumParamEvents: UInt32) -> OSStatus;
    pub fn AudioUnitRender(inUnit: AudioUnit,
                           ioActionFlags: *mut AudioUnitRenderActionFlags,
                           inTimeStamp: *const AudioTimeStamp,
                           inOutputBusNumber: UInt32, inNumberFrames: UInt32,
                           ioData: *mut AudioBufferList) -> OSStatus;
    pub fn AudioUnitProcess(inUnit: AudioUnit,
                            ioActionFlags: *mut AudioUnitRenderActionFlags,
                            inTimeStamp: *const AudioTimeStamp,
                            inNumberFrames: UInt32,
                            ioData: *mut AudioBufferList) -> OSStatus;
    pub fn AudioUnitProcessMultiple(inUnit: AudioUnit,
                                    ioActionFlags:
                                        *mut AudioUnitRenderActionFlags,
                                    inTimeStamp: *const AudioTimeStamp,
                                    inNumberFrames: UInt32,
                                    inNumberInputBufferLists: UInt32,
                                    inInputBufferLists:
                                        *mut *const AudioBufferList,
                                    inNumberOutputBufferLists: UInt32,
                                    ioOutputBufferLists:
                                        *mut *mut AudioBufferList)
     -> OSStatus;
    pub fn AudioUnitReset(inUnit: AudioUnit, inScope: AudioUnitScope,
                          inElement: AudioUnitElement) -> OSStatus;
    pub fn AudioOutputUnitStart(ci: AudioUnit) -> OSStatus;
    pub fn AudioOutputUnitStop(ci: AudioUnit) -> OSStatus;
    pub fn MusicDeviceMIDIEvent(inUnit: MusicDeviceComponent,
                                inStatus: UInt32, inData1: UInt32,
                                inData2: UInt32, inOffsetSampleFrame: UInt32)
     -> OSStatus;
    pub fn MusicDeviceSysEx(inUnit: MusicDeviceComponent,
                            inData: *const UInt8, inLength: UInt32)
     -> OSStatus;
    pub fn MusicDeviceStartNote(inUnit: MusicDeviceComponent,
                                inInstrument: MusicDeviceInstrumentID,
                                inGroupID: MusicDeviceGroupID,
                                outNoteInstanceID: *mut NoteInstanceID,
                                inOffsetSampleFrame: UInt32,
                                inParams: *const MusicDeviceNoteParams)
     -> OSStatus;
    pub fn MusicDeviceStopNote(inUnit: MusicDeviceComponent,
                               inGroupID: MusicDeviceGroupID,
                               inNoteInstanceID: NoteInstanceID,
                               inOffsetSampleFrame: UInt32) -> OSStatus;
    pub fn MusicDevicePrepareInstrument(inUnit: MusicDeviceComponent,
                                        inInstrument: MusicDeviceInstrumentID)
     -> OSStatus;
    pub fn MusicDeviceReleaseInstrument(inUnit: MusicDeviceComponent,
                                        inInstrument: MusicDeviceInstrumentID)
     -> OSStatus;
    pub fn AudioCodecGetPropertyInfo(inCodec: AudioCodec,
                                     inPropertyID: AudioCodecPropertyID,
                                     outSize: *mut UInt32,
                                     outWritable: *mut Boolean) -> OSStatus;
    pub fn AudioCodecGetProperty(inCodec: AudioCodec,
                                 inPropertyID: AudioCodecPropertyID,
                                 ioPropertyDataSize: *mut UInt32,
                                 outPropertyData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioCodecSetProperty(inCodec: AudioCodec,
                                 inPropertyID: AudioCodecPropertyID,
                                 inPropertyDataSize: UInt32,
                                 inPropertyData: *const ::libc::c_void)
     -> OSStatus;
    pub fn AudioCodecInitialize(inCodec: AudioCodec,
                                inInputFormat:
                                    *const AudioStreamBasicDescription,
                                inOutputFormat:
                                    *const AudioStreamBasicDescription,
                                inMagicCookie: *const ::libc::c_void,
                                inMagicCookieByteSize: UInt32) -> OSStatus;
    pub fn AudioCodecUninitialize(inCodec: AudioCodec) -> OSStatus;
    pub fn AudioCodecAppendInputData(inCodec: AudioCodec,
                                     inInputData: *const ::libc::c_void,
                                     ioInputDataByteSize: *mut UInt32,
                                     ioNumberPackets: *mut UInt32,
                                     inPacketDescription:
                                         *const AudioStreamPacketDescription)
     -> OSStatus;
    pub fn AudioCodecProduceOutputPackets(inCodec: AudioCodec,
                                          outOutputData: *mut ::libc::c_void,
                                          ioOutputDataByteSize: *mut UInt32,
                                          ioNumberPackets: *mut UInt32,
                                          outPacketDescription:
                                              *mut AudioStreamPacketDescription,
                                          outStatus: *mut UInt32) -> OSStatus;
    pub fn AudioCodecAppendInputBufferList(inCodec: AudioCodec,
                                           inBufferList:
                                               *const AudioBufferList,
                                           ioNumberPackets: *mut UInt32,
                                           inPacketDescription:
                                               *const AudioStreamPacketDescription,
                                           outBytesConsumed: *mut UInt32)
     -> OSStatus;
    pub fn AudioCodecProduceOutputBufferList(inCodec: AudioCodec,
                                             ioBufferList:
                                                 *mut AudioBufferList,
                                             ioNumberPackets: *mut UInt32,
                                             outPacketDescription:
                                                 *mut AudioStreamPacketDescription,
                                             outStatus: *mut UInt32)
     -> OSStatus;
    pub fn AudioCodecReset(inCodec: AudioCodec) -> OSStatus;
    pub fn AudioFileCreateWithURL(inFileRef: CFURLRef,
                                  inFileType: AudioFileTypeID,
                                  inFormat:
                                      *const AudioStreamBasicDescription,
                                  inFlags: UInt32,
                                  outAudioFile: *mut AudioFileID) -> OSStatus;
    pub fn AudioFileOpenURL(inFileRef: CFURLRef, inPermissions: SInt8,
                            inFileTypeHint: AudioFileTypeID,
                            outAudioFile: *mut AudioFileID) -> OSStatus;
    pub fn AudioFileInitializeWithCallbacks(inClientData: *mut ::libc::c_void,
                                            inReadFunc: AudioFile_ReadProc,
                                            inWriteFunc: AudioFile_WriteProc,
                                            inGetSizeFunc:
                                                AudioFile_GetSizeProc,
                                            inSetSizeFunc:
                                                AudioFile_SetSizeProc,
                                            inFileType: AudioFileTypeID,
                                            inFormat:
                                                *const AudioStreamBasicDescription,
                                            inFlags: UInt32,
                                            outAudioFile: *mut AudioFileID)
     -> OSStatus;
    pub fn AudioFileOpenWithCallbacks(inClientData: *mut ::libc::c_void,
                                      inReadFunc: AudioFile_ReadProc,
                                      inWriteFunc: AudioFile_WriteProc,
                                      inGetSizeFunc: AudioFile_GetSizeProc,
                                      inSetSizeFunc: AudioFile_SetSizeProc,
                                      inFileTypeHint: AudioFileTypeID,
                                      outAudioFile: *mut AudioFileID)
     -> OSStatus;
    pub fn AudioFileClose(inAudioFile: AudioFileID) -> OSStatus;
    pub fn AudioFileOptimize(inAudioFile: AudioFileID) -> OSStatus;
    pub fn AudioFileReadBytes(inAudioFile: AudioFileID, inUseCache: Boolean,
                              inStartingByte: SInt64, ioNumBytes: *mut UInt32,
                              outBuffer: *mut ::libc::c_void) -> OSStatus;
    pub fn AudioFileWriteBytes(inAudioFile: AudioFileID, inUseCache: Boolean,
                               inStartingByte: SInt64,
                               ioNumBytes: *mut UInt32,
                               inBuffer: *const ::libc::c_void) -> OSStatus;
    pub fn AudioFileReadPacketData(inAudioFile: AudioFileID,
                                   inUseCache: Boolean,
                                   ioNumBytes: *mut UInt32,
                                   outPacketDescriptions:
                                       *mut AudioStreamPacketDescription,
                                   inStartingPacket: SInt64,
                                   ioNumPackets: *mut UInt32,
                                   outBuffer: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileReadPackets(inAudioFile: AudioFileID, inUseCache: Boolean,
                                outNumBytes: *mut UInt32,
                                outPacketDescriptions:
                                    *mut AudioStreamPacketDescription,
                                inStartingPacket: SInt64,
                                ioNumPackets: *mut UInt32,
                                outBuffer: *mut ::libc::c_void) -> OSStatus;
    pub fn AudioFileWritePackets(inAudioFile: AudioFileID,
                                 inUseCache: Boolean, inNumBytes: UInt32,
                                 inPacketDescriptions:
                                     *const AudioStreamPacketDescription,
                                 inStartingPacket: SInt64,
                                 ioNumPackets: *mut UInt32,
                                 inBuffer: *const ::libc::c_void) -> OSStatus;
    pub fn AudioFileCountUserData(inAudioFile: AudioFileID,
                                  inUserDataID: UInt32,
                                  outNumberItems: *mut UInt32) -> OSStatus;
    pub fn AudioFileGetUserDataSize(inAudioFile: AudioFileID,
                                    inUserDataID: UInt32, inIndex: UInt32,
                                    outUserDataSize: *mut UInt32) -> OSStatus;
    pub fn AudioFileGetUserData(inAudioFile: AudioFileID,
                                inUserDataID: UInt32, inIndex: UInt32,
                                ioUserDataSize: *mut UInt32,
                                outUserData: *mut ::libc::c_void) -> OSStatus;
    pub fn AudioFileSetUserData(inAudioFile: AudioFileID,
                                inUserDataID: UInt32, inIndex: UInt32,
                                inUserDataSize: UInt32,
                                inUserData: *const ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileRemoveUserData(inAudioFile: AudioFileID,
                                   inUserDataID: UInt32, inIndex: UInt32)
     -> OSStatus;
    pub fn AudioFileGetPropertyInfo(inAudioFile: AudioFileID,
                                    inPropertyID: AudioFilePropertyID,
                                    outDataSize: *mut UInt32,
                                    isWritable: *mut UInt32) -> OSStatus;
    pub fn AudioFileGetProperty(inAudioFile: AudioFileID,
                                inPropertyID: AudioFilePropertyID,
                                ioDataSize: *mut UInt32,
                                outPropertyData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileSetProperty(inAudioFile: AudioFileID,
                                inPropertyID: AudioFilePropertyID,
                                inDataSize: UInt32,
                                inPropertyData: *const ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileGetGlobalInfoSize(inPropertyID: AudioFilePropertyID,
                                      inSpecifierSize: UInt32,
                                      inSpecifier: *mut ::libc::c_void,
                                      outDataSize: *mut UInt32) -> OSStatus;
    pub fn AudioFileGetGlobalInfo(inPropertyID: AudioFilePropertyID,
                                  inSpecifierSize: UInt32,
                                  inSpecifier: *mut ::libc::c_void,
                                  ioDataSize: *mut UInt32,
                                  outPropertyData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileCreate(inParentRef: *const Struct_FSRef,
                           inFileName: CFStringRef,
                           inFileType: AudioFileTypeID,
                           inFormat: *const AudioStreamBasicDescription,
                           inFlags: UInt32, outNewFileRef: *mut Struct_FSRef,
                           outAudioFile: *mut AudioFileID) -> OSStatus;
    pub fn AudioFileInitialize(inFileRef: *const Struct_FSRef,
                               inFileType: AudioFileTypeID,
                               inFormat: *const AudioStreamBasicDescription,
                               inFlags: UInt32,
                               outAudioFile: *mut AudioFileID) -> OSStatus;
    pub fn AudioFileOpen(inFileRef: *const Struct_FSRef, inPermissions: SInt8,
                         inFileTypeHint: AudioFileTypeID,
                         outAudioFile: *mut AudioFileID) -> OSStatus;
    pub fn AudioFileStreamOpen(inClientData: *mut ::libc::c_void,
                               inPropertyListenerProc:
                                   AudioFileStream_PropertyListenerProc,
                               inPacketsProc: AudioFileStream_PacketsProc,
                               inFileTypeHint: AudioFileTypeID,
                               outAudioFileStream: *mut AudioFileStreamID)
     -> OSStatus;
    pub fn AudioFileStreamParseBytes(inAudioFileStream: AudioFileStreamID,
                                     inDataByteSize: UInt32,
                                     inData: *const ::libc::c_void,
                                     inFlags: UInt32) -> OSStatus;
    pub fn AudioFileStreamSeek(inAudioFileStream: AudioFileStreamID,
                               inPacketOffset: SInt64,
                               outDataByteOffset: *mut SInt64,
                               ioFlags: *mut UInt32) -> OSStatus;
    pub fn AudioFileStreamGetPropertyInfo(inAudioFileStream:
                                              AudioFileStreamID,
                                          inPropertyID:
                                              AudioFileStreamPropertyID,
                                          outPropertyDataSize: *mut UInt32,
                                          outWritable: *mut Boolean)
     -> OSStatus;
    pub fn AudioFileStreamGetProperty(inAudioFileStream: AudioFileStreamID,
                                      inPropertyID: AudioFileStreamPropertyID,
                                      ioPropertyDataSize: *mut UInt32,
                                      outPropertyData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileStreamSetProperty(inAudioFileStream: AudioFileStreamID,
                                      inPropertyID: AudioFileStreamPropertyID,
                                      inPropertyDataSize: UInt32,
                                      inPropertyData: *const ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileStreamClose(inAudioFileStream: AudioFileStreamID)
     -> OSStatus;
    pub fn AudioFormatGetPropertyInfo(inPropertyID: AudioFormatPropertyID,
                                      inSpecifierSize: UInt32,
                                      inSpecifier: *const ::libc::c_void,
                                      outPropertyDataSize: *mut UInt32)
     -> OSStatus;
    pub fn AudioFormatGetProperty(inPropertyID: AudioFormatPropertyID,
                                  inSpecifierSize: UInt32,
                                  inSpecifier: *const ::libc::c_void,
                                  ioPropertyDataSize: *mut UInt32,
                                  outPropertyData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioQueueNewOutput(inFormat: *const AudioStreamBasicDescription,
                               inCallbackProc: AudioQueueOutputCallback,
                               inUserData: *mut ::libc::c_void,
                               inCallbackRunLoop: CFRunLoopRef,
                               inCallbackRunLoopMode: CFStringRef,
                               inFlags: UInt32, outAQ: *mut AudioQueueRef)
     -> OSStatus;
    pub fn AudioQueueNewInput(inFormat: *const AudioStreamBasicDescription,
                              inCallbackProc: AudioQueueInputCallback,
                              inUserData: *mut ::libc::c_void,
                              inCallbackRunLoop: CFRunLoopRef,
                              inCallbackRunLoopMode: CFStringRef,
                              inFlags: UInt32, outAQ: *mut AudioQueueRef)
     -> OSStatus;
    pub fn AudioQueueNewOutputWithDispatchQueue(outAQ: *mut AudioQueueRef,
                                                inFormat:
                                                    *const AudioStreamBasicDescription,
                                                inFlags: UInt32,
                                                inCallbackDispatchQueue:
                                                    dispatch_queue_t,
                                                inCallbackBlock:
                                                    AudioQueueOutputCallbackBlock)
     -> OSStatus;
    pub fn AudioQueueNewInputWithDispatchQueue(outAQ: *mut AudioQueueRef,
                                               inFormat:
                                                   *const AudioStreamBasicDescription,
                                               inFlags: UInt32,
                                               inCallbackDispatchQueue:
                                                   dispatch_queue_t,
                                               inCallbackBlock:
                                                   AudioQueueInputCallbackBlock)
     -> OSStatus;
    pub fn AudioQueueDispose(inAQ: AudioQueueRef, inImmediate: Boolean)
     -> OSStatus;
    pub fn AudioQueueAllocateBuffer(inAQ: AudioQueueRef,
                                    inBufferByteSize: UInt32,
                                    outBuffer: *mut AudioQueueBufferRef)
     -> OSStatus;
    pub fn AudioQueueAllocateBufferWithPacketDescriptions(inAQ: AudioQueueRef,
                                                          inBufferByteSize:
                                                              UInt32,
                                                          inNumberPacketDescriptions:
                                                              UInt32,
                                                          outBuffer:
                                                              *mut AudioQueueBufferRef)
     -> OSStatus;
    pub fn AudioQueueFreeBuffer(inAQ: AudioQueueRef,
                                inBuffer: AudioQueueBufferRef) -> OSStatus;
    pub fn AudioQueueEnqueueBuffer(inAQ: AudioQueueRef,
                                   inBuffer: AudioQueueBufferRef,
                                   inNumPacketDescs: UInt32,
                                   inPacketDescs:
                                       *const AudioStreamPacketDescription)
     -> OSStatus;
    pub fn AudioQueueEnqueueBufferWithParameters(inAQ: AudioQueueRef,
                                                 inBuffer:
                                                     AudioQueueBufferRef,
                                                 inNumPacketDescs: UInt32,
                                                 inPacketDescs:
                                                     *const AudioStreamPacketDescription,
                                                 inTrimFramesAtStart: UInt32,
                                                 inTrimFramesAtEnd: UInt32,
                                                 inNumParamValues: UInt32,
                                                 inParamValues:
                                                     *const AudioQueueParameterEvent,
                                                 inStartTime:
                                                     *const AudioTimeStamp,
                                                 outActualStartTime:
                                                     *mut AudioTimeStamp)
     -> OSStatus;
    pub fn AudioQueueStart(inAQ: AudioQueueRef,
                           inStartTime: *const AudioTimeStamp) -> OSStatus;
    pub fn AudioQueuePrime(inAQ: AudioQueueRef,
                           inNumberOfFramesToPrepare: UInt32,
                           outNumberOfFramesPrepared: *mut UInt32)
     -> OSStatus;
    pub fn AudioQueueStop(inAQ: AudioQueueRef, inImmediate: Boolean)
     -> OSStatus;
    pub fn AudioQueuePause(inAQ: AudioQueueRef) -> OSStatus;
    pub fn AudioQueueFlush(inAQ: AudioQueueRef) -> OSStatus;
    pub fn AudioQueueReset(inAQ: AudioQueueRef) -> OSStatus;
    pub fn AudioQueueGetParameter(inAQ: AudioQueueRef,
                                  inParamID: AudioQueueParameterID,
                                  outValue: *mut AudioQueueParameterValue)
     -> OSStatus;
    pub fn AudioQueueSetParameter(inAQ: AudioQueueRef,
                                  inParamID: AudioQueueParameterID,
                                  inValue: AudioQueueParameterValue)
     -> OSStatus;
    pub fn AudioQueueGetProperty(inAQ: AudioQueueRef,
                                 inID: AudioQueuePropertyID,
                                 outData: *mut ::libc::c_void,
                                 ioDataSize: *mut UInt32) -> OSStatus;
    pub fn AudioQueueSetProperty(inAQ: AudioQueueRef,
                                 inID: AudioQueuePropertyID,
                                 inData: *const ::libc::c_void,
                                 inDataSize: UInt32) -> OSStatus;
    pub fn AudioQueueGetPropertySize(inAQ: AudioQueueRef,
                                     inID: AudioQueuePropertyID,
                                     outDataSize: *mut UInt32) -> OSStatus;
    pub fn AudioQueueAddPropertyListener(inAQ: AudioQueueRef,
                                         inID: AudioQueuePropertyID,
                                         inProc:
                                             AudioQueuePropertyListenerProc,
                                         inUserData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioQueueRemovePropertyListener(inAQ: AudioQueueRef,
                                            inID: AudioQueuePropertyID,
                                            inProc:
                                                AudioQueuePropertyListenerProc,
                                            inUserData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioQueueCreateTimeline(inAQ: AudioQueueRef,
                                    outTimeline: *mut AudioQueueTimelineRef)
     -> OSStatus;
    pub fn AudioQueueDisposeTimeline(inAQ: AudioQueueRef,
                                     inTimeline: AudioQueueTimelineRef)
     -> OSStatus;
    pub fn AudioQueueGetCurrentTime(inAQ: AudioQueueRef,
                                    inTimeline: AudioQueueTimelineRef,
                                    outTimeStamp: *mut AudioTimeStamp,
                                    outTimelineDiscontinuity: *mut Boolean)
     -> OSStatus;
    pub fn AudioQueueDeviceGetCurrentTime(inAQ: AudioQueueRef,
                                          outTimeStamp: *mut AudioTimeStamp)
     -> OSStatus;
    pub fn AudioQueueDeviceTranslateTime(inAQ: AudioQueueRef,
                                         inTime: *const AudioTimeStamp,
                                         outTime: *mut AudioTimeStamp)
     -> OSStatus;
    pub fn AudioQueueDeviceGetNearestStartTime(inAQ: AudioQueueRef,
                                               ioRequestedStartTime:
                                                   *mut AudioTimeStamp,
                                               inFlags: UInt32) -> OSStatus;
    pub fn AudioQueueSetOfflineRenderFormat(inAQ: AudioQueueRef,
                                            inFormat:
                                                *const AudioStreamBasicDescription,
                                            inLayout:
                                                *const AudioChannelLayout)
     -> OSStatus;
    pub fn AudioQueueOfflineRender(inAQ: AudioQueueRef,
                                   inTimestamp: *const AudioTimeStamp,
                                   ioBuffer: AudioQueueBufferRef,
                                   inNumberFrames: UInt32) -> OSStatus;
    pub fn AudioQueueProcessingTapNew(inAQ: AudioQueueRef,
                                      inCallback:
                                          AudioQueueProcessingTapCallback,
                                      inClientData: *mut ::libc::c_void,
                                      inFlags: UInt32,
                                      outMaxFrames: *mut UInt32,
                                      outProcessingFormat:
                                          *mut AudioStreamBasicDescription,
                                      outAQTap:
                                          *mut AudioQueueProcessingTapRef)
     -> OSStatus;
    pub fn AudioQueueProcessingTapDispose(inAQTap: AudioQueueProcessingTapRef)
     -> OSStatus;
    pub fn AudioQueueProcessingTapGetSourceAudio(inAQTap:
                                                     AudioQueueProcessingTapRef,
                                                 inNumberFrames: UInt32,
                                                 ioTimeStamp:
                                                     *mut AudioTimeStamp,
                                                 outFlags: *mut UInt32,
                                                 outNumberFrames: *mut UInt32,
                                                 ioData: *mut AudioBufferList)
     -> OSStatus;
    pub fn AudioQueueProcessingTapGetQueueTime(inAQTap:
                                                   AudioQueueProcessingTapRef,
                                               outQueueSampleTime:
                                                   *mut Float64,
                                               outQueueFrameCount:
                                                   *mut UInt32) -> OSStatus;
    pub fn AudioObjectShow(inObjectID: AudioObjectID) -> ();
    pub fn AudioObjectHasProperty(inObjectID: AudioObjectID,
                                  inAddress:
                                      *const AudioObjectPropertyAddress)
     -> Boolean;
    pub fn AudioObjectIsPropertySettable(inObjectID: AudioObjectID,
                                         inAddress:
                                             *const AudioObjectPropertyAddress,
                                         outIsSettable: *mut Boolean)
     -> OSStatus;
    pub fn AudioObjectGetPropertyDataSize(inObjectID: AudioObjectID,
                                          inAddress:
                                              *const AudioObjectPropertyAddress,
                                          inQualifierDataSize: UInt32,
                                          inQualifierData:
                                              *const ::libc::c_void,
                                          outDataSize: *mut UInt32)
     -> OSStatus;
    pub fn AudioObjectGetPropertyData(inObjectID: AudioObjectID,
                                      inAddress:
                                          *const AudioObjectPropertyAddress,
                                      inQualifierDataSize: UInt32,
                                      inQualifierData: *const ::libc::c_void,
                                      ioDataSize: *mut UInt32,
                                      outData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioObjectSetPropertyData(inObjectID: AudioObjectID,
                                      inAddress:
                                          *const AudioObjectPropertyAddress,
                                      inQualifierDataSize: UInt32,
                                      inQualifierData: *const ::libc::c_void,
                                      inDataSize: UInt32,
                                      inData: *const ::libc::c_void)
     -> OSStatus;
    pub fn AudioObjectAddPropertyListener(inObjectID: AudioObjectID,
                                          inAddress:
                                              *const AudioObjectPropertyAddress,
                                          inListener:
                                              AudioObjectPropertyListenerProc,
                                          inClientData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioObjectRemovePropertyListener(inObjectID: AudioObjectID,
                                             inAddress:
                                                 *const AudioObjectPropertyAddress,
                                             inListener:
                                                 AudioObjectPropertyListenerProc,
                                             inClientData:
                                                 *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioObjectAddPropertyListenerBlock(inObjectID: AudioObjectID,
                                               inAddress:
                                                   *const AudioObjectPropertyAddress,
                                               inDispatchQueue:
                                                   dispatch_queue_t,
                                               inListener:
                                                   AudioObjectPropertyListenerBlock)
     -> OSStatus;
    pub fn AudioObjectRemovePropertyListenerBlock(inObjectID: AudioObjectID,
                                                  inAddress:
                                                      *const AudioObjectPropertyAddress,
                                                  inDispatchQueue:
                                                      dispatch_queue_t,
                                                  inListener:
                                                      AudioObjectPropertyListenerBlock)
     -> OSStatus;
    pub fn AudioHardwareUnload() -> OSStatus;
    pub fn AudioHardwareCreateAggregateDevice(inDescription: CFDictionaryRef,
                                              outDeviceID: *mut AudioObjectID)
     -> OSStatus;
    pub fn AudioHardwareDestroyAggregateDevice(inDeviceID: AudioObjectID)
     -> OSStatus;
    pub fn AudioDeviceCreateIOProcID(inDevice: AudioObjectID,
                                     inProc: AudioDeviceIOProc,
                                     inClientData: *mut ::libc::c_void,
                                     outIOProcID: *mut AudioDeviceIOProcID)
     -> OSStatus;
    pub fn AudioDeviceCreateIOProcIDWithBlock(outIOProcID:
                                                  *mut AudioDeviceIOProcID,
                                              inDevice: AudioObjectID,
                                              inDispatchQueue:
                                                  dispatch_queue_t,
                                              inIOBlock: AudioDeviceIOBlock)
     -> OSStatus;
    pub fn AudioDeviceDestroyIOProcID(inDevice: AudioObjectID,
                                      inIOProcID: AudioDeviceIOProcID)
     -> OSStatus;
    pub fn AudioDeviceStart(inDevice: AudioObjectID,
                            inProcID: AudioDeviceIOProcID) -> OSStatus;
    pub fn AudioDeviceStartAtTime(inDevice: AudioObjectID,
                                  inProcID: AudioDeviceIOProcID,
                                  ioRequestedStartTime: *mut AudioTimeStamp,
                                  inFlags: UInt32) -> OSStatus;
    pub fn AudioDeviceStop(inDevice: AudioObjectID,
                           inProcID: AudioDeviceIOProcID) -> OSStatus;
    pub fn AudioDeviceGetCurrentTime(inDevice: AudioObjectID,
                                     outTime: *mut AudioTimeStamp)
     -> OSStatus;
    pub fn AudioDeviceTranslateTime(inDevice: AudioObjectID,
                                    inTime: *const AudioTimeStamp,
                                    outTime: *mut AudioTimeStamp) -> OSStatus;
    pub fn AudioDeviceGetNearestStartTime(inDevice: AudioObjectID,
                                          ioRequestedStartTime:
                                              *mut AudioTimeStamp,
                                          inFlags: UInt32) -> OSStatus;
    pub fn AudioHardwareAddRunLoopSource(inRunLoopSource: CFRunLoopSourceRef)
     -> OSStatus;
    pub fn AudioHardwareRemoveRunLoopSource(inRunLoopSource:
                                                CFRunLoopSourceRef)
     -> OSStatus;
    pub fn AudioHardwareGetPropertyInfo(inPropertyID: AudioHardwarePropertyID,
                                        outSize: *mut UInt32,
                                        outWritable: *mut Boolean)
     -> OSStatus;
    pub fn AudioHardwareGetProperty(inPropertyID: AudioHardwarePropertyID,
                                    ioPropertyDataSize: *mut UInt32,
                                    outPropertyData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioHardwareSetProperty(inPropertyID: AudioHardwarePropertyID,
                                    inPropertyDataSize: UInt32,
                                    inPropertyData: *const ::libc::c_void)
     -> OSStatus;
    pub fn AudioHardwareAddPropertyListener(inPropertyID:
                                                AudioHardwarePropertyID,
                                            inProc:
                                                AudioHardwarePropertyListenerProc,
                                            inClientData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioHardwareRemovePropertyListener(inPropertyID:
                                                   AudioHardwarePropertyID,
                                               inProc:
                                                   AudioHardwarePropertyListenerProc)
     -> OSStatus;
    pub fn AudioDeviceAddIOProc(inDevice: AudioDeviceID,
                                inProc: AudioDeviceIOProc,
                                inClientData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioDeviceRemoveIOProc(inDevice: AudioDeviceID,
                                   inProc: AudioDeviceIOProc) -> OSStatus;
    pub fn AudioDeviceRead(inDevice: AudioDeviceID,
                           inStartTime: *const AudioTimeStamp,
                           outData: *mut AudioBufferList) -> OSStatus;
    pub fn AudioDeviceGetPropertyInfo(inDevice: AudioDeviceID,
                                      inChannel: UInt32, isInput: Boolean,
                                      inPropertyID: AudioDevicePropertyID,
                                      outSize: *mut UInt32,
                                      outWritable: *mut Boolean) -> OSStatus;
    pub fn AudioDeviceGetProperty(inDevice: AudioDeviceID, inChannel: UInt32,
                                  isInput: Boolean,
                                  inPropertyID: AudioDevicePropertyID,
                                  ioPropertyDataSize: *mut UInt32,
                                  outPropertyData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioDeviceSetProperty(inDevice: AudioDeviceID,
                                  inWhen: *const AudioTimeStamp,
                                  inChannel: UInt32, isInput: Boolean,
                                  inPropertyID: AudioDevicePropertyID,
                                  inPropertyDataSize: UInt32,
                                  inPropertyData: *const ::libc::c_void)
     -> OSStatus;
    pub fn AudioDeviceAddPropertyListener(inDevice: AudioDeviceID,
                                          inChannel: UInt32, isInput: Boolean,
                                          inPropertyID: AudioDevicePropertyID,
                                          inProc:
                                              AudioDevicePropertyListenerProc,
                                          inClientData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioDeviceRemovePropertyListener(inDevice: AudioDeviceID,
                                             inChannel: UInt32,
                                             isInput: Boolean,
                                             inPropertyID:
                                                 AudioDevicePropertyID,
                                             inProc:
                                                 AudioDevicePropertyListenerProc)
     -> OSStatus;
    pub fn AudioStreamGetPropertyInfo(inStream: AudioStreamID,
                                      inChannel: UInt32,
                                      inPropertyID: AudioDevicePropertyID,
                                      outSize: *mut UInt32,
                                      outWritable: *mut Boolean) -> OSStatus;
    pub fn AudioStreamGetProperty(inStream: AudioStreamID, inChannel: UInt32,
                                  inPropertyID: AudioDevicePropertyID,
                                  ioPropertyDataSize: *mut UInt32,
                                  outPropertyData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioStreamSetProperty(inStream: AudioStreamID,
                                  inWhen: *const AudioTimeStamp,
                                  inChannel: UInt32,
                                  inPropertyID: AudioDevicePropertyID,
                                  inPropertyDataSize: UInt32,
                                  inPropertyData: *const ::libc::c_void)
     -> OSStatus;
    pub fn AudioStreamAddPropertyListener(inStream: AudioStreamID,
                                          inChannel: UInt32,
                                          inPropertyID: AudioDevicePropertyID,
                                          inProc:
                                              AudioStreamPropertyListenerProc,
                                          inClientData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioStreamRemovePropertyListener(inStream: AudioStreamID,
                                             inChannel: UInt32,
                                             inPropertyID:
                                                 AudioDevicePropertyID,
                                             inProc:
                                                 AudioStreamPropertyListenerProc)
     -> OSStatus;
    pub fn AudioServicesPlayAlertSound(inSystemSoundID: SystemSoundID) -> ();
    pub fn AudioServicesPlaySystemSound(inSystemSoundID: SystemSoundID) -> ();
    pub fn AudioServicesCreateSystemSoundID(inFileURL: CFURLRef,
                                            outSystemSoundID:
                                                *mut SystemSoundID)
     -> OSStatus;
    pub fn AudioServicesDisposeSystemSoundID(inSystemSoundID: SystemSoundID)
     -> OSStatus;
    pub fn AudioServicesAddSystemSoundCompletion(inSystemSoundID:
                                                     SystemSoundID,
                                                 inRunLoop: CFRunLoopRef,
                                                 inRunLoopMode: CFStringRef,
                                                 inCompletionRoutine:
                                                     AudioServicesSystemSoundCompletionProc,
                                                 inClientData:
                                                     *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioServicesRemoveSystemSoundCompletion(inSystemSoundID:
                                                        SystemSoundID) -> ();
    pub fn AudioServicesGetPropertyInfo(inPropertyID: AudioServicesPropertyID,
                                        inSpecifierSize: UInt32,
                                        inSpecifier: *const ::libc::c_void,
                                        outPropertyDataSize: *mut UInt32,
                                        outWritable: *mut Boolean)
     -> OSStatus;
    pub fn AudioServicesGetProperty(inPropertyID: AudioServicesPropertyID,
                                    inSpecifierSize: UInt32,
                                    inSpecifier: *const ::libc::c_void,
                                    ioPropertyDataSize: *mut UInt32,
                                    outPropertyData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioServicesSetProperty(inPropertyID: AudioServicesPropertyID,
                                    inSpecifierSize: UInt32,
                                    inSpecifier: *const ::libc::c_void,
                                    inPropertyDataSize: UInt32,
                                    inPropertyData: *const ::libc::c_void)
     -> OSStatus;
    pub fn AudioHardwareServiceHasProperty(inObjectID: AudioObjectID,
                                           inAddress:
                                               *const AudioObjectPropertyAddress)
     -> Boolean;
    pub fn AudioHardwareServiceIsPropertySettable(inObjectID: AudioObjectID,
                                                  inAddress:
                                                      *const AudioObjectPropertyAddress,
                                                  outIsSettable: *mut Boolean)
     -> OSStatus;
    pub fn AudioHardwareServiceGetPropertyDataSize(inObjectID: AudioObjectID,
                                                   inAddress:
                                                       *const AudioObjectPropertyAddress,
                                                   inQualifierDataSize:
                                                       UInt32,
                                                   inQualifierData:
                                                       *const ::libc::c_void,
                                                   outDataSize: *mut UInt32)
     -> OSStatus;
    pub fn AudioHardwareServiceGetPropertyData(inObjectID: AudioObjectID,
                                               inAddress:
                                                   *const AudioObjectPropertyAddress,
                                               inQualifierDataSize: UInt32,
                                               inQualifierData:
                                                   *const ::libc::c_void,
                                               ioDataSize: *mut UInt32,
                                               outData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioHardwareServiceSetPropertyData(inObjectID: AudioObjectID,
                                               inAddress:
                                                   *const AudioObjectPropertyAddress,
                                               inQualifierDataSize: UInt32,
                                               inQualifierData:
                                                   *const ::libc::c_void,
                                               inDataSize: UInt32,
                                               inData: *const ::libc::c_void)
     -> OSStatus;
    pub fn AudioHardwareServiceAddPropertyListener(inObjectID: AudioObjectID,
                                                   inAddress:
                                                       *const AudioObjectPropertyAddress,
                                                   inListener:
                                                       AudioObjectPropertyListenerProc,
                                                   inClientData:
                                                       *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioHardwareServiceRemovePropertyListener(inObjectID:
                                                          AudioObjectID,
                                                      inAddress:
                                                          *const AudioObjectPropertyAddress,
                                                      inListener:
                                                          AudioObjectPropertyListenerProc,
                                                      inClientData:
                                                          *mut ::libc::c_void)
     -> OSStatus;
    pub fn NewAUGraph(outGraph: *mut AUGraph) -> OSStatus;
    pub fn DisposeAUGraph(inGraph: AUGraph) -> OSStatus;
    pub fn AUGraphAddNode(inGraph: AUGraph,
                          inDescription: *const AudioComponentDescription,
                          outNode: *mut AUNode) -> OSStatus;
    pub fn AUGraphRemoveNode(inGraph: AUGraph, inNode: AUNode) -> OSStatus;
    pub fn AUGraphGetNodeCount(inGraph: AUGraph,
                               outNumberOfNodes: *mut UInt32) -> OSStatus;
    pub fn AUGraphGetIndNode(inGraph: AUGraph, inIndex: UInt32,
                             outNode: *mut AUNode) -> OSStatus;
    pub fn AUGraphNodeInfo(inGraph: AUGraph, inNode: AUNode,
                           outDescription: *mut AudioComponentDescription,
                           outAudioUnit: *mut AudioUnit) -> OSStatus;
    pub fn AUGraphNewNodeSubGraph(inGraph: AUGraph, outNode: *mut AUNode)
     -> OSStatus;
    pub fn AUGraphGetNodeInfoSubGraph(inGraph: AUGraph, inNode: AUNode,
                                      outSubGraph: *mut AUGraph) -> OSStatus;
    pub fn AUGraphIsNodeSubGraph(inGraph: AUGraph, inNode: AUNode,
                                 outFlag: *mut Boolean) -> OSStatus;
    pub fn AUGraphConnectNodeInput(inGraph: AUGraph, inSourceNode: AUNode,
                                   inSourceOutputNumber: UInt32,
                                   inDestNode: AUNode,
                                   inDestInputNumber: UInt32) -> OSStatus;
    pub fn AUGraphSetNodeInputCallback(inGraph: AUGraph, inDestNode: AUNode,
                                       inDestInputNumber: UInt32,
                                       inInputCallback:
                                           *const AURenderCallbackStruct)
     -> OSStatus;
    pub fn AUGraphDisconnectNodeInput(inGraph: AUGraph, inDestNode: AUNode,
                                      inDestInputNumber: UInt32) -> OSStatus;
    pub fn AUGraphClearConnections(inGraph: AUGraph) -> OSStatus;
    pub fn AUGraphGetNumberOfInteractions(inGraph: AUGraph,
                                          outNumInteractions: *mut UInt32)
     -> OSStatus;
    pub fn AUGraphGetInteractionInfo(inGraph: AUGraph,
                                     inInteractionIndex: UInt32,
                                     outInteraction: *mut AUNodeInteraction)
     -> OSStatus;
    pub fn AUGraphCountNodeInteractions(inGraph: AUGraph, inNode: AUNode,
                                        outNumInteractions: *mut UInt32)
     -> OSStatus;
    pub fn AUGraphGetNodeInteractions(inGraph: AUGraph, inNode: AUNode,
                                      ioNumInteractions: *mut UInt32,
                                      outInteractions: *mut AUNodeInteraction)
     -> OSStatus;
    pub fn AUGraphUpdate(inGraph: AUGraph, outIsUpdated: *mut Boolean)
     -> OSStatus;
    pub fn AUGraphOpen(inGraph: AUGraph) -> OSStatus;
    pub fn AUGraphClose(inGraph: AUGraph) -> OSStatus;
    pub fn AUGraphInitialize(inGraph: AUGraph) -> OSStatus;
    pub fn AUGraphUninitialize(inGraph: AUGraph) -> OSStatus;
    pub fn AUGraphStart(inGraph: AUGraph) -> OSStatus;
    pub fn AUGraphStop(inGraph: AUGraph) -> OSStatus;
    pub fn AUGraphIsOpen(inGraph: AUGraph, outIsOpen: *mut Boolean)
     -> OSStatus;
    pub fn AUGraphIsInitialized(inGraph: AUGraph,
                                outIsInitialized: *mut Boolean) -> OSStatus;
    pub fn AUGraphIsRunning(inGraph: AUGraph, outIsRunning: *mut Boolean)
     -> OSStatus;
    pub fn AUGraphGetCPULoad(inGraph: AUGraph,
                             outAverageCPULoad: *mut Float32) -> OSStatus;
    pub fn AUGraphGetMaxCPULoad(inGraph: AUGraph, outMaxLoad: *mut Float32)
     -> OSStatus;
    pub fn AUGraphAddRenderNotify(inGraph: AUGraph,
                                  inCallback: AURenderCallback,
                                  inRefCon: *mut ::libc::c_void) -> OSStatus;
    pub fn AUGraphRemoveRenderNotify(inGraph: AUGraph,
                                     inCallback: AURenderCallback,
                                     inRefCon: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AUGraphNewNode(inGraph: AUGraph,
                          inDescription: *const Struct_ComponentDescription,
                          inClassDataSize: UInt32,
                          inClassData: *const ::libc::c_void,
                          outNode: *mut AUNode) -> OSStatus;
    pub fn AUGraphGetNodeInfo(inGraph: AUGraph, inNode: AUNode,
                              outDescription:
                                  *mut Struct_ComponentDescription,
                              outClassDataSize: *mut UInt32,
                              outClassData: *mut *mut ::libc::c_void,
                              outAudioUnit: *mut AudioUnit) -> OSStatus;
    pub fn AUGraphGetNumberOfConnections(inGraph: AUGraph,
                                         outNumConnections: *mut UInt32)
     -> OSStatus;
    pub fn AUGraphGetConnectionInfo(inGraph: AUGraph,
                                    inConnectionIndex: UInt32,
                                    outSourceNode: *mut AUNode,
                                    outSourceOutputNumber: *mut UInt32,
                                    outDestNode: *mut AUNode,
                                    outDestInputNumber: *mut UInt32)
     -> OSStatus;
    pub fn AUGraphCountNodeConnections(inGraph: AUGraph, inNode: AUNode,
                                       outNumConnections: *mut UInt32)
     -> OSStatus;
    pub fn AUGraphGetNodeConnections(inGraph: AUGraph, inNode: AUNode,
                                     outConnections:
                                         *mut AudioUnitNodeConnection,
                                     ioNumConnections: *mut UInt32)
     -> OSStatus;
    pub fn AudioConverterNew(inSourceFormat:
                                 *const AudioStreamBasicDescription,
                             inDestinationFormat:
                                 *const AudioStreamBasicDescription,
                             outAudioConverter: *mut AudioConverterRef)
     -> OSStatus;
    pub fn AudioConverterNewSpecific(inSourceFormat:
                                         *const AudioStreamBasicDescription,
                                     inDestinationFormat:
                                         *const AudioStreamBasicDescription,
                                     inNumberClassDescriptions: UInt32,
                                     inClassDescriptions:
                                         *const AudioClassDescription,
                                     outAudioConverter:
                                         *mut AudioConverterRef) -> OSStatus;
    pub fn AudioConverterDispose(inAudioConverter: AudioConverterRef)
     -> OSStatus;
    pub fn AudioConverterReset(inAudioConverter: AudioConverterRef)
     -> OSStatus;
    pub fn AudioConverterGetPropertyInfo(inAudioConverter: AudioConverterRef,
                                         inPropertyID:
                                             AudioConverterPropertyID,
                                         outSize: *mut UInt32,
                                         outWritable: *mut Boolean)
     -> OSStatus;
    pub fn AudioConverterGetProperty(inAudioConverter: AudioConverterRef,
                                     inPropertyID: AudioConverterPropertyID,
                                     ioPropertyDataSize: *mut UInt32,
                                     outPropertyData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioConverterSetProperty(inAudioConverter: AudioConverterRef,
                                     inPropertyID: AudioConverterPropertyID,
                                     inPropertyDataSize: UInt32,
                                     inPropertyData: *const ::libc::c_void)
     -> OSStatus;
    pub fn AudioConverterFillBuffer(inAudioConverter: AudioConverterRef,
                                    inInputDataProc:
                                        AudioConverterInputDataProc,
                                    inInputDataProcUserData:
                                        *mut ::libc::c_void,
                                    ioOutputDataSize: *mut UInt32,
                                    outOutputData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioConverterConvertBuffer(inAudioConverter: AudioConverterRef,
                                       inInputDataSize: UInt32,
                                       inInputData: *const ::libc::c_void,
                                       ioOutputDataSize: *mut UInt32,
                                       outOutputData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioConverterFillComplexBuffer(inAudioConverter:
                                               AudioConverterRef,
                                           inInputDataProc:
                                               AudioConverterComplexInputDataProc,
                                           inInputDataProcUserData:
                                               *mut ::libc::c_void,
                                           ioOutputDataPacketSize:
                                               *mut UInt32,
                                           outOutputData:
                                               *mut AudioBufferList,
                                           outPacketDescription:
                                               *mut AudioStreamPacketDescription)
     -> OSStatus;
    pub fn AudioConverterConvertComplexBuffer(inAudioConverter:
                                                  AudioConverterRef,
                                              inNumberPCMFrames: UInt32,
                                              inInputData:
                                                  *const AudioBufferList,
                                              outOutputData:
                                                  *mut AudioBufferList)
     -> OSStatus;
    pub fn ExtAudioFileOpenURL(inURL: CFURLRef,
                               outExtAudioFile: *mut ExtAudioFileRef)
     -> OSStatus;
    pub fn ExtAudioFileWrapAudioFileID(inFileID: AudioFileID,
                                       inForWriting: Boolean,
                                       outExtAudioFile: *mut ExtAudioFileRef)
     -> OSStatus;
    pub fn ExtAudioFileCreateWithURL(inURL: CFURLRef,
                                     inFileType: AudioFileTypeID,
                                     inStreamDesc:
                                         *const AudioStreamBasicDescription,
                                     inChannelLayout:
                                         *const AudioChannelLayout,
                                     inFlags: UInt32,
                                     outExtAudioFile: *mut ExtAudioFileRef)
     -> OSStatus;
    pub fn ExtAudioFileOpen(inFSRef: *const Struct_FSRef,
                            outExtAudioFile: *mut ExtAudioFileRef)
     -> OSStatus;
    pub fn ExtAudioFileCreateNew(inParentDir: *const Struct_FSRef,
                                 inFileName: CFStringRef,
                                 inFileType: AudioFileTypeID,
                                 inStreamDesc:
                                     *const AudioStreamBasicDescription,
                                 inChannelLayout: *const AudioChannelLayout,
                                 outExtAudioFile: *mut ExtAudioFileRef)
     -> OSStatus;
    pub fn ExtAudioFileDispose(inExtAudioFile: ExtAudioFileRef) -> OSStatus;
    pub fn ExtAudioFileRead(inExtAudioFile: ExtAudioFileRef,
                            ioNumberFrames: *mut UInt32,
                            ioData: *mut AudioBufferList) -> OSStatus;
    pub fn ExtAudioFileWrite(inExtAudioFile: ExtAudioFileRef,
                             inNumberFrames: UInt32,
                             ioData: *const AudioBufferList) -> OSStatus;
    pub fn ExtAudioFileWriteAsync(inExtAudioFile: ExtAudioFileRef,
                                  inNumberFrames: UInt32,
                                  ioData: *const AudioBufferList) -> OSStatus;
    pub fn ExtAudioFileSeek(inExtAudioFile: ExtAudioFileRef,
                            inFrameOffset: SInt64) -> OSStatus;
    pub fn ExtAudioFileTell(inExtAudioFile: ExtAudioFileRef,
                            outFrameOffset: *mut SInt64) -> OSStatus;
    pub fn ExtAudioFileGetPropertyInfo(inExtAudioFile: ExtAudioFileRef,
                                       inPropertyID: ExtAudioFilePropertyID,
                                       outSize: *mut UInt32,
                                       outWritable: *mut Boolean) -> OSStatus;
    pub fn ExtAudioFileGetProperty(inExtAudioFile: ExtAudioFileRef,
                                   inPropertyID: ExtAudioFilePropertyID,
                                   ioPropertyDataSize: *mut UInt32,
                                   outPropertyData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn ExtAudioFileSetProperty(inExtAudioFile: ExtAudioFileRef,
                                   inPropertyID: ExtAudioFilePropertyID,
                                   inPropertyDataSize: UInt32,
                                   inPropertyData: *const ::libc::c_void)
     -> OSStatus;
    pub fn MIDIClientCreate(name: CFStringRef, notifyProc: MIDINotifyProc,
                            notifyRefCon: *mut ::libc::c_void,
                            outClient: *mut MIDIClientRef) -> OSStatus;
    pub fn MIDIClientDispose(client: MIDIClientRef) -> OSStatus;
    pub fn MIDIInputPortCreate(client: MIDIClientRef, portName: CFStringRef,
                               readProc: MIDIReadProc,
                               refCon: *mut ::libc::c_void,
                               outPort: *mut MIDIPortRef) -> OSStatus;
    pub fn MIDIOutputPortCreate(client: MIDIClientRef, portName: CFStringRef,
                                outPort: *mut MIDIPortRef) -> OSStatus;
    pub fn MIDIPortDispose(port: MIDIPortRef) -> OSStatus;
    pub fn MIDIPortConnectSource(port: MIDIPortRef, source: MIDIEndpointRef,
                                 connRefCon: *mut ::libc::c_void) -> OSStatus;
    pub fn MIDIPortDisconnectSource(port: MIDIPortRef,
                                    source: MIDIEndpointRef) -> OSStatus;
    pub fn MIDIGetNumberOfDevices() -> ItemCount;
    pub fn MIDIGetDevice(deviceIndex0: ItemCount) -> MIDIDeviceRef;
    pub fn MIDIDeviceGetNumberOfEntities(device: MIDIDeviceRef) -> ItemCount;
    pub fn MIDIDeviceGetEntity(device: MIDIDeviceRef, entityIndex0: ItemCount)
     -> MIDIEntityRef;
    pub fn MIDIEntityGetNumberOfSources(entity: MIDIEntityRef) -> ItemCount;
    pub fn MIDIEntityGetSource(entity: MIDIEntityRef, sourceIndex0: ItemCount)
     -> MIDIEndpointRef;
    pub fn MIDIEntityGetNumberOfDestinations(entity: MIDIEntityRef)
     -> ItemCount;
    pub fn MIDIEntityGetDestination(entity: MIDIEntityRef,
                                    destIndex0: ItemCount) -> MIDIEndpointRef;
    pub fn MIDIEntityGetDevice(inEntity: MIDIEntityRef,
                               outDevice: *mut MIDIDeviceRef) -> OSStatus;
    pub fn MIDIGetNumberOfSources() -> ItemCount;
    pub fn MIDIGetSource(sourceIndex0: ItemCount) -> MIDIEndpointRef;
    pub fn MIDIGetNumberOfDestinations() -> ItemCount;
    pub fn MIDIGetDestination(destIndex0: ItemCount) -> MIDIEndpointRef;
    pub fn MIDIEndpointGetEntity(inEndpoint: MIDIEndpointRef,
                                 outEntity: *mut MIDIEntityRef) -> OSStatus;
    pub fn MIDIDestinationCreate(client: MIDIClientRef, name: CFStringRef,
                                 readProc: MIDIReadProc,
                                 refCon: *mut ::libc::c_void,
                                 outDest: *mut MIDIEndpointRef) -> OSStatus;
    pub fn MIDISourceCreate(client: MIDIClientRef, name: CFStringRef,
                            outSrc: *mut MIDIEndpointRef) -> OSStatus;
    pub fn MIDIEndpointDispose(endpt: MIDIEndpointRef) -> OSStatus;
    pub fn MIDIGetNumberOfExternalDevices() -> ItemCount;
    pub fn MIDIGetExternalDevice(deviceIndex0: ItemCount) -> MIDIDeviceRef;
    pub fn MIDIObjectGetIntegerProperty(obj: MIDIObjectRef,
                                        propertyID: CFStringRef,
                                        outValue: *mut SInt32) -> OSStatus;
    pub fn MIDIObjectSetIntegerProperty(obj: MIDIObjectRef,
                                        propertyID: CFStringRef,
                                        value: SInt32) -> OSStatus;
    pub fn MIDIObjectGetStringProperty(obj: MIDIObjectRef,
                                       propertyID: CFStringRef,
                                       str: *mut CFStringRef) -> OSStatus;
    pub fn MIDIObjectSetStringProperty(obj: MIDIObjectRef,
                                       propertyID: CFStringRef,
                                       str: CFStringRef) -> OSStatus;
    pub fn MIDIObjectGetDataProperty(obj: MIDIObjectRef,
                                     propertyID: CFStringRef,
                                     outData: *mut CFDataRef) -> OSStatus;
    pub fn MIDIObjectSetDataProperty(obj: MIDIObjectRef,
                                     propertyID: CFStringRef, data: CFDataRef)
     -> OSStatus;
    pub fn MIDIObjectGetDictionaryProperty(obj: MIDIObjectRef,
                                           propertyID: CFStringRef,
                                           outDict: *mut CFDictionaryRef)
     -> OSStatus;
    pub fn MIDIObjectSetDictionaryProperty(obj: MIDIObjectRef,
                                           propertyID: CFStringRef,
                                           data: CFDictionaryRef) -> OSStatus;
    pub fn MIDIObjectGetProperties(obj: MIDIObjectRef,
                                   outProperties: *mut CFPropertyListRef,
                                   deep: Boolean) -> OSStatus;
    pub fn MIDIObjectRemoveProperty(obj: MIDIObjectRef,
                                    propertyID: CFStringRef) -> OSStatus;
    pub fn MIDIObjectFindByUniqueID(inUniqueID: MIDIUniqueID,
                                    outObject: *mut MIDIObjectRef,
                                    outObjectType: *mut MIDIObjectType)
     -> OSStatus;
    pub fn MIDISend(port: MIDIPortRef, dest: MIDIEndpointRef,
                    pktlist: *const MIDIPacketList) -> OSStatus;
    pub fn MIDISendSysex(request: *mut MIDISysexSendRequest) -> OSStatus;
    pub fn MIDIReceived(src: MIDIEndpointRef, pktlist: *const MIDIPacketList)
     -> OSStatus;
    pub fn MIDIFlushOutput(dest: MIDIEndpointRef) -> OSStatus;
    pub fn MIDIRestart() -> OSStatus;
    pub fn MIDIPacketListInit(pktlist: *mut MIDIPacketList)
     -> *mut MIDIPacket;
    pub fn MIDIPacketListAdd(pktlist: *mut MIDIPacketList,
                             listSize: ByteCount, curPacket: *mut MIDIPacket,
                             time: MIDITimeStamp, nData: ByteCount,
                             data: *const Byte) -> *mut MIDIPacket;
    pub fn CAClockNew(inReservedFlags: UInt32, outCAClock: *mut CAClockRef)
     -> OSStatus;
    pub fn CAClockDispose(inCAClock: CAClockRef) -> OSStatus;
    pub fn CAClockGetPropertyInfo(inCAClock: CAClockRef,
                                  inPropertyID: CAClockPropertyID,
                                  outSize: *mut UInt32,
                                  outWritable: *mut Boolean) -> OSStatus;
    pub fn CAClockGetProperty(inCAClock: CAClockRef,
                              inPropertyID: CAClockPropertyID,
                              ioPropertyDataSize: *mut UInt32,
                              outPropertyData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn CAClockSetProperty(inCAClock: CAClockRef,
                              inPropertyID: CAClockPropertyID,
                              inPropertyDataSize: UInt32,
                              inPropertyData: *const ::libc::c_void)
     -> OSStatus;
    pub fn CAClockAddListener(inCAClock: CAClockRef,
                              inListenerProc: CAClockListenerProc,
                              inUserData: *mut ::libc::c_void) -> OSStatus;
    pub fn CAClockRemoveListener(inCAClock: CAClockRef,
                                 inListenerProc: CAClockListenerProc,
                                 inUserData: *mut ::libc::c_void) -> OSStatus;
    pub fn CAClockSetCurrentTime(inCAClock: CAClockRef,
                                 inTime: *const CAClockTime) -> OSStatus;
    pub fn CAClockGetCurrentTime(inCAClock: CAClockRef,
                                 inTimeFormat: CAClockTimeFormat,
                                 outTime: *mut CAClockTime) -> OSStatus;
    pub fn CAClockGetStartTime(inCAClock: CAClockRef,
                               inTimeFormat: CAClockTimeFormat,
                               outTime: *mut CAClockTime) -> OSStatus;
    pub fn CAClockTranslateTime(inCAClock: CAClockRef,
                                inTime: *const CAClockTime,
                                inOutputTimeFormat: CAClockTimeFormat,
                                outTime: *mut CAClockTime) -> OSStatus;
    pub fn CAClockStart(inCAClock: CAClockRef) -> OSStatus;
    pub fn CAClockStop(inCAClock: CAClockRef) -> OSStatus;
    pub fn CAClockArm(inCAClock: CAClockRef) -> OSStatus;
    pub fn CAClockDisarm(inCAClock: CAClockRef) -> OSStatus;
    pub fn CAClockSetPlayRate(inCAClock: CAClockRef, inPlayRate: Float64)
     -> OSStatus;
    pub fn CAClockGetPlayRate(inCAClock: CAClockRef,
                              outPlayRate: *mut Float64) -> OSStatus;
    pub fn CAClockGetCurrentTempo(inCAClock: CAClockRef,
                                  outTempo: *mut CAClockTempo,
                                  outTimestamp: *mut CAClockTime) -> OSStatus;
    pub fn CAClockSetCurrentTempo(inCAClock: CAClockRef,
                                  inTempo: CAClockTempo,
                                  inTimestamp: *const CAClockTime)
     -> OSStatus;
    pub fn CAClockSecondsToSMPTETime(inCAClock: CAClockRef,
                                     inSeconds: CAClockSeconds,
                                     inSubframeDivisor: UInt16,
                                     outSMPTETime: *mut SMPTETime)
     -> OSStatus;
    pub fn CAClockSMPTETimeToSeconds(inCAClock: CAClockRef,
                                     inSMPTETime: *const SMPTETime,
                                     outSeconds: *mut CAClockSeconds)
     -> OSStatus;
    pub fn CAClockBeatsToBarBeatTime(inCAClock: CAClockRef,
                                     inBeats: CAClockBeats,
                                     inSubbeatDivisor: UInt16,
                                     outBarBeatTime: *mut CABarBeatTime)
     -> OSStatus;
    pub fn CAClockBarBeatTimeToBeats(inCAClock: CAClockRef,
                                     inBarBeatTime: *const CABarBeatTime,
                                     outBeats: *mut CAClockBeats) -> OSStatus;
    pub fn CAClockParseMIDI(inCAClock: CAClockRef,
                            inMIDIPacketList: *const Struct_MIDIPacketList)
     -> OSStatus;
    pub fn NewMusicPlayer(outPlayer: *mut MusicPlayer) -> OSStatus;
    pub fn DisposeMusicPlayer(inPlayer: MusicPlayer) -> OSStatus;
    pub fn MusicPlayerSetSequence(inPlayer: MusicPlayer,
                                  inSequence: MusicSequence) -> OSStatus;
    pub fn MusicPlayerGetSequence(inPlayer: MusicPlayer,
                                  outSequence: *mut MusicSequence)
     -> OSStatus;
    pub fn MusicPlayerSetTime(inPlayer: MusicPlayer, inTime: MusicTimeStamp)
     -> OSStatus;
    pub fn MusicPlayerGetTime(inPlayer: MusicPlayer,
                              outTime: *mut MusicTimeStamp) -> OSStatus;
    pub fn MusicPlayerGetHostTimeForBeats(inPlayer: MusicPlayer,
                                          inBeats: MusicTimeStamp,
                                          outHostTime: *mut UInt64)
     -> OSStatus;
    pub fn MusicPlayerGetBeatsForHostTime(inPlayer: MusicPlayer,
                                          inHostTime: UInt64,
                                          outBeats: *mut MusicTimeStamp)
     -> OSStatus;
    pub fn MusicPlayerPreroll(inPlayer: MusicPlayer) -> OSStatus;
    pub fn MusicPlayerStart(inPlayer: MusicPlayer) -> OSStatus;
    pub fn MusicPlayerStop(inPlayer: MusicPlayer) -> OSStatus;
    pub fn MusicPlayerIsPlaying(inPlayer: MusicPlayer,
                                outIsPlaying: *mut Boolean) -> OSStatus;
    pub fn MusicPlayerSetPlayRateScalar(inPlayer: MusicPlayer,
                                        inScaleRate: Float64) -> OSStatus;
    pub fn MusicPlayerGetPlayRateScalar(inPlayer: MusicPlayer,
                                        outScaleRate: *mut Float64)
     -> OSStatus;
    pub fn NewMusicSequence(outSequence: *mut MusicSequence) -> OSStatus;
    pub fn DisposeMusicSequence(inSequence: MusicSequence) -> OSStatus;
    pub fn MusicSequenceNewTrack(inSequence: MusicSequence,
                                 outTrack: *mut MusicTrack) -> OSStatus;
    pub fn MusicSequenceDisposeTrack(inSequence: MusicSequence,
                                     inTrack: MusicTrack) -> OSStatus;
    pub fn MusicSequenceGetTrackCount(inSequence: MusicSequence,
                                      outNumberOfTracks: *mut UInt32)
     -> OSStatus;
    pub fn MusicSequenceGetIndTrack(inSequence: MusicSequence,
                                    inTrackIndex: UInt32,
                                    outTrack: *mut MusicTrack) -> OSStatus;
    pub fn MusicSequenceGetTrackIndex(inSequence: MusicSequence,
                                      inTrack: MusicTrack,
                                      outTrackIndex: *mut UInt32) -> OSStatus;
    pub fn MusicSequenceGetTempoTrack(inSequence: MusicSequence,
                                      outTrack: *mut MusicTrack) -> OSStatus;
    pub fn MusicSequenceSetAUGraph(inSequence: MusicSequence,
                                   inGraph: AUGraph) -> OSStatus;
    pub fn MusicSequenceGetAUGraph(inSequence: MusicSequence,
                                   outGraph: *mut AUGraph) -> OSStatus;
    pub fn MusicSequenceSetMIDIEndpoint(inSequence: MusicSequence,
                                        inEndpoint: MIDIEndpointRef)
     -> OSStatus;
    pub fn MusicSequenceSetSequenceType(inSequence: MusicSequence,
                                        inType: MusicSequenceType)
     -> OSStatus;
    pub fn MusicSequenceGetSequenceType(inSequence: MusicSequence,
                                        outType: *mut MusicSequenceType)
     -> OSStatus;
    pub fn MusicSequenceFileLoad(inSequence: MusicSequence,
                                 inFileRef: CFURLRef,
                                 inFileTypeHint: MusicSequenceFileTypeID,
                                 inFlags: MusicSequenceLoadFlags) -> OSStatus;
    pub fn MusicSequenceFileLoadData(inSequence: MusicSequence,
                                     inData: CFDataRef,
                                     inFileTypeHint: MusicSequenceFileTypeID,
                                     inFlags: MusicSequenceLoadFlags)
     -> OSStatus;
    pub fn MusicSequenceFileCreate(inSequence: MusicSequence,
                                   inFileRef: CFURLRef,
                                   inFileType: MusicSequenceFileTypeID,
                                   inFlags: MusicSequenceFileFlags,
                                   inResolution: SInt16) -> OSStatus;
    pub fn MusicSequenceFileCreateData(inSequence: MusicSequence,
                                       inFileType: MusicSequenceFileTypeID,
                                       inFlags: MusicSequenceFileFlags,
                                       inResolution: SInt16,
                                       outData: *mut CFDataRef) -> OSStatus;
    pub fn MusicSequenceReverse(inSequence: MusicSequence) -> OSStatus;
    pub fn MusicSequenceGetSecondsForBeats(inSequence: MusicSequence,
                                           inBeats: MusicTimeStamp,
                                           outSeconds: *mut Float64)
     -> OSStatus;
    pub fn MusicSequenceGetBeatsForSeconds(inSequence: MusicSequence,
                                           inSeconds: Float64,
                                           outBeats: *mut MusicTimeStamp)
     -> OSStatus;
    pub fn MusicSequenceSetUserCallback(inSequence: MusicSequence,
                                        inCallback: MusicSequenceUserCallback,
                                        inClientData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn MusicSequenceBeatsToBarBeatTime(inSequence: MusicSequence,
                                           inBeats: MusicTimeStamp,
                                           inSubbeatDivisor: UInt32,
                                           outBarBeatTime: *mut CABarBeatTime)
     -> OSStatus;
    pub fn MusicSequenceBarBeatTimeToBeats(inSequence: MusicSequence,
                                           inBarBeatTime:
                                               *const CABarBeatTime,
                                           outBeats: *mut MusicTimeStamp)
     -> OSStatus;
    pub fn MusicSequenceGetInfoDictionary(inSequence: MusicSequence)
     -> CFDictionaryRef;
    pub fn MusicTrackGetSequence(inTrack: MusicTrack,
                                 outSequence: *mut MusicSequence) -> OSStatus;
    pub fn MusicTrackSetDestNode(inTrack: MusicTrack, inNode: AUNode)
     -> OSStatus;
    pub fn MusicTrackSetDestMIDIEndpoint(inTrack: MusicTrack,
                                         inEndpoint: MIDIEndpointRef)
     -> OSStatus;
    pub fn MusicTrackGetDestNode(inTrack: MusicTrack, outNode: *mut AUNode)
     -> OSStatus;
    pub fn MusicTrackGetDestMIDIEndpoint(inTrack: MusicTrack,
                                         outEndpoint: *mut MIDIEndpointRef)
     -> OSStatus;
    pub fn MusicTrackSetProperty(inTrack: MusicTrack, inPropertyID: UInt32,
                                 inData: *mut ::libc::c_void,
                                 inLength: UInt32) -> OSStatus;
    pub fn MusicTrackGetProperty(inTrack: MusicTrack, inPropertyID: UInt32,
                                 outData: *mut ::libc::c_void,
                                 ioLength: *mut UInt32) -> OSStatus;
    pub fn MusicTrackMoveEvents(inTrack: MusicTrack,
                                inStartTime: MusicTimeStamp,
                                inEndTime: MusicTimeStamp,
                                inMoveTime: MusicTimeStamp) -> OSStatus;
    pub fn MusicTrackClear(inTrack: MusicTrack, inStartTime: MusicTimeStamp,
                           inEndTime: MusicTimeStamp) -> OSStatus;
    pub fn MusicTrackCut(inTrack: MusicTrack, inStartTime: MusicTimeStamp,
                         inEndTime: MusicTimeStamp) -> OSStatus;
    pub fn MusicTrackCopyInsert(inSourceTrack: MusicTrack,
                                inSourceStartTime: MusicTimeStamp,
                                inSourceEndTime: MusicTimeStamp,
                                inDestTrack: MusicTrack,
                                inDestInsertTime: MusicTimeStamp) -> OSStatus;
    pub fn MusicTrackMerge(inSourceTrack: MusicTrack,
                           inSourceStartTime: MusicTimeStamp,
                           inSourceEndTime: MusicTimeStamp,
                           inDestTrack: MusicTrack,
                           inDestInsertTime: MusicTimeStamp) -> OSStatus;
    pub fn MusicTrackNewMIDINoteEvent(inTrack: MusicTrack,
                                      inTimeStamp: MusicTimeStamp,
                                      inMessage: *const MIDINoteMessage)
     -> OSStatus;
    pub fn MusicTrackNewMIDIChannelEvent(inTrack: MusicTrack,
                                         inTimeStamp: MusicTimeStamp,
                                         inMessage: *const MIDIChannelMessage)
     -> OSStatus;
    pub fn MusicTrackNewMIDIRawDataEvent(inTrack: MusicTrack,
                                         inTimeStamp: MusicTimeStamp,
                                         inRawData: *const MIDIRawData)
     -> OSStatus;
    pub fn MusicTrackNewExtendedNoteEvent(inTrack: MusicTrack,
                                          inTimeStamp: MusicTimeStamp,
                                          inInfo: *const ExtendedNoteOnEvent)
     -> OSStatus;
    pub fn MusicTrackNewParameterEvent(inTrack: MusicTrack,
                                       inTimeStamp: MusicTimeStamp,
                                       inInfo: *const ParameterEvent)
     -> OSStatus;
    pub fn MusicTrackNewExtendedTempoEvent(inTrack: MusicTrack,
                                           inTimeStamp: MusicTimeStamp,
                                           inBPM: Float64) -> OSStatus;
    pub fn MusicTrackNewMetaEvent(inTrack: MusicTrack,
                                  inTimeStamp: MusicTimeStamp,
                                  inMetaEvent: *const MIDIMetaEvent)
     -> OSStatus;
    pub fn MusicTrackNewUserEvent(inTrack: MusicTrack,
                                  inTimeStamp: MusicTimeStamp,
                                  inUserData: *const MusicEventUserData)
     -> OSStatus;
    pub fn MusicTrackNewAUPresetEvent(inTrack: MusicTrack,
                                      inTimeStamp: MusicTimeStamp,
                                      inPresetEvent: *const AUPresetEvent)
     -> OSStatus;
    pub fn NewMusicEventIterator(inTrack: MusicTrack,
                                 outIterator: *mut MusicEventIterator)
     -> OSStatus;
    pub fn DisposeMusicEventIterator(inIterator: MusicEventIterator)
     -> OSStatus;
    pub fn MusicEventIteratorSeek(inIterator: MusicEventIterator,
                                  inTimeStamp: MusicTimeStamp) -> OSStatus;
    pub fn MusicEventIteratorNextEvent(inIterator: MusicEventIterator)
     -> OSStatus;
    pub fn MusicEventIteratorPreviousEvent(inIterator: MusicEventIterator)
     -> OSStatus;
    pub fn MusicEventIteratorGetEventInfo(inIterator: MusicEventIterator,
                                          outTimeStamp: *mut MusicTimeStamp,
                                          outEventType: *mut MusicEventType,
                                          outEventData:
                                              *mut *const ::libc::c_void,
                                          outEventDataSize: *mut UInt32)
     -> OSStatus;
    pub fn MusicEventIteratorSetEventInfo(inIterator: MusicEventIterator,
                                          inEventType: MusicEventType,
                                          inEventData: *const ::libc::c_void)
     -> OSStatus;
    pub fn MusicEventIteratorSetEventTime(inIterator: MusicEventIterator,
                                          inTimeStamp: MusicTimeStamp)
     -> OSStatus;
    pub fn MusicEventIteratorDeleteEvent(inIterator: MusicEventIterator)
     -> OSStatus;
    pub fn MusicEventIteratorHasPreviousEvent(inIterator: MusicEventIterator,
                                              outHasPrevEvent: *mut Boolean)
     -> OSStatus;
    pub fn MusicEventIteratorHasNextEvent(inIterator: MusicEventIterator,
                                          outHasNextEvent: *mut Boolean)
     -> OSStatus;
    pub fn MusicEventIteratorHasCurrentEvent(inIterator: MusicEventIterator,
                                             outHasCurEvent: *mut Boolean)
     -> OSStatus;
    pub fn MusicSequenceLoadSMFWithFlags(inSequence: MusicSequence,
                                         inFileRef: *const Struct_FSRef,
                                         inFlags: MusicSequenceLoadFlags)
     -> OSStatus;
    pub fn MusicSequenceLoadSMFDataWithFlags(inSequence: MusicSequence,
                                             inData: CFDataRef,
                                             inFlags: MusicSequenceLoadFlags)
     -> OSStatus;
    pub fn MusicSequenceSaveMIDIFile(inSequence: MusicSequence,
                                     inParentDirectory: *const Struct_FSRef,
                                     inFileName: CFStringRef,
                                     inResolution: UInt16, inFlags: UInt32)
     -> OSStatus;
    pub fn MusicSequenceSaveSMFData(inSequence: MusicSequence,
                                    outData: *mut CFDataRef,
                                    inResolution: UInt16) -> OSStatus;
    pub fn NewMusicTrackFrom(inSourceTrack: MusicTrack,
                             inSourceStartTime: MusicTimeStamp,
                             inSourceEndTime: MusicTimeStamp,
                             outNewTrack: *mut MusicTrack) -> OSStatus;
    pub fn MusicTrackNewExtendedControlEvent(inTrack: MusicTrack,
                                             inTimeStamp: MusicTimeStamp,
                                             inInfo:
                                                 *const ExtendedControlEvent)
     -> OSStatus;
    pub fn AudioFileComponentCreateURL(inComponent: AudioFileComponent,
                                       inFileRef: CFURLRef,
                                       inFormat:
                                           *const AudioStreamBasicDescription,
                                       inFlags: UInt32) -> OSStatus;
    pub fn AudioFileComponentOpenURL(inComponent: AudioFileComponent,
                                     inFileRef: CFURLRef,
                                     inPermissions: SInt8,
                                     inFileDescriptor: ::libc::c_int)
     -> OSStatus;
    pub fn AudioFileComponentOpenWithCallbacks(inComponent:
                                                   AudioFileComponent,
                                               inClientData:
                                                   *mut ::libc::c_void,
                                               inReadFunc: AudioFile_ReadProc,
                                               inWriteFunc:
                                                   AudioFile_WriteProc,
                                               inGetSizeFunc:
                                                   AudioFile_GetSizeProc,
                                               inSetSizeFunc:
                                                   AudioFile_SetSizeProc)
     -> OSStatus;
    pub fn AudioFileComponentInitializeWithCallbacks(inComponent:
                                                         AudioFileComponent,
                                                     inClientData:
                                                         *mut ::libc::c_void,
                                                     inReadFunc:
                                                         AudioFile_ReadProc,
                                                     inWriteFunc:
                                                         AudioFile_WriteProc,
                                                     inGetSizeFunc:
                                                         AudioFile_GetSizeProc,
                                                     inSetSizeFunc:
                                                         AudioFile_SetSizeProc,
                                                     inFileType: UInt32,
                                                     inFormat:
                                                         *const AudioStreamBasicDescription,
                                                     inFlags: UInt32)
     -> OSStatus;
    pub fn AudioFileComponentCloseFile(inComponent: AudioFileComponent)
     -> OSStatus;
    pub fn AudioFileComponentOptimize(inComponent: AudioFileComponent)
     -> OSStatus;
    pub fn AudioFileComponentReadBytes(inComponent: AudioFileComponent,
                                       inUseCache: Boolean,
                                       inStartingByte: SInt64,
                                       ioNumBytes: *mut UInt32,
                                       outBuffer: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileComponentWriteBytes(inComponent: AudioFileComponent,
                                        inUseCache: Boolean,
                                        inStartingByte: SInt64,
                                        ioNumBytes: *mut UInt32,
                                        inBuffer: *const ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileComponentReadPackets(inComponent: AudioFileComponent,
                                         inUseCache: Boolean,
                                         outNumBytes: *mut UInt32,
                                         outPacketDescriptions:
                                             *mut AudioStreamPacketDescription,
                                         inStartingPacket: SInt64,
                                         ioNumPackets: *mut UInt32,
                                         outBuffer: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileComponentReadPacketData(inComponent: AudioFileComponent,
                                            inUseCache: Boolean,
                                            ioNumBytes: *mut UInt32,
                                            outPacketDescriptions:
                                                *mut AudioStreamPacketDescription,
                                            inStartingPacket: SInt64,
                                            ioNumPackets: *mut UInt32,
                                            outBuffer: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileComponentWritePackets(inComponent: AudioFileComponent,
                                          inUseCache: Boolean,
                                          inNumBytes: UInt32,
                                          inPacketDescriptions:
                                              *const AudioStreamPacketDescription,
                                          inStartingPacket: SInt64,
                                          ioNumPackets: *mut UInt32,
                                          inBuffer: *const ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileComponentGetPropertyInfo(inComponent: AudioFileComponent,
                                             inPropertyID:
                                                 AudioFileComponentPropertyID,
                                             outPropertySize: *mut UInt32,
                                             outWritable: *mut UInt32)
     -> OSStatus;
    pub fn AudioFileComponentGetProperty(inComponent: AudioFileComponent,
                                         inPropertyID:
                                             AudioFileComponentPropertyID,
                                         ioPropertyDataSize: *mut UInt32,
                                         outPropertyData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileComponentSetProperty(inComponent: AudioFileComponent,
                                         inPropertyID:
                                             AudioFileComponentPropertyID,
                                         inPropertyDataSize: UInt32,
                                         inPropertyData:
                                             *const ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileComponentCountUserData(inComponent: AudioFileComponent,
                                           inUserDataID: UInt32,
                                           outNumberItems: *mut UInt32)
     -> OSStatus;
    pub fn AudioFileComponentGetUserDataSize(inComponent: AudioFileComponent,
                                             inUserDataID: UInt32,
                                             inIndex: UInt32,
                                             outUserDataSize: *mut UInt32)
     -> OSStatus;
    pub fn AudioFileComponentGetUserData(inComponent: AudioFileComponent,
                                         inUserDataID: UInt32,
                                         inIndex: UInt32,
                                         ioUserDataSize: *mut UInt32,
                                         outUserData: *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileComponentSetUserData(inComponent: AudioFileComponent,
                                         inUserDataID: UInt32,
                                         inIndex: UInt32,
                                         inUserDataSize: UInt32,
                                         inUserData: *const ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileComponentRemoveUserData(inComponent: AudioFileComponent,
                                            inUserDataID: UInt32,
                                            inIndex: UInt32) -> OSStatus;
    pub fn AudioFileComponentExtensionIsThisFormat(inComponent:
                                                       AudioFileComponent,
                                                   inExtension: CFStringRef,
                                                   outResult: *mut UInt32)
     -> OSStatus;
    pub fn AudioFileComponentFileDataIsThisFormat(inComponent:
                                                      AudioFileComponent,
                                                  inDataByteSize: UInt32,
                                                  inData:
                                                      *const ::libc::c_void,
                                                  outResult: *mut UInt32)
     -> OSStatus;
    pub fn AudioFileComponentFileIsThisFormat(inComponent: AudioFileComponent,
                                              inFileRefNum: SInt16,
                                              outResult: *mut UInt32)
     -> OSStatus;
    pub fn AudioFileComponentDataIsThisFormat(inComponent: AudioFileComponent,
                                              inClientData:
                                                  *mut ::libc::c_void,
                                              inReadFunc: AudioFile_ReadProc,
                                              inWriteFunc:
                                                  AudioFile_WriteProc,
                                              inGetSizeFunc:
                                                  AudioFile_GetSizeProc,
                                              inSetSizeFunc:
                                                  AudioFile_SetSizeProc,
                                              outResult: *mut UInt32)
     -> OSStatus;
    pub fn AudioFileComponentGetGlobalInfoSize(inComponent:
                                                   AudioFileComponent,
                                               inPropertyID:
                                                   AudioFileComponentPropertyID,
                                               inSpecifierSize: UInt32,
                                               inSpecifier:
                                                   *const ::libc::c_void,
                                               outPropertySize: *mut UInt32)
     -> OSStatus;
    pub fn AudioFileComponentGetGlobalInfo(inComponent: AudioFileComponent,
                                           inPropertyID:
                                               AudioFileComponentPropertyID,
                                           inSpecifierSize: UInt32,
                                           inSpecifier: *const ::libc::c_void,
                                           ioPropertyDataSize: *mut UInt32,
                                           outPropertyData:
                                               *mut ::libc::c_void)
     -> OSStatus;
    pub fn AudioFileComponentCreate(inComponent: AudioFileComponent,
                                    inParentRef: *const Struct_FSRef,
                                    inFileName: CFStringRef,
                                    inFormat:
                                        *const AudioStreamBasicDescription,
                                    inFlags: UInt32,
                                    outNewFileRef: *mut Struct_FSRef)
     -> OSStatus;
    pub fn AudioFileComponentInitialize(inComponent: AudioFileComponent,
                                        inFileRef: *const Struct_FSRef,
                                        inFormat:
                                            *const AudioStreamBasicDescription,
                                        inFlags: UInt32) -> OSStatus;
    pub fn AudioFileComponentOpenFile(inComponent: AudioFileComponent,
                                      inFileRef: *const Struct_FSRef,
                                      inPermissions: SInt8, inRefNum: SInt16)
     -> OSStatus;
    pub fn AUListenerCreateWithDispatchQueue(outListener:
                                                 *mut AUParameterListenerRef,
                                             inNotificationInterval: Float32,
                                             inDispatchQueue:
                                                 dispatch_queue_t,
                                             inBlock:
                                                 AUParameterListenerBlock)
     -> OSStatus;
    pub fn AUListenerCreate(inProc: AUParameterListenerProc,
                            inUserData: *mut ::libc::c_void,
                            inRunLoop: CFRunLoopRef,
                            inRunLoopMode: CFStringRef,
                            inNotificationInterval: Float32,
                            outListener: *mut AUParameterListenerRef)
     -> OSStatus;
    pub fn AUListenerDispose(inListener: AUParameterListenerRef) -> OSStatus;
    pub fn AUListenerAddParameter(inListener: AUParameterListenerRef,
                                  inObject: *mut ::libc::c_void,
                                  inParameter: *const AudioUnitParameter)
     -> OSStatus;
    pub fn AUListenerRemoveParameter(inListener: AUParameterListenerRef,
                                     inObject: *mut ::libc::c_void,
                                     inParameter: *const AudioUnitParameter)
     -> OSStatus;
    pub fn AUParameterSet(inSendingListener: AUParameterListenerRef,
                          inSendingObject: *mut ::libc::c_void,
                          inParameter: *const AudioUnitParameter,
                          inValue: AudioUnitParameterValue,
                          inBufferOffsetInFrames: UInt32) -> OSStatus;
    pub fn AUParameterListenerNotify(inSendingListener:
                                         AUParameterListenerRef,
                                     inSendingObject: *mut ::libc::c_void,
                                     inParameter: *const AudioUnitParameter)
     -> OSStatus;
    pub fn AUEventListenerCreateWithDispatchQueue(outListener:
                                                      *mut AUEventListenerRef,
                                                  inNotificationInterval:
                                                      Float32,
                                                  inValueChangeGranularity:
                                                      Float32,
                                                  inDispatchQueue:
                                                      dispatch_queue_t,
                                                  inBlock:
                                                      AUEventListenerBlock)
     -> OSStatus;
    pub fn AUEventListenerCreate(inProc: AUEventListenerProc,
                                 inUserData: *mut ::libc::c_void,
                                 inRunLoop: CFRunLoopRef,
                                 inRunLoopMode: CFStringRef,
                                 inNotificationInterval: Float32,
                                 inValueChangeGranularity: Float32,
                                 outListener: *mut AUEventListenerRef)
     -> OSStatus;
    pub fn AUEventListenerAddEventType(inListener: AUEventListenerRef,
                                       inObject: *mut ::libc::c_void,
                                       inEvent: *const AudioUnitEvent)
     -> OSStatus;
    pub fn AUEventListenerRemoveEventType(inListener: AUEventListenerRef,
                                          inObject: *mut ::libc::c_void,
                                          inEvent: *const AudioUnitEvent)
     -> OSStatus;
    pub fn AUEventListenerNotify(inSendingListener: AUEventListenerRef,
                                 inSendingObject: *mut ::libc::c_void,
                                 inEvent: *const AudioUnitEvent) -> OSStatus;
    pub fn AUParameterValueFromLinear(inLinearValue: Float32,
                                      inParameter: *const AudioUnitParameter)
     -> AudioUnitParameterValue;
    pub fn AUParameterValueToLinear(inParameterValue: AudioUnitParameterValue,
                                    inParameter: *const AudioUnitParameter)
     -> Float32;
    pub fn AUParameterFormatValue(inParameterValue: Float64,
                                  inParameter: *const AudioUnitParameter,
                                  inTextBuffer: *mut ::libc::c_char,
                                  inDigits: UInt32) -> *mut ::libc::c_char;
    pub fn CAShow(inObject: *mut ::libc::c_void) -> ();
    pub fn CAShowFile(inObject: *mut ::libc::c_void, inFile: *mut FILE) -> ();
    pub fn GetNameFromSoundBank(inSoundBankRef: *const Struct_FSRef,
                                outName: *mut CFStringRef) -> OSStatus;
    pub fn CopyNameFromSoundBank(inURL: CFURLRef, outName: *mut CFStringRef)
     -> OSStatus;
    pub fn CopyInstrumentInfoFromSoundBank(inURL: CFURLRef,
                                           outInstrumentInfo: *mut CFArrayRef)
     -> OSStatus;
}
